/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the ActiveSubResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveSubResponse{}

// ActiveSubResponse struct for ActiveSubResponse
type ActiveSubResponse struct {
	HasActiveSubscriptions bool `json:"has_active_subscriptions"`
	Subscriptions []SubscriptionExternal `json:"subscriptions"`
	AdditionalProperties map[string]interface{}
}

type _ActiveSubResponse ActiveSubResponse

// NewActiveSubResponse instantiates a new ActiveSubResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveSubResponse(hasActiveSubscriptions bool, subscriptions []SubscriptionExternal) *ActiveSubResponse {
	this := ActiveSubResponse{}
	this.HasActiveSubscriptions = hasActiveSubscriptions
	this.Subscriptions = subscriptions
	return &this
}

// NewActiveSubResponseWithDefaults instantiates a new ActiveSubResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveSubResponseWithDefaults() *ActiveSubResponse {
	this := ActiveSubResponse{}
	return &this
}

// GetHasActiveSubscriptions returns the HasActiveSubscriptions field value
func (o *ActiveSubResponse) GetHasActiveSubscriptions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasActiveSubscriptions
}

// GetHasActiveSubscriptionsOk returns a tuple with the HasActiveSubscriptions field value
// and a boolean to check if the value has been set.
func (o *ActiveSubResponse) GetHasActiveSubscriptionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasActiveSubscriptions, true
}

// SetHasActiveSubscriptions sets field value
func (o *ActiveSubResponse) SetHasActiveSubscriptions(v bool) {
	o.HasActiveSubscriptions = v
}

// GetSubscriptions returns the Subscriptions field value
func (o *ActiveSubResponse) GetSubscriptions() []SubscriptionExternal {
	if o == nil {
		var ret []SubscriptionExternal
		return ret
	}

	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value
// and a boolean to check if the value has been set.
func (o *ActiveSubResponse) GetSubscriptionsOk() ([]SubscriptionExternal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscriptions, true
}

// SetSubscriptions sets field value
func (o *ActiveSubResponse) SetSubscriptions(v []SubscriptionExternal) {
	o.Subscriptions = v
}

func (o ActiveSubResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveSubResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["has_active_subscriptions"] = o.HasActiveSubscriptions
	toSerialize["subscriptions"] = o.Subscriptions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActiveSubResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"has_active_subscriptions",
		"subscriptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveSubResponse := _ActiveSubResponse{}

	err = json.Unmarshal(data, &varActiveSubResponse)

	if err != nil {
		return err
	}

	*o = ActiveSubResponse(varActiveSubResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "has_active_subscriptions")
		delete(additionalProperties, "subscriptions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActiveSubResponse struct {
	value *ActiveSubResponse
	isSet bool
}

func (v NullableActiveSubResponse) Get() *ActiveSubResponse {
	return v.value
}

func (v *NullableActiveSubResponse) Set(val *ActiveSubResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveSubResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveSubResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveSubResponse(val *ActiveSubResponse) *NullableActiveSubResponse {
	return &NullableActiveSubResponse{value: val, isSet: true}
}

func (v NullableActiveSubResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveSubResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


