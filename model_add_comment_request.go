/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddCommentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCommentRequest{}

// AddCommentRequest struct for AddCommentRequest
type AddCommentRequest struct {
	// Remarks on the invoice.
	Comment string `json:"comment"`
}

type _AddCommentRequest AddCommentRequest

// NewAddCommentRequest instantiates a new AddCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCommentRequest(comment string) *AddCommentRequest {
	this := AddCommentRequest{}
	this.Comment = comment
	return &this
}

// NewAddCommentRequestWithDefaults instantiates a new AddCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCommentRequestWithDefaults() *AddCommentRequest {
	this := AddCommentRequest{}
	return &this
}

// GetComment returns the Comment field value
func (o *AddCommentRequest) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *AddCommentRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *AddCommentRequest) SetComment(v string) {
	o.Comment = v
}

func (o AddCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCommentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	return toSerialize, nil
}

func (o *AddCommentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddCommentRequest := _AddCommentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddCommentRequest)

	if err != nil {
		return err
	}

	*o = AddCommentRequest(varAddCommentRequest)

	return err
}

type NullableAddCommentRequest struct {
	value *AddCommentRequest
	isSet bool
}

func (v NullableAddCommentRequest) Get() *AddCommentRequest {
	return v.value
}

func (v *NullableAddCommentRequest) Set(val *AddCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCommentRequest(val *AddCommentRequest) *NullableAddCommentRequest {
	return &NullableAddCommentRequest{value: val, isSet: true}
}

func (v NullableAddCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


