/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the AppModelsPriceInvoiceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppModelsPriceInvoiceSettings{}

// AppModelsPriceInvoiceSettings struct for AppModelsPriceInvoiceSettings
type AppModelsPriceInvoiceSettings struct {
	DefaultNetD NullableInt32 `json:"default_net_d,omitempty"`
}

// NewAppModelsPriceInvoiceSettings instantiates a new AppModelsPriceInvoiceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppModelsPriceInvoiceSettings() *AppModelsPriceInvoiceSettings {
	this := AppModelsPriceInvoiceSettings{}
	return &this
}

// NewAppModelsPriceInvoiceSettingsWithDefaults instantiates a new AppModelsPriceInvoiceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppModelsPriceInvoiceSettingsWithDefaults() *AppModelsPriceInvoiceSettings {
	this := AppModelsPriceInvoiceSettings{}
	return &this
}

// GetDefaultNetD returns the DefaultNetD field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppModelsPriceInvoiceSettings) GetDefaultNetD() int32 {
	if o == nil || IsNil(o.DefaultNetD.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultNetD.Get()
}

// GetDefaultNetDOk returns a tuple with the DefaultNetD field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppModelsPriceInvoiceSettings) GetDefaultNetDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultNetD.Get(), o.DefaultNetD.IsSet()
}

// HasDefaultNetD returns a boolean if a field has been set.
func (o *AppModelsPriceInvoiceSettings) HasDefaultNetD() bool {
	if o != nil && o.DefaultNetD.IsSet() {
		return true
	}

	return false
}

// SetDefaultNetD gets a reference to the given NullableInt32 and assigns it to the DefaultNetD field.
func (o *AppModelsPriceInvoiceSettings) SetDefaultNetD(v int32) {
	o.DefaultNetD.Set(&v)
}
// SetDefaultNetDNil sets the value for DefaultNetD to be an explicit nil
func (o *AppModelsPriceInvoiceSettings) SetDefaultNetDNil() {
	o.DefaultNetD.Set(nil)
}

// UnsetDefaultNetD ensures that no value is present for DefaultNetD, not even an explicit nil
func (o *AppModelsPriceInvoiceSettings) UnsetDefaultNetD() {
	o.DefaultNetD.Unset()
}

func (o AppModelsPriceInvoiceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppModelsPriceInvoiceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultNetD.IsSet() {
		toSerialize["default_net_d"] = o.DefaultNetD.Get()
	}
	return toSerialize, nil
}

type NullableAppModelsPriceInvoiceSettings struct {
	value *AppModelsPriceInvoiceSettings
	isSet bool
}

func (v NullableAppModelsPriceInvoiceSettings) Get() *AppModelsPriceInvoiceSettings {
	return v.value
}

func (v *NullableAppModelsPriceInvoiceSettings) Set(val *AppModelsPriceInvoiceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAppModelsPriceInvoiceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAppModelsPriceInvoiceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppModelsPriceInvoiceSettings(val *AppModelsPriceInvoiceSettings) *NullableAppModelsPriceInvoiceSettings {
	return &NullableAppModelsPriceInvoiceSettings{value: val, isSet: true}
}

func (v NullableAppModelsPriceInvoiceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppModelsPriceInvoiceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


