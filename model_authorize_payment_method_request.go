/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthorizePaymentMethodRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizePaymentMethodRequest{}

// AuthorizePaymentMethodRequest struct for AuthorizePaymentMethodRequest
type AuthorizePaymentMethodRequest struct {
	// Amount to authorize in atoms (smallest currency unit).
	AuthorizeAmountAtom *int32 `json:"authorize_amount_atom,omitempty"`
	// Currency for the authorization amount.
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Unique identifier of the payment method.
	PaymentMethodId string `json:"payment_method_id"`
	AdditionalProperties map[string]interface{}
}

type _AuthorizePaymentMethodRequest AuthorizePaymentMethodRequest

// NewAuthorizePaymentMethodRequest instantiates a new AuthorizePaymentMethodRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizePaymentMethodRequest(paymentMethodId string) *AuthorizePaymentMethodRequest {
	this := AuthorizePaymentMethodRequest{}
	var authorizeAmountAtom int32 = 2000
	this.AuthorizeAmountAtom = &authorizeAmountAtom
	this.PaymentMethodId = paymentMethodId
	return &this
}

// NewAuthorizePaymentMethodRequestWithDefaults instantiates a new AuthorizePaymentMethodRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizePaymentMethodRequestWithDefaults() *AuthorizePaymentMethodRequest {
	this := AuthorizePaymentMethodRequest{}
	var authorizeAmountAtom int32 = 2000
	this.AuthorizeAmountAtom = &authorizeAmountAtom
	return &this
}

// GetAuthorizeAmountAtom returns the AuthorizeAmountAtom field value if set, zero value otherwise.
func (o *AuthorizePaymentMethodRequest) GetAuthorizeAmountAtom() int32 {
	if o == nil || IsNil(o.AuthorizeAmountAtom) {
		var ret int32
		return ret
	}
	return *o.AuthorizeAmountAtom
}

// GetAuthorizeAmountAtomOk returns a tuple with the AuthorizeAmountAtom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizePaymentMethodRequest) GetAuthorizeAmountAtomOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthorizeAmountAtom) {
		return nil, false
	}
	return o.AuthorizeAmountAtom, true
}

// HasAuthorizeAmountAtom returns a boolean if a field has been set.
func (o *AuthorizePaymentMethodRequest) HasAuthorizeAmountAtom() bool {
	if o != nil && !IsNil(o.AuthorizeAmountAtom) {
		return true
	}

	return false
}

// SetAuthorizeAmountAtom gets a reference to the given int32 and assigns it to the AuthorizeAmountAtom field.
func (o *AuthorizePaymentMethodRequest) SetAuthorizeAmountAtom(v int32) {
	o.AuthorizeAmountAtom = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AuthorizePaymentMethodRequest) GetCurrency() CurrencyEnum {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizePaymentMethodRequest) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AuthorizePaymentMethodRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyEnum and assigns it to the Currency field.
func (o *AuthorizePaymentMethodRequest) SetCurrency(v CurrencyEnum) {
	o.Currency = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value
func (o *AuthorizePaymentMethodRequest) GetPaymentMethodId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value
// and a boolean to check if the value has been set.
func (o *AuthorizePaymentMethodRequest) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodId, true
}

// SetPaymentMethodId sets field value
func (o *AuthorizePaymentMethodRequest) SetPaymentMethodId(v string) {
	o.PaymentMethodId = v
}

func (o AuthorizePaymentMethodRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizePaymentMethodRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizeAmountAtom) {
		toSerialize["authorize_amount_atom"] = o.AuthorizeAmountAtom
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["payment_method_id"] = o.PaymentMethodId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthorizePaymentMethodRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payment_method_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthorizePaymentMethodRequest := _AuthorizePaymentMethodRequest{}

	err = json.Unmarshal(data, &varAuthorizePaymentMethodRequest)

	if err != nil {
		return err
	}

	*o = AuthorizePaymentMethodRequest(varAuthorizePaymentMethodRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorize_amount_atom")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "payment_method_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthorizePaymentMethodRequest struct {
	value *AuthorizePaymentMethodRequest
	isSet bool
}

func (v NullableAuthorizePaymentMethodRequest) Get() *AuthorizePaymentMethodRequest {
	return v.value
}

func (v *NullableAuthorizePaymentMethodRequest) Set(val *AuthorizePaymentMethodRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizePaymentMethodRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizePaymentMethodRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizePaymentMethodRequest(val *AuthorizePaymentMethodRequest) *NullableAuthorizePaymentMethodRequest {
	return &NullableAuthorizePaymentMethodRequest{value: val, isSet: true}
}

func (v NullableAuthorizePaymentMethodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizePaymentMethodRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


