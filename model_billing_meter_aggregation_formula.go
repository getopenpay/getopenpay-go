/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// BillingMeterAggregationFormula the model 'BillingMeterAggregationFormula'
type BillingMeterAggregationFormula string

// List of BillingMeterAggregationFormula
const (
	BILLINGMETERAGGREGATIONFORMULA_SUM BillingMeterAggregationFormula = "sum"
	BILLINGMETERAGGREGATIONFORMULA_COUNT BillingMeterAggregationFormula = "count"
)

// All allowed values of BillingMeterAggregationFormula enum
var AllowedBillingMeterAggregationFormulaEnumValues = []BillingMeterAggregationFormula{
	"sum",
	"count",
}

func (v *BillingMeterAggregationFormula) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingMeterAggregationFormula(value)
	for _, existing := range AllowedBillingMeterAggregationFormulaEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingMeterAggregationFormula", value)
}

// NewBillingMeterAggregationFormulaFromValue returns a pointer to a valid BillingMeterAggregationFormula
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingMeterAggregationFormulaFromValue(v string) (*BillingMeterAggregationFormula, error) {
	ev := BillingMeterAggregationFormula(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingMeterAggregationFormula: valid values are %v", v, AllowedBillingMeterAggregationFormulaEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingMeterAggregationFormula) IsValid() bool {
	for _, existing := range AllowedBillingMeterAggregationFormulaEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingMeterAggregationFormula value
func (v BillingMeterAggregationFormula) Ptr() *BillingMeterAggregationFormula {
	return &v
}

type NullableBillingMeterAggregationFormula struct {
	value *BillingMeterAggregationFormula
	isSet bool
}

func (v NullableBillingMeterAggregationFormula) Get() *BillingMeterAggregationFormula {
	return v.value
}

func (v *NullableBillingMeterAggregationFormula) Set(val *BillingMeterAggregationFormula) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingMeterAggregationFormula) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingMeterAggregationFormula) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingMeterAggregationFormula(val *BillingMeterAggregationFormula) *NullableBillingMeterAggregationFormula {
	return &NullableBillingMeterAggregationFormula{value: val, isSet: true}
}

func (v NullableBillingMeterAggregationFormula) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingMeterAggregationFormula) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

