/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// BillingMeterEventAdjustmentStatus the model 'BillingMeterEventAdjustmentStatus'
type BillingMeterEventAdjustmentStatus string

// List of BillingMeterEventAdjustmentStatus
const (
	BILLINGMETEREVENTADJUSTMENTSTATUS_PENDING BillingMeterEventAdjustmentStatus = "pending"
	BILLINGMETEREVENTADJUSTMENTSTATUS_COMPLETE BillingMeterEventAdjustmentStatus = "complete"
)

// All allowed values of BillingMeterEventAdjustmentStatus enum
var AllowedBillingMeterEventAdjustmentStatusEnumValues = []BillingMeterEventAdjustmentStatus{
	"pending",
	"complete",
}

func (v *BillingMeterEventAdjustmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingMeterEventAdjustmentStatus(value)
	for _, existing := range AllowedBillingMeterEventAdjustmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingMeterEventAdjustmentStatus", value)
}

// NewBillingMeterEventAdjustmentStatusFromValue returns a pointer to a valid BillingMeterEventAdjustmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingMeterEventAdjustmentStatusFromValue(v string) (*BillingMeterEventAdjustmentStatus, error) {
	ev := BillingMeterEventAdjustmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingMeterEventAdjustmentStatus: valid values are %v", v, AllowedBillingMeterEventAdjustmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingMeterEventAdjustmentStatus) IsValid() bool {
	for _, existing := range AllowedBillingMeterEventAdjustmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingMeterEventAdjustmentStatus value
func (v BillingMeterEventAdjustmentStatus) Ptr() *BillingMeterEventAdjustmentStatus {
	return &v
}

type NullableBillingMeterEventAdjustmentStatus struct {
	value *BillingMeterEventAdjustmentStatus
	isSet bool
}

func (v NullableBillingMeterEventAdjustmentStatus) Get() *BillingMeterEventAdjustmentStatus {
	return v.value
}

func (v *NullableBillingMeterEventAdjustmentStatus) Set(val *BillingMeterEventAdjustmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingMeterEventAdjustmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingMeterEventAdjustmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingMeterEventAdjustmentStatus(val *BillingMeterEventAdjustmentStatus) *NullableBillingMeterEventAdjustmentStatus {
	return &NullableBillingMeterEventAdjustmentStatus{value: val, isSet: true}
}

func (v NullableBillingMeterEventAdjustmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingMeterEventAdjustmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

