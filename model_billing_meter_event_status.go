/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// BillingMeterEventStatus the model 'BillingMeterEventStatus'
type BillingMeterEventStatus string

// List of BillingMeterEventStatus
const (
	BILLINGMETEREVENTSTATUS_ACTIVE BillingMeterEventStatus = "active"
	BILLINGMETEREVENTSTATUS_CANCELED BillingMeterEventStatus = "canceled"
	BILLINGMETEREVENTSTATUS_BILLED BillingMeterEventStatus = "billed"
)

// All allowed values of BillingMeterEventStatus enum
var AllowedBillingMeterEventStatusEnumValues = []BillingMeterEventStatus{
	"active",
	"canceled",
	"billed",
}

func (v *BillingMeterEventStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingMeterEventStatus(value)
	for _, existing := range AllowedBillingMeterEventStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingMeterEventStatus", value)
}

// NewBillingMeterEventStatusFromValue returns a pointer to a valid BillingMeterEventStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingMeterEventStatusFromValue(v string) (*BillingMeterEventStatus, error) {
	ev := BillingMeterEventStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingMeterEventStatus: valid values are %v", v, AllowedBillingMeterEventStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingMeterEventStatus) IsValid() bool {
	for _, existing := range AllowedBillingMeterEventStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingMeterEventStatus value
func (v BillingMeterEventStatus) Ptr() *BillingMeterEventStatus {
	return &v
}

type NullableBillingMeterEventStatus struct {
	value *BillingMeterEventStatus
	isSet bool
}

func (v NullableBillingMeterEventStatus) Get() *BillingMeterEventStatus {
	return v.value
}

func (v *NullableBillingMeterEventStatus) Set(val *BillingMeterEventStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingMeterEventStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingMeterEventStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingMeterEventStatus(val *BillingMeterEventStatus) *NullableBillingMeterEventStatus {
	return &NullableBillingMeterEventStatus{value: val, isSet: true}
}

func (v NullableBillingMeterEventStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingMeterEventStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

