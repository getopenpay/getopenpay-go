/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the BillingMeterSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingMeterSummary{}

// BillingMeterSummary struct for BillingMeterSummary
type BillingMeterSummary struct {
	// Aggregated value of all the events within start_time and end_time. The aggregation strategy is defined on meter via default_aggregation.
	AggregatedValue int32 `json:"aggregated_value"`
	// Count of events found within start_time and end_time.
	DocumentCount int32 `json:"document_count"`
	// End datetime for this event summary
	EndDatetime time.Time `json:"end_datetime"`
	// The if of billing meter associated with this event summary.
	MeterId string `json:"meter_id"`
	// Start datetime for this event summary
	StartDatetime time.Time `json:"start_datetime"`
	AdditionalProperties map[string]interface{}
}

type _BillingMeterSummary BillingMeterSummary

// NewBillingMeterSummary instantiates a new BillingMeterSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingMeterSummary(aggregatedValue int32, documentCount int32, endDatetime time.Time, meterId string, startDatetime time.Time) *BillingMeterSummary {
	this := BillingMeterSummary{}
	this.AggregatedValue = aggregatedValue
	this.DocumentCount = documentCount
	this.EndDatetime = endDatetime
	this.MeterId = meterId
	this.StartDatetime = startDatetime
	return &this
}

// NewBillingMeterSummaryWithDefaults instantiates a new BillingMeterSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingMeterSummaryWithDefaults() *BillingMeterSummary {
	this := BillingMeterSummary{}
	return &this
}

// GetAggregatedValue returns the AggregatedValue field value
func (o *BillingMeterSummary) GetAggregatedValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AggregatedValue
}

// GetAggregatedValueOk returns a tuple with the AggregatedValue field value
// and a boolean to check if the value has been set.
func (o *BillingMeterSummary) GetAggregatedValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregatedValue, true
}

// SetAggregatedValue sets field value
func (o *BillingMeterSummary) SetAggregatedValue(v int32) {
	o.AggregatedValue = v
}

// GetDocumentCount returns the DocumentCount field value
func (o *BillingMeterSummary) GetDocumentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DocumentCount
}

// GetDocumentCountOk returns a tuple with the DocumentCount field value
// and a boolean to check if the value has been set.
func (o *BillingMeterSummary) GetDocumentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentCount, true
}

// SetDocumentCount sets field value
func (o *BillingMeterSummary) SetDocumentCount(v int32) {
	o.DocumentCount = v
}

// GetEndDatetime returns the EndDatetime field value
func (o *BillingMeterSummary) GetEndDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDatetime
}

// GetEndDatetimeOk returns a tuple with the EndDatetime field value
// and a boolean to check if the value has been set.
func (o *BillingMeterSummary) GetEndDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDatetime, true
}

// SetEndDatetime sets field value
func (o *BillingMeterSummary) SetEndDatetime(v time.Time) {
	o.EndDatetime = v
}

// GetMeterId returns the MeterId field value
func (o *BillingMeterSummary) GetMeterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value
// and a boolean to check if the value has been set.
func (o *BillingMeterSummary) GetMeterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterId, true
}

// SetMeterId sets field value
func (o *BillingMeterSummary) SetMeterId(v string) {
	o.MeterId = v
}

// GetStartDatetime returns the StartDatetime field value
func (o *BillingMeterSummary) GetStartDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDatetime
}

// GetStartDatetimeOk returns a tuple with the StartDatetime field value
// and a boolean to check if the value has been set.
func (o *BillingMeterSummary) GetStartDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDatetime, true
}

// SetStartDatetime sets field value
func (o *BillingMeterSummary) SetStartDatetime(v time.Time) {
	o.StartDatetime = v
}

func (o BillingMeterSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingMeterSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregated_value"] = o.AggregatedValue
	toSerialize["document_count"] = o.DocumentCount
	toSerialize["end_datetime"] = o.EndDatetime
	toSerialize["meter_id"] = o.MeterId
	toSerialize["start_datetime"] = o.StartDatetime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BillingMeterSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregated_value",
		"document_count",
		"end_datetime",
		"meter_id",
		"start_datetime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingMeterSummary := _BillingMeterSummary{}

	err = json.Unmarshal(data, &varBillingMeterSummary)

	if err != nil {
		return err
	}

	*o = BillingMeterSummary(varBillingMeterSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregated_value")
		delete(additionalProperties, "document_count")
		delete(additionalProperties, "end_datetime")
		delete(additionalProperties, "meter_id")
		delete(additionalProperties, "start_datetime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBillingMeterSummary struct {
	value *BillingMeterSummary
	isSet bool
}

func (v NullableBillingMeterSummary) Get() *BillingMeterSummary {
	return v.value
}

func (v *NullableBillingMeterSummary) Set(val *BillingMeterSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingMeterSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingMeterSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingMeterSummary(val *BillingMeterSummary) *NullableBillingMeterSummary {
	return &NullableBillingMeterSummary{value: val, isSet: true}
}

func (v NullableBillingMeterSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingMeterSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


