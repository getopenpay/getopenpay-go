/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CalendarIntervalEnum the model 'CalendarIntervalEnum'
type CalendarIntervalEnum string

// List of CalendarIntervalEnum
const (
	CALENDARINTERVALENUM_DAY CalendarIntervalEnum = "day"
	CALENDARINTERVALENUM_WEEK CalendarIntervalEnum = "week"
	CALENDARINTERVALENUM_MONTH CalendarIntervalEnum = "month"
	CALENDARINTERVALENUM_YEAR CalendarIntervalEnum = "year"
)

// All allowed values of CalendarIntervalEnum enum
var AllowedCalendarIntervalEnumEnumValues = []CalendarIntervalEnum{
	"day",
	"week",
	"month",
	"year",
}

func (v *CalendarIntervalEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalendarIntervalEnum(value)
	for _, existing := range AllowedCalendarIntervalEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalendarIntervalEnum", value)
}

// NewCalendarIntervalEnumFromValue returns a pointer to a valid CalendarIntervalEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalendarIntervalEnumFromValue(v string) (*CalendarIntervalEnum, error) {
	ev := CalendarIntervalEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalendarIntervalEnum: valid values are %v", v, AllowedCalendarIntervalEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalendarIntervalEnum) IsValid() bool {
	for _, existing := range AllowedCalendarIntervalEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CalendarIntervalEnum value
func (v CalendarIntervalEnum) Ptr() *CalendarIntervalEnum {
	return &v
}

type NullableCalendarIntervalEnum struct {
	value *CalendarIntervalEnum
	isSet bool
}

func (v NullableCalendarIntervalEnum) Get() *CalendarIntervalEnum {
	return v.value
}

func (v *NullableCalendarIntervalEnum) Set(val *CalendarIntervalEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarIntervalEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarIntervalEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarIntervalEnum(val *CalendarIntervalEnum) *NullableCalendarIntervalEnum {
	return &NullableCalendarIntervalEnum{value: val, isSet: true}
}

func (v NullableCalendarIntervalEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarIntervalEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

