/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// ChargeStatusEnum the model 'ChargeStatusEnum'
type ChargeStatusEnum string

// List of ChargeStatusEnum
const (
	CHARGESTATUSENUM_SUCCEEDED ChargeStatusEnum = "succeeded"
	CHARGESTATUSENUM_FAILED ChargeStatusEnum = "failed"
	CHARGESTATUSENUM_PENDING ChargeStatusEnum = "pending"
)

// All allowed values of ChargeStatusEnum enum
var AllowedChargeStatusEnumEnumValues = []ChargeStatusEnum{
	"succeeded",
	"failed",
	"pending",
}

func (v *ChargeStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChargeStatusEnum(value)
	for _, existing := range AllowedChargeStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChargeStatusEnum", value)
}

// NewChargeStatusEnumFromValue returns a pointer to a valid ChargeStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChargeStatusEnumFromValue(v string) (*ChargeStatusEnum, error) {
	ev := ChargeStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChargeStatusEnum: valid values are %v", v, AllowedChargeStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChargeStatusEnum) IsValid() bool {
	for _, existing := range AllowedChargeStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChargeStatusEnum value
func (v ChargeStatusEnum) Ptr() *ChargeStatusEnum {
	return &v
}

type NullableChargeStatusEnum struct {
	value *ChargeStatusEnum
	isSet bool
}

func (v NullableChargeStatusEnum) Get() *ChargeStatusEnum {
	return v.value
}

func (v *NullableChargeStatusEnum) Set(val *ChargeStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeStatusEnum(val *ChargeStatusEnum) *NullableChargeStatusEnum {
	return &NullableChargeStatusEnum{value: val, isSet: true}
}

func (v NullableChargeStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

