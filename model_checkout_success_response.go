/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the CheckoutSuccessResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutSuccessResponse{}

// CheckoutSuccessResponse struct for CheckoutSuccessResponse
type CheckoutSuccessResponse struct {
	CustomerId string `json:"customer_id"`
	InvoiceUrls []string `json:"invoice_urls"`
	ProcessorsUsed []string `json:"processors_used,omitempty"`
	SubscriptionIds []string `json:"subscription_ids"`
	AdditionalProperties map[string]interface{}
}

type _CheckoutSuccessResponse CheckoutSuccessResponse

// NewCheckoutSuccessResponse instantiates a new CheckoutSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutSuccessResponse(customerId string, invoiceUrls []string, subscriptionIds []string) *CheckoutSuccessResponse {
	this := CheckoutSuccessResponse{}
	this.CustomerId = customerId
	this.InvoiceUrls = invoiceUrls
	this.SubscriptionIds = subscriptionIds
	return &this
}

// NewCheckoutSuccessResponseWithDefaults instantiates a new CheckoutSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutSuccessResponseWithDefaults() *CheckoutSuccessResponse {
	this := CheckoutSuccessResponse{}
	return &this
}

// GetCustomerId returns the CustomerId field value
func (o *CheckoutSuccessResponse) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *CheckoutSuccessResponse) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *CheckoutSuccessResponse) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetInvoiceUrls returns the InvoiceUrls field value
func (o *CheckoutSuccessResponse) GetInvoiceUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.InvoiceUrls
}

// GetInvoiceUrlsOk returns a tuple with the InvoiceUrls field value
// and a boolean to check if the value has been set.
func (o *CheckoutSuccessResponse) GetInvoiceUrlsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceUrls, true
}

// SetInvoiceUrls sets field value
func (o *CheckoutSuccessResponse) SetInvoiceUrls(v []string) {
	o.InvoiceUrls = v
}

// GetProcessorsUsed returns the ProcessorsUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckoutSuccessResponse) GetProcessorsUsed() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ProcessorsUsed
}

// GetProcessorsUsedOk returns a tuple with the ProcessorsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckoutSuccessResponse) GetProcessorsUsedOk() ([]string, bool) {
	if o == nil || IsNil(o.ProcessorsUsed) {
		return nil, false
	}
	return o.ProcessorsUsed, true
}

// HasProcessorsUsed returns a boolean if a field has been set.
func (o *CheckoutSuccessResponse) HasProcessorsUsed() bool {
	if o != nil && !IsNil(o.ProcessorsUsed) {
		return true
	}

	return false
}

// SetProcessorsUsed gets a reference to the given []string and assigns it to the ProcessorsUsed field.
func (o *CheckoutSuccessResponse) SetProcessorsUsed(v []string) {
	o.ProcessorsUsed = v
}

// GetSubscriptionIds returns the SubscriptionIds field value
func (o *CheckoutSuccessResponse) GetSubscriptionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubscriptionIds
}

// GetSubscriptionIdsOk returns a tuple with the SubscriptionIds field value
// and a boolean to check if the value has been set.
func (o *CheckoutSuccessResponse) GetSubscriptionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionIds, true
}

// SetSubscriptionIds sets field value
func (o *CheckoutSuccessResponse) SetSubscriptionIds(v []string) {
	o.SubscriptionIds = v
}

func (o CheckoutSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutSuccessResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["invoice_urls"] = o.InvoiceUrls
	if o.ProcessorsUsed != nil {
		toSerialize["processors_used"] = o.ProcessorsUsed
	}
	toSerialize["subscription_ids"] = o.SubscriptionIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckoutSuccessResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_id",
		"invoice_urls",
		"subscription_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckoutSuccessResponse := _CheckoutSuccessResponse{}

	err = json.Unmarshal(data, &varCheckoutSuccessResponse)

	if err != nil {
		return err
	}

	*o = CheckoutSuccessResponse(varCheckoutSuccessResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customer_id")
		delete(additionalProperties, "invoice_urls")
		delete(additionalProperties, "processors_used")
		delete(additionalProperties, "subscription_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckoutSuccessResponse struct {
	value *CheckoutSuccessResponse
	isSet bool
}

func (v NullableCheckoutSuccessResponse) Get() *CheckoutSuccessResponse {
	return v.value
}

func (v *NullableCheckoutSuccessResponse) Set(val *CheckoutSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutSuccessResponse(val *CheckoutSuccessResponse) *NullableCheckoutSuccessResponse {
	return &NullableCheckoutSuccessResponse{value: val, isSet: true}
}

func (v NullableCheckoutSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


