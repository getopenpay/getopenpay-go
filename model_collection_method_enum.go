/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CollectionMethodEnum the model 'CollectionMethodEnum'
type CollectionMethodEnum string

// List of CollectionMethodEnum
const (
	COLLECTIONMETHODENUM_CHARGE_AUTOMATICALLY CollectionMethodEnum = "charge_automatically"
	COLLECTIONMETHODENUM_SEND_INVOICE CollectionMethodEnum = "send_invoice"
)

// All allowed values of CollectionMethodEnum enum
var AllowedCollectionMethodEnumEnumValues = []CollectionMethodEnum{
	"charge_automatically",
	"send_invoice",
}

func (v *CollectionMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CollectionMethodEnum(value)
	for _, existing := range AllowedCollectionMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CollectionMethodEnum", value)
}

// NewCollectionMethodEnumFromValue returns a pointer to a valid CollectionMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCollectionMethodEnumFromValue(v string) (*CollectionMethodEnum, error) {
	ev := CollectionMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CollectionMethodEnum: valid values are %v", v, AllowedCollectionMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CollectionMethodEnum) IsValid() bool {
	for _, existing := range AllowedCollectionMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionMethodEnum value
func (v CollectionMethodEnum) Ptr() *CollectionMethodEnum {
	return &v
}

type NullableCollectionMethodEnum struct {
	value *CollectionMethodEnum
	isSet bool
}

func (v NullableCollectionMethodEnum) Get() *CollectionMethodEnum {
	return v.value
}

func (v *NullableCollectionMethodEnum) Set(val *CollectionMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionMethodEnum(val *CollectionMethodEnum) *NullableCollectionMethodEnum {
	return &NullableCollectionMethodEnum{value: val, isSet: true}
}

func (v NullableCollectionMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

