/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CouponDuration the model 'CouponDuration'
type CouponDuration string

// List of CouponDuration
const (
	COUPONDURATION_ONCE CouponDuration = "once"
	COUPONDURATION_REPEATING CouponDuration = "repeating"
	COUPONDURATION_FOREVER CouponDuration = "forever"
)

// All allowed values of CouponDuration enum
var AllowedCouponDurationEnumValues = []CouponDuration{
	"once",
	"repeating",
	"forever",
}

func (v *CouponDuration) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CouponDuration(value)
	for _, existing := range AllowedCouponDurationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CouponDuration", value)
}

// NewCouponDurationFromValue returns a pointer to a valid CouponDuration
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCouponDurationFromValue(v string) (*CouponDuration, error) {
	ev := CouponDuration(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CouponDuration: valid values are %v", v, AllowedCouponDurationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CouponDuration) IsValid() bool {
	for _, existing := range AllowedCouponDurationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CouponDuration value
func (v CouponDuration) Ptr() *CouponDuration {
	return &v
}

type NullableCouponDuration struct {
	value *CouponDuration
	isSet bool
}

func (v NullableCouponDuration) Get() *CouponDuration {
	return v.value
}

func (v *NullableCouponDuration) Set(val *CouponDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponDuration(val *CouponDuration) *NullableCouponDuration {
	return &NullableCouponDuration{value: val, isSet: true}
}

func (v NullableCouponDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

