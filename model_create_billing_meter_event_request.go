/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CreateBillingMeterEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBillingMeterEventRequest{}

// CreateBillingMeterEventRequest struct for CreateBillingMeterEventRequest
type CreateBillingMeterEventRequest struct {
	// The time of the event.
	EventDatetime *time.Time `json:"event_datetime,omitempty"`
	// The name of the meter event. Corresponds with the event_name field on a meter.
	EventName string `json:"event_name"`
	// A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this.
	Identifier *string `json:"identifier,omitempty"`
	// The payload of the event. This must contain the fields corresponding to a meterâ€™s event_payload_customer_mapping_key (default is customer_id) and event_payload_value_key (default is value). 
	Payload map[string]interface{} `json:"payload"`
	AdditionalProperties map[string]interface{}
}

type _CreateBillingMeterEventRequest CreateBillingMeterEventRequest

// NewCreateBillingMeterEventRequest instantiates a new CreateBillingMeterEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBillingMeterEventRequest(eventName string, payload map[string]interface{}) *CreateBillingMeterEventRequest {
	this := CreateBillingMeterEventRequest{}
	this.EventName = eventName
	this.Payload = payload
	return &this
}

// NewCreateBillingMeterEventRequestWithDefaults instantiates a new CreateBillingMeterEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBillingMeterEventRequestWithDefaults() *CreateBillingMeterEventRequest {
	this := CreateBillingMeterEventRequest{}
	return &this
}

// GetEventDatetime returns the EventDatetime field value if set, zero value otherwise.
func (o *CreateBillingMeterEventRequest) GetEventDatetime() time.Time {
	if o == nil || IsNil(o.EventDatetime) {
		var ret time.Time
		return ret
	}
	return *o.EventDatetime
}

// GetEventDatetimeOk returns a tuple with the EventDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBillingMeterEventRequest) GetEventDatetimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventDatetime) {
		return nil, false
	}
	return o.EventDatetime, true
}

// HasEventDatetime returns a boolean if a field has been set.
func (o *CreateBillingMeterEventRequest) HasEventDatetime() bool {
	if o != nil && !IsNil(o.EventDatetime) {
		return true
	}

	return false
}

// SetEventDatetime gets a reference to the given time.Time and assigns it to the EventDatetime field.
func (o *CreateBillingMeterEventRequest) SetEventDatetime(v time.Time) {
	o.EventDatetime = &v
}

// GetEventName returns the EventName field value
func (o *CreateBillingMeterEventRequest) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *CreateBillingMeterEventRequest) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *CreateBillingMeterEventRequest) SetEventName(v string) {
	o.EventName = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CreateBillingMeterEventRequest) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBillingMeterEventRequest) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CreateBillingMeterEventRequest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *CreateBillingMeterEventRequest) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetPayload returns the Payload field value
func (o *CreateBillingMeterEventRequest) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *CreateBillingMeterEventRequest) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *CreateBillingMeterEventRequest) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o CreateBillingMeterEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBillingMeterEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDatetime) {
		toSerialize["event_datetime"] = o.EventDatetime
	}
	toSerialize["event_name"] = o.EventName
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["payload"] = o.Payload

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateBillingMeterEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_name",
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBillingMeterEventRequest := _CreateBillingMeterEventRequest{}

	err = json.Unmarshal(data, &varCreateBillingMeterEventRequest)

	if err != nil {
		return err
	}

	*o = CreateBillingMeterEventRequest(varCreateBillingMeterEventRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event_datetime")
		delete(additionalProperties, "event_name")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateBillingMeterEventRequest struct {
	value *CreateBillingMeterEventRequest
	isSet bool
}

func (v NullableCreateBillingMeterEventRequest) Get() *CreateBillingMeterEventRequest {
	return v.value
}

func (v *NullableCreateBillingMeterEventRequest) Set(val *CreateBillingMeterEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBillingMeterEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBillingMeterEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBillingMeterEventRequest(val *CreateBillingMeterEventRequest) *NullableCreateBillingMeterEventRequest {
	return &NullableCreateBillingMeterEventRequest{value: val, isSet: true}
}

func (v NullableCreateBillingMeterEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBillingMeterEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


