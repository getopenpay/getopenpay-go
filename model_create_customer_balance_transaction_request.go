/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateCustomerBalanceTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCustomerBalanceTransactionRequest{}

// CreateCustomerBalanceTransactionRequest struct for CreateCustomerBalanceTransactionRequest
type CreateCustomerBalanceTransactionRequest struct {
	// The amount of the transaction in atomic units (in USD this is cents). A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s balance.
	AmountAtom int32 `json:"amount_atom"`
	Currency *CurrencyEnum `json:"currency,omitempty"`
	Description NullableString `json:"description,omitempty"`
}

type _CreateCustomerBalanceTransactionRequest CreateCustomerBalanceTransactionRequest

// NewCreateCustomerBalanceTransactionRequest instantiates a new CreateCustomerBalanceTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCustomerBalanceTransactionRequest(amountAtom int32) *CreateCustomerBalanceTransactionRequest {
	this := CreateCustomerBalanceTransactionRequest{}
	this.AmountAtom = amountAtom
	var currency CurrencyEnum = CURRENCYENUM_USD
	this.Currency = &currency
	return &this
}

// NewCreateCustomerBalanceTransactionRequestWithDefaults instantiates a new CreateCustomerBalanceTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCustomerBalanceTransactionRequestWithDefaults() *CreateCustomerBalanceTransactionRequest {
	this := CreateCustomerBalanceTransactionRequest{}
	var currency CurrencyEnum = CURRENCYENUM_USD
	this.Currency = &currency
	return &this
}

// GetAmountAtom returns the AmountAtom field value
func (o *CreateCustomerBalanceTransactionRequest) GetAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountAtom
}

// GetAmountAtomOk returns a tuple with the AmountAtom field value
// and a boolean to check if the value has been set.
func (o *CreateCustomerBalanceTransactionRequest) GetAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountAtom, true
}

// SetAmountAtom sets field value
func (o *CreateCustomerBalanceTransactionRequest) SetAmountAtom(v int32) {
	o.AmountAtom = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateCustomerBalanceTransactionRequest) GetCurrency() CurrencyEnum {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomerBalanceTransactionRequest) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateCustomerBalanceTransactionRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyEnum and assigns it to the Currency field.
func (o *CreateCustomerBalanceTransactionRequest) SetCurrency(v CurrencyEnum) {
	o.Currency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCustomerBalanceTransactionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCustomerBalanceTransactionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateCustomerBalanceTransactionRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateCustomerBalanceTransactionRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateCustomerBalanceTransactionRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateCustomerBalanceTransactionRequest) UnsetDescription() {
	o.Description.Unset()
}

func (o CreateCustomerBalanceTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCustomerBalanceTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount_atom"] = o.AmountAtom
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

func (o *CreateCustomerBalanceTransactionRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount_atom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCustomerBalanceTransactionRequest := _CreateCustomerBalanceTransactionRequest{}

	err = json.Unmarshal(bytes, &varCreateCustomerBalanceTransactionRequest)

	if err != nil {
		return err
	}

	*o = CreateCustomerBalanceTransactionRequest(varCreateCustomerBalanceTransactionRequest)

	return err
}

type NullableCreateCustomerBalanceTransactionRequest struct {
	value *CreateCustomerBalanceTransactionRequest
	isSet bool
}

func (v NullableCreateCustomerBalanceTransactionRequest) Get() *CreateCustomerBalanceTransactionRequest {
	return v.value
}

func (v *NullableCreateCustomerBalanceTransactionRequest) Set(val *CreateCustomerBalanceTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCustomerBalanceTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCustomerBalanceTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCustomerBalanceTransactionRequest(val *CreateCustomerBalanceTransactionRequest) *NullableCreateCustomerBalanceTransactionRequest {
	return &NullableCreateCustomerBalanceTransactionRequest{value: val, isSet: true}
}

func (v NullableCreateCustomerBalanceTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCustomerBalanceTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


