/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePaymentRouteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePaymentRouteRequest{}

// CreatePaymentRouteRequest struct for CreatePaymentRouteRequest
type CreatePaymentRouteRequest struct {
	// The name of the payment route.
	Name string `json:"name"`
	// The configuration object for the payment route. Contact the OpenPay team for more information.
	RouteConfiguration map[string]interface{} `json:"route_configuration"`
}

type _CreatePaymentRouteRequest CreatePaymentRouteRequest

// NewCreatePaymentRouteRequest instantiates a new CreatePaymentRouteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePaymentRouteRequest(name string, routeConfiguration map[string]interface{}) *CreatePaymentRouteRequest {
	this := CreatePaymentRouteRequest{}
	this.Name = name
	this.RouteConfiguration = routeConfiguration
	return &this
}

// NewCreatePaymentRouteRequestWithDefaults instantiates a new CreatePaymentRouteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePaymentRouteRequestWithDefaults() *CreatePaymentRouteRequest {
	this := CreatePaymentRouteRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreatePaymentRouteRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentRouteRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePaymentRouteRequest) SetName(v string) {
	o.Name = v
}

// GetRouteConfiguration returns the RouteConfiguration field value
func (o *CreatePaymentRouteRequest) GetRouteConfiguration() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.RouteConfiguration
}

// GetRouteConfigurationOk returns a tuple with the RouteConfiguration field value
// and a boolean to check if the value has been set.
func (o *CreatePaymentRouteRequest) GetRouteConfigurationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.RouteConfiguration, true
}

// SetRouteConfiguration sets field value
func (o *CreatePaymentRouteRequest) SetRouteConfiguration(v map[string]interface{}) {
	o.RouteConfiguration = v
}

func (o CreatePaymentRouteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePaymentRouteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["route_configuration"] = o.RouteConfiguration
	return toSerialize, nil
}

func (o *CreatePaymentRouteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"route_configuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePaymentRouteRequest := _CreatePaymentRouteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePaymentRouteRequest)

	if err != nil {
		return err
	}

	*o = CreatePaymentRouteRequest(varCreatePaymentRouteRequest)

	return err
}

type NullableCreatePaymentRouteRequest struct {
	value *CreatePaymentRouteRequest
	isSet bool
}

func (v NullableCreatePaymentRouteRequest) Get() *CreatePaymentRouteRequest {
	return v.value
}

func (v *NullableCreatePaymentRouteRequest) Set(val *CreatePaymentRouteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePaymentRouteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePaymentRouteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePaymentRouteRequest(val *CreatePaymentRouteRequest) *NullableCreatePaymentRouteRequest {
	return &NullableCreatePaymentRouteRequest{value: val, isSet: true}
}

func (v NullableCreatePaymentRouteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePaymentRouteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


