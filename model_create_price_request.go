/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePriceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePriceRequest{}

// CreatePriceRequest struct for CreatePriceRequest
type CreatePriceRequest struct {
	// Specifies a usage aggregation strategy for prices of usage_type 'metered'.
	AggregateUsage *UsageAggMethodEnum `json:"aggregate_usage,omitempty"`
	BillingInterval NullableCalendarIntervalEnum `json:"billing_interval,omitempty"`
	BillingIntervalCount NullableInt32 `json:"billing_interval_count,omitempty"`
	// This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.
	CanOnlyBePurchasedWith []string `json:"can_only_be_purchased_with,omitempty"`
	ContractAutoRenew NullableBool `json:"contract_auto_renew,omitempty"`
	ContractTermMultiple NullableInt32 `json:"contract_term_multiple,omitempty"`
	// Three-letter ISO currency code, in lowercase.
	Currency *CurrencyEnum `json:"currency,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	DefaultNetD NullableInt32 `json:"default_net_d,omitempty"`
	InternalDescription NullableString `json:"internal_description,omitempty"`
	// Whether the price can be used for new purchases.
	IsActive bool `json:"is_active"`
	IsDefault NullableBool `json:"is_default,omitempty"`
	IsExclusive NullableBool `json:"is_exclusive,omitempty"`
	// When listed_exclusively_for_customers is passed only customers under listed_exclusively_for_customers can list the given price. Anyone who has a payment_link containing the price can view and subscribe the prices regardless of it.Please do not pass a value if a price is not exclusive.
	ListedExclusivelyForCustomers []string `json:"listed_exclusively_for_customers,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	MeterId NullableString `json:"meter_id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	// List of price_tiers.
	PriceTiers []PriceTierParams `json:"price_tiers,omitempty"`
	// One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
	PriceType PriceTypeEnum `json:"price_type"`
	// Indicates which pricing model to be used for product.
	PricingModel PricingModel `json:"pricing_model"`
	// Unique identifier of the product.
	ProductId string `json:"product_id"`
	// This transformation will be applied on quantity before multiplying by unit_amount_atom.
	TransformQuantityDivideBy *float32 `json:"transform_quantity_divide_by,omitempty"`
	// Number of trail days for this Price.
	TrialPeriodDays *int32 `json:"trial_period_days,omitempty"`
	UnitAmountAtom NullableInt32 `json:"unit_amount_atom,omitempty"`
	// Configures how the quantity per period should be determined. Can be either 'metered' or 'licensed'. 'licensed' automatically bills the quantity set when adding it to a subscription. 'metered' aggregates the total usage based on usage records. Defaults to 'licensed'.
	UsageType *UsageTypeEnum `json:"usage_type,omitempty"`
}

type _CreatePriceRequest CreatePriceRequest

// NewCreatePriceRequest instantiates a new CreatePriceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePriceRequest(isActive bool, priceType PriceTypeEnum, pricingModel PricingModel, productId string) *CreatePriceRequest {
	this := CreatePriceRequest{}
	this.IsActive = isActive
	this.PriceType = priceType
	this.PricingModel = pricingModel
	this.ProductId = productId
	var transformQuantityDivideBy float32 = 1.0
	this.TransformQuantityDivideBy = &transformQuantityDivideBy
	var trialPeriodDays int32 = 0
	this.TrialPeriodDays = &trialPeriodDays
	return &this
}

// NewCreatePriceRequestWithDefaults instantiates a new CreatePriceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePriceRequestWithDefaults() *CreatePriceRequest {
	this := CreatePriceRequest{}
	var transformQuantityDivideBy float32 = 1.0
	this.TransformQuantityDivideBy = &transformQuantityDivideBy
	var trialPeriodDays int32 = 0
	this.TrialPeriodDays = &trialPeriodDays
	return &this
}

// GetAggregateUsage returns the AggregateUsage field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetAggregateUsage() UsageAggMethodEnum {
	if o == nil || IsNil(o.AggregateUsage) {
		var ret UsageAggMethodEnum
		return ret
	}
	return *o.AggregateUsage
}

// GetAggregateUsageOk returns a tuple with the AggregateUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetAggregateUsageOk() (*UsageAggMethodEnum, bool) {
	if o == nil || IsNil(o.AggregateUsage) {
		return nil, false
	}
	return o.AggregateUsage, true
}

// HasAggregateUsage returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasAggregateUsage() bool {
	if o != nil && !IsNil(o.AggregateUsage) {
		return true
	}

	return false
}

// SetAggregateUsage gets a reference to the given UsageAggMethodEnum and assigns it to the AggregateUsage field.
func (o *CreatePriceRequest) SetAggregateUsage(v UsageAggMethodEnum) {
	o.AggregateUsage = &v
}

// GetBillingInterval returns the BillingInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetBillingInterval() CalendarIntervalEnum {
	if o == nil || IsNil(o.BillingInterval.Get()) {
		var ret CalendarIntervalEnum
		return ret
	}
	return *o.BillingInterval.Get()
}

// GetBillingIntervalOk returns a tuple with the BillingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetBillingIntervalOk() (*CalendarIntervalEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingInterval.Get(), o.BillingInterval.IsSet()
}

// HasBillingInterval returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasBillingInterval() bool {
	if o != nil && o.BillingInterval.IsSet() {
		return true
	}

	return false
}

// SetBillingInterval gets a reference to the given NullableCalendarIntervalEnum and assigns it to the BillingInterval field.
func (o *CreatePriceRequest) SetBillingInterval(v CalendarIntervalEnum) {
	o.BillingInterval.Set(&v)
}
// SetBillingIntervalNil sets the value for BillingInterval to be an explicit nil
func (o *CreatePriceRequest) SetBillingIntervalNil() {
	o.BillingInterval.Set(nil)
}

// UnsetBillingInterval ensures that no value is present for BillingInterval, not even an explicit nil
func (o *CreatePriceRequest) UnsetBillingInterval() {
	o.BillingInterval.Unset()
}

// GetBillingIntervalCount returns the BillingIntervalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetBillingIntervalCount() int32 {
	if o == nil || IsNil(o.BillingIntervalCount.Get()) {
		var ret int32
		return ret
	}
	return *o.BillingIntervalCount.Get()
}

// GetBillingIntervalCountOk returns a tuple with the BillingIntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetBillingIntervalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingIntervalCount.Get(), o.BillingIntervalCount.IsSet()
}

// HasBillingIntervalCount returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasBillingIntervalCount() bool {
	if o != nil && o.BillingIntervalCount.IsSet() {
		return true
	}

	return false
}

// SetBillingIntervalCount gets a reference to the given NullableInt32 and assigns it to the BillingIntervalCount field.
func (o *CreatePriceRequest) SetBillingIntervalCount(v int32) {
	o.BillingIntervalCount.Set(&v)
}
// SetBillingIntervalCountNil sets the value for BillingIntervalCount to be an explicit nil
func (o *CreatePriceRequest) SetBillingIntervalCountNil() {
	o.BillingIntervalCount.Set(nil)
}

// UnsetBillingIntervalCount ensures that no value is present for BillingIntervalCount, not even an explicit nil
func (o *CreatePriceRequest) UnsetBillingIntervalCount() {
	o.BillingIntervalCount.Unset()
}

// GetCanOnlyBePurchasedWith returns the CanOnlyBePurchasedWith field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetCanOnlyBePurchasedWith() []string {
	if o == nil || IsNil(o.CanOnlyBePurchasedWith) {
		var ret []string
		return ret
	}
	return o.CanOnlyBePurchasedWith
}

// GetCanOnlyBePurchasedWithOk returns a tuple with the CanOnlyBePurchasedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetCanOnlyBePurchasedWithOk() ([]string, bool) {
	if o == nil || IsNil(o.CanOnlyBePurchasedWith) {
		return nil, false
	}
	return o.CanOnlyBePurchasedWith, true
}

// HasCanOnlyBePurchasedWith returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasCanOnlyBePurchasedWith() bool {
	if o != nil && !IsNil(o.CanOnlyBePurchasedWith) {
		return true
	}

	return false
}

// SetCanOnlyBePurchasedWith gets a reference to the given []string and assigns it to the CanOnlyBePurchasedWith field.
func (o *CreatePriceRequest) SetCanOnlyBePurchasedWith(v []string) {
	o.CanOnlyBePurchasedWith = v
}

// GetContractAutoRenew returns the ContractAutoRenew field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetContractAutoRenew() bool {
	if o == nil || IsNil(o.ContractAutoRenew.Get()) {
		var ret bool
		return ret
	}
	return *o.ContractAutoRenew.Get()
}

// GetContractAutoRenewOk returns a tuple with the ContractAutoRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetContractAutoRenewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractAutoRenew.Get(), o.ContractAutoRenew.IsSet()
}

// HasContractAutoRenew returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasContractAutoRenew() bool {
	if o != nil && o.ContractAutoRenew.IsSet() {
		return true
	}

	return false
}

// SetContractAutoRenew gets a reference to the given NullableBool and assigns it to the ContractAutoRenew field.
func (o *CreatePriceRequest) SetContractAutoRenew(v bool) {
	o.ContractAutoRenew.Set(&v)
}
// SetContractAutoRenewNil sets the value for ContractAutoRenew to be an explicit nil
func (o *CreatePriceRequest) SetContractAutoRenewNil() {
	o.ContractAutoRenew.Set(nil)
}

// UnsetContractAutoRenew ensures that no value is present for ContractAutoRenew, not even an explicit nil
func (o *CreatePriceRequest) UnsetContractAutoRenew() {
	o.ContractAutoRenew.Unset()
}

// GetContractTermMultiple returns the ContractTermMultiple field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetContractTermMultiple() int32 {
	if o == nil || IsNil(o.ContractTermMultiple.Get()) {
		var ret int32
		return ret
	}
	return *o.ContractTermMultiple.Get()
}

// GetContractTermMultipleOk returns a tuple with the ContractTermMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetContractTermMultipleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractTermMultiple.Get(), o.ContractTermMultiple.IsSet()
}

// HasContractTermMultiple returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasContractTermMultiple() bool {
	if o != nil && o.ContractTermMultiple.IsSet() {
		return true
	}

	return false
}

// SetContractTermMultiple gets a reference to the given NullableInt32 and assigns it to the ContractTermMultiple field.
func (o *CreatePriceRequest) SetContractTermMultiple(v int32) {
	o.ContractTermMultiple.Set(&v)
}
// SetContractTermMultipleNil sets the value for ContractTermMultiple to be an explicit nil
func (o *CreatePriceRequest) SetContractTermMultipleNil() {
	o.ContractTermMultiple.Set(nil)
}

// UnsetContractTermMultiple ensures that no value is present for ContractTermMultiple, not even an explicit nil
func (o *CreatePriceRequest) UnsetContractTermMultiple() {
	o.ContractTermMultiple.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetCurrency() CurrencyEnum {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyEnum and assigns it to the Currency field.
func (o *CreatePriceRequest) SetCurrency(v CurrencyEnum) {
	o.Currency = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *CreatePriceRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetDefaultNetD returns the DefaultNetD field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetDefaultNetD() int32 {
	if o == nil || IsNil(o.DefaultNetD.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultNetD.Get()
}

// GetDefaultNetDOk returns a tuple with the DefaultNetD field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetDefaultNetDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultNetD.Get(), o.DefaultNetD.IsSet()
}

// HasDefaultNetD returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasDefaultNetD() bool {
	if o != nil && o.DefaultNetD.IsSet() {
		return true
	}

	return false
}

// SetDefaultNetD gets a reference to the given NullableInt32 and assigns it to the DefaultNetD field.
func (o *CreatePriceRequest) SetDefaultNetD(v int32) {
	o.DefaultNetD.Set(&v)
}
// SetDefaultNetDNil sets the value for DefaultNetD to be an explicit nil
func (o *CreatePriceRequest) SetDefaultNetDNil() {
	o.DefaultNetD.Set(nil)
}

// UnsetDefaultNetD ensures that no value is present for DefaultNetD, not even an explicit nil
func (o *CreatePriceRequest) UnsetDefaultNetD() {
	o.DefaultNetD.Unset()
}

// GetInternalDescription returns the InternalDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetInternalDescription() string {
	if o == nil || IsNil(o.InternalDescription.Get()) {
		var ret string
		return ret
	}
	return *o.InternalDescription.Get()
}

// GetInternalDescriptionOk returns a tuple with the InternalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetInternalDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalDescription.Get(), o.InternalDescription.IsSet()
}

// HasInternalDescription returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasInternalDescription() bool {
	if o != nil && o.InternalDescription.IsSet() {
		return true
	}

	return false
}

// SetInternalDescription gets a reference to the given NullableString and assigns it to the InternalDescription field.
func (o *CreatePriceRequest) SetInternalDescription(v string) {
	o.InternalDescription.Set(&v)
}
// SetInternalDescriptionNil sets the value for InternalDescription to be an explicit nil
func (o *CreatePriceRequest) SetInternalDescriptionNil() {
	o.InternalDescription.Set(nil)
}

// UnsetInternalDescription ensures that no value is present for InternalDescription, not even an explicit nil
func (o *CreatePriceRequest) UnsetInternalDescription() {
	o.InternalDescription.Unset()
}

// GetIsActive returns the IsActive field value
func (o *CreatePriceRequest) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *CreatePriceRequest) SetIsActive(v bool) {
	o.IsActive = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *CreatePriceRequest) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}
// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *CreatePriceRequest) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *CreatePriceRequest) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetIsExclusive returns the IsExclusive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetIsExclusive() bool {
	if o == nil || IsNil(o.IsExclusive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsExclusive.Get()
}

// GetIsExclusiveOk returns a tuple with the IsExclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetIsExclusiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsExclusive.Get(), o.IsExclusive.IsSet()
}

// HasIsExclusive returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasIsExclusive() bool {
	if o != nil && o.IsExclusive.IsSet() {
		return true
	}

	return false
}

// SetIsExclusive gets a reference to the given NullableBool and assigns it to the IsExclusive field.
func (o *CreatePriceRequest) SetIsExclusive(v bool) {
	o.IsExclusive.Set(&v)
}
// SetIsExclusiveNil sets the value for IsExclusive to be an explicit nil
func (o *CreatePriceRequest) SetIsExclusiveNil() {
	o.IsExclusive.Set(nil)
}

// UnsetIsExclusive ensures that no value is present for IsExclusive, not even an explicit nil
func (o *CreatePriceRequest) UnsetIsExclusive() {
	o.IsExclusive.Unset()
}

// GetListedExclusivelyForCustomers returns the ListedExclusivelyForCustomers field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetListedExclusivelyForCustomers() []string {
	if o == nil || IsNil(o.ListedExclusivelyForCustomers) {
		var ret []string
		return ret
	}
	return o.ListedExclusivelyForCustomers
}

// GetListedExclusivelyForCustomersOk returns a tuple with the ListedExclusivelyForCustomers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetListedExclusivelyForCustomersOk() ([]string, bool) {
	if o == nil || IsNil(o.ListedExclusivelyForCustomers) {
		return nil, false
	}
	return o.ListedExclusivelyForCustomers, true
}

// HasListedExclusivelyForCustomers returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasListedExclusivelyForCustomers() bool {
	if o != nil && !IsNil(o.ListedExclusivelyForCustomers) {
		return true
	}

	return false
}

// SetListedExclusivelyForCustomers gets a reference to the given []string and assigns it to the ListedExclusivelyForCustomers field.
func (o *CreatePriceRequest) SetListedExclusivelyForCustomers(v []string) {
	o.ListedExclusivelyForCustomers = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *CreatePriceRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetMeterId returns the MeterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetMeterId() string {
	if o == nil || IsNil(o.MeterId.Get()) {
		var ret string
		return ret
	}
	return *o.MeterId.Get()
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetMeterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MeterId.Get(), o.MeterId.IsSet()
}

// HasMeterId returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasMeterId() bool {
	if o != nil && o.MeterId.IsSet() {
		return true
	}

	return false
}

// SetMeterId gets a reference to the given NullableString and assigns it to the MeterId field.
func (o *CreatePriceRequest) SetMeterId(v string) {
	o.MeterId.Set(&v)
}
// SetMeterIdNil sets the value for MeterId to be an explicit nil
func (o *CreatePriceRequest) SetMeterIdNil() {
	o.MeterId.Set(nil)
}

// UnsetMeterId ensures that no value is present for MeterId, not even an explicit nil
func (o *CreatePriceRequest) UnsetMeterId() {
	o.MeterId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreatePriceRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreatePriceRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreatePriceRequest) UnsetName() {
	o.Name.Unset()
}

// GetPriceTiers returns the PriceTiers field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetPriceTiers() []PriceTierParams {
	if o == nil || IsNil(o.PriceTiers) {
		var ret []PriceTierParams
		return ret
	}
	return o.PriceTiers
}

// GetPriceTiersOk returns a tuple with the PriceTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetPriceTiersOk() ([]PriceTierParams, bool) {
	if o == nil || IsNil(o.PriceTiers) {
		return nil, false
	}
	return o.PriceTiers, true
}

// HasPriceTiers returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasPriceTiers() bool {
	if o != nil && !IsNil(o.PriceTiers) {
		return true
	}

	return false
}

// SetPriceTiers gets a reference to the given []PriceTierParams and assigns it to the PriceTiers field.
func (o *CreatePriceRequest) SetPriceTiers(v []PriceTierParams) {
	o.PriceTiers = v
}

// GetPriceType returns the PriceType field value
func (o *CreatePriceRequest) GetPriceType() PriceTypeEnum {
	if o == nil {
		var ret PriceTypeEnum
		return ret
	}

	return o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetPriceTypeOk() (*PriceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceType, true
}

// SetPriceType sets field value
func (o *CreatePriceRequest) SetPriceType(v PriceTypeEnum) {
	o.PriceType = v
}

// GetPricingModel returns the PricingModel field value
func (o *CreatePriceRequest) GetPricingModel() PricingModel {
	if o == nil {
		var ret PricingModel
		return ret
	}

	return o.PricingModel
}

// GetPricingModelOk returns a tuple with the PricingModel field value
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetPricingModelOk() (*PricingModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PricingModel, true
}

// SetPricingModel sets field value
func (o *CreatePriceRequest) SetPricingModel(v PricingModel) {
	o.PricingModel = v
}

// GetProductId returns the ProductId field value
func (o *CreatePriceRequest) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CreatePriceRequest) SetProductId(v string) {
	o.ProductId = v
}

// GetTransformQuantityDivideBy returns the TransformQuantityDivideBy field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetTransformQuantityDivideBy() float32 {
	if o == nil || IsNil(o.TransformQuantityDivideBy) {
		var ret float32
		return ret
	}
	return *o.TransformQuantityDivideBy
}

// GetTransformQuantityDivideByOk returns a tuple with the TransformQuantityDivideBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetTransformQuantityDivideByOk() (*float32, bool) {
	if o == nil || IsNil(o.TransformQuantityDivideBy) {
		return nil, false
	}
	return o.TransformQuantityDivideBy, true
}

// HasTransformQuantityDivideBy returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasTransformQuantityDivideBy() bool {
	if o != nil && !IsNil(o.TransformQuantityDivideBy) {
		return true
	}

	return false
}

// SetTransformQuantityDivideBy gets a reference to the given float32 and assigns it to the TransformQuantityDivideBy field.
func (o *CreatePriceRequest) SetTransformQuantityDivideBy(v float32) {
	o.TransformQuantityDivideBy = &v
}

// GetTrialPeriodDays returns the TrialPeriodDays field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetTrialPeriodDays() int32 {
	if o == nil || IsNil(o.TrialPeriodDays) {
		var ret int32
		return ret
	}
	return *o.TrialPeriodDays
}

// GetTrialPeriodDaysOk returns a tuple with the TrialPeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetTrialPeriodDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.TrialPeriodDays) {
		return nil, false
	}
	return o.TrialPeriodDays, true
}

// HasTrialPeriodDays returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasTrialPeriodDays() bool {
	if o != nil && !IsNil(o.TrialPeriodDays) {
		return true
	}

	return false
}

// SetTrialPeriodDays gets a reference to the given int32 and assigns it to the TrialPeriodDays field.
func (o *CreatePriceRequest) SetTrialPeriodDays(v int32) {
	o.TrialPeriodDays = &v
}

// GetUnitAmountAtom returns the UnitAmountAtom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePriceRequest) GetUnitAmountAtom() int32 {
	if o == nil || IsNil(o.UnitAmountAtom.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitAmountAtom.Get()
}

// GetUnitAmountAtomOk returns a tuple with the UnitAmountAtom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePriceRequest) GetUnitAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitAmountAtom.Get(), o.UnitAmountAtom.IsSet()
}

// HasUnitAmountAtom returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasUnitAmountAtom() bool {
	if o != nil && o.UnitAmountAtom.IsSet() {
		return true
	}

	return false
}

// SetUnitAmountAtom gets a reference to the given NullableInt32 and assigns it to the UnitAmountAtom field.
func (o *CreatePriceRequest) SetUnitAmountAtom(v int32) {
	o.UnitAmountAtom.Set(&v)
}
// SetUnitAmountAtomNil sets the value for UnitAmountAtom to be an explicit nil
func (o *CreatePriceRequest) SetUnitAmountAtomNil() {
	o.UnitAmountAtom.Set(nil)
}

// UnsetUnitAmountAtom ensures that no value is present for UnitAmountAtom, not even an explicit nil
func (o *CreatePriceRequest) UnsetUnitAmountAtom() {
	o.UnitAmountAtom.Unset()
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *CreatePriceRequest) GetUsageType() UsageTypeEnum {
	if o == nil || IsNil(o.UsageType) {
		var ret UsageTypeEnum
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePriceRequest) GetUsageTypeOk() (*UsageTypeEnum, bool) {
	if o == nil || IsNil(o.UsageType) {
		return nil, false
	}
	return o.UsageType, true
}

// HasUsageType returns a boolean if a field has been set.
func (o *CreatePriceRequest) HasUsageType() bool {
	if o != nil && !IsNil(o.UsageType) {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given UsageTypeEnum and assigns it to the UsageType field.
func (o *CreatePriceRequest) SetUsageType(v UsageTypeEnum) {
	o.UsageType = &v
}

func (o CreatePriceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePriceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregateUsage) {
		toSerialize["aggregate_usage"] = o.AggregateUsage
	}
	if o.BillingInterval.IsSet() {
		toSerialize["billing_interval"] = o.BillingInterval.Get()
	}
	if o.BillingIntervalCount.IsSet() {
		toSerialize["billing_interval_count"] = o.BillingIntervalCount.Get()
	}
	if !IsNil(o.CanOnlyBePurchasedWith) {
		toSerialize["can_only_be_purchased_with"] = o.CanOnlyBePurchasedWith
	}
	if o.ContractAutoRenew.IsSet() {
		toSerialize["contract_auto_renew"] = o.ContractAutoRenew.Get()
	}
	if o.ContractTermMultiple.IsSet() {
		toSerialize["contract_term_multiple"] = o.ContractTermMultiple.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if o.DefaultNetD.IsSet() {
		toSerialize["default_net_d"] = o.DefaultNetD.Get()
	}
	if o.InternalDescription.IsSet() {
		toSerialize["internal_description"] = o.InternalDescription.Get()
	}
	toSerialize["is_active"] = o.IsActive
	if o.IsDefault.IsSet() {
		toSerialize["is_default"] = o.IsDefault.Get()
	}
	if o.IsExclusive.IsSet() {
		toSerialize["is_exclusive"] = o.IsExclusive.Get()
	}
	if !IsNil(o.ListedExclusivelyForCustomers) {
		toSerialize["listed_exclusively_for_customers"] = o.ListedExclusivelyForCustomers
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.MeterId.IsSet() {
		toSerialize["meter_id"] = o.MeterId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.PriceTiers) {
		toSerialize["price_tiers"] = o.PriceTiers
	}
	toSerialize["price_type"] = o.PriceType
	toSerialize["pricing_model"] = o.PricingModel
	toSerialize["product_id"] = o.ProductId
	if !IsNil(o.TransformQuantityDivideBy) {
		toSerialize["transform_quantity_divide_by"] = o.TransformQuantityDivideBy
	}
	if !IsNil(o.TrialPeriodDays) {
		toSerialize["trial_period_days"] = o.TrialPeriodDays
	}
	if o.UnitAmountAtom.IsSet() {
		toSerialize["unit_amount_atom"] = o.UnitAmountAtom.Get()
	}
	if !IsNil(o.UsageType) {
		toSerialize["usage_type"] = o.UsageType
	}
	return toSerialize, nil
}

func (o *CreatePriceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_active",
		"price_type",
		"pricing_model",
		"product_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePriceRequest := _CreatePriceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePriceRequest)

	if err != nil {
		return err
	}

	*o = CreatePriceRequest(varCreatePriceRequest)

	return err
}

type NullableCreatePriceRequest struct {
	value *CreatePriceRequest
	isSet bool
}

func (v NullableCreatePriceRequest) Get() *CreatePriceRequest {
	return v.value
}

func (v *NullableCreatePriceRequest) Set(val *CreatePriceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePriceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePriceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePriceRequest(val *CreatePriceRequest) *NullableCreatePriceRequest {
	return &NullableCreatePriceRequest{value: val, isSet: true}
}

func (v NullableCreatePriceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePriceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


