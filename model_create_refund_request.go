/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the CreateRefundRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRefundRequest{}

// CreateRefundRequest struct for CreateRefundRequest
type CreateRefundRequest struct {
	AmountAtom NullableInt32 `json:"amount_atom,omitempty"`
	ChargeId NullableString `json:"charge_id,omitempty"`
	// Three-letter ISO currency code, in lowercase.
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Description of the refund.
	Description *string `json:"description,omitempty"`
	PaymentIntentId NullableString `json:"payment_intent_id,omitempty"`
	// Reason of the refund.
	Reason *RefundReasonEnum `json:"reason,omitempty"`
	// The charge was refunded by an external platform. This cause the request to not execute a refund externally and instead simply update internal records.
	RefundedOutOfBand *bool `json:"refunded_out_of_band,omitempty"`
}

// NewCreateRefundRequest instantiates a new CreateRefundRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRefundRequest() *CreateRefundRequest {
	this := CreateRefundRequest{}
	var description string = "Manually triggered refund by admin."
	this.Description = &description
	var refundedOutOfBand bool = false
	this.RefundedOutOfBand = &refundedOutOfBand
	return &this
}

// NewCreateRefundRequestWithDefaults instantiates a new CreateRefundRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRefundRequestWithDefaults() *CreateRefundRequest {
	this := CreateRefundRequest{}
	var description string = "Manually triggered refund by admin."
	this.Description = &description
	var refundedOutOfBand bool = false
	this.RefundedOutOfBand = &refundedOutOfBand
	return &this
}

// GetAmountAtom returns the AmountAtom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRefundRequest) GetAmountAtom() int32 {
	if o == nil || IsNil(o.AmountAtom.Get()) {
		var ret int32
		return ret
	}
	return *o.AmountAtom.Get()
}

// GetAmountAtomOk returns a tuple with the AmountAtom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRefundRequest) GetAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountAtom.Get(), o.AmountAtom.IsSet()
}

// HasAmountAtom returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasAmountAtom() bool {
	if o != nil && o.AmountAtom.IsSet() {
		return true
	}

	return false
}

// SetAmountAtom gets a reference to the given NullableInt32 and assigns it to the AmountAtom field.
func (o *CreateRefundRequest) SetAmountAtom(v int32) {
	o.AmountAtom.Set(&v)
}
// SetAmountAtomNil sets the value for AmountAtom to be an explicit nil
func (o *CreateRefundRequest) SetAmountAtomNil() {
	o.AmountAtom.Set(nil)
}

// UnsetAmountAtom ensures that no value is present for AmountAtom, not even an explicit nil
func (o *CreateRefundRequest) UnsetAmountAtom() {
	o.AmountAtom.Unset()
}

// GetChargeId returns the ChargeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRefundRequest) GetChargeId() string {
	if o == nil || IsNil(o.ChargeId.Get()) {
		var ret string
		return ret
	}
	return *o.ChargeId.Get()
}

// GetChargeIdOk returns a tuple with the ChargeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRefundRequest) GetChargeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeId.Get(), o.ChargeId.IsSet()
}

// HasChargeId returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasChargeId() bool {
	if o != nil && o.ChargeId.IsSet() {
		return true
	}

	return false
}

// SetChargeId gets a reference to the given NullableString and assigns it to the ChargeId field.
func (o *CreateRefundRequest) SetChargeId(v string) {
	o.ChargeId.Set(&v)
}
// SetChargeIdNil sets the value for ChargeId to be an explicit nil
func (o *CreateRefundRequest) SetChargeIdNil() {
	o.ChargeId.Set(nil)
}

// UnsetChargeId ensures that no value is present for ChargeId, not even an explicit nil
func (o *CreateRefundRequest) UnsetChargeId() {
	o.ChargeId.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateRefundRequest) GetCurrency() CurrencyEnum {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRefundRequest) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyEnum and assigns it to the Currency field.
func (o *CreateRefundRequest) SetCurrency(v CurrencyEnum) {
	o.Currency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateRefundRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRefundRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateRefundRequest) SetDescription(v string) {
	o.Description = &v
}

// GetPaymentIntentId returns the PaymentIntentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRefundRequest) GetPaymentIntentId() string {
	if o == nil || IsNil(o.PaymentIntentId.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentIntentId.Get()
}

// GetPaymentIntentIdOk returns a tuple with the PaymentIntentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRefundRequest) GetPaymentIntentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentIntentId.Get(), o.PaymentIntentId.IsSet()
}

// HasPaymentIntentId returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasPaymentIntentId() bool {
	if o != nil && o.PaymentIntentId.IsSet() {
		return true
	}

	return false
}

// SetPaymentIntentId gets a reference to the given NullableString and assigns it to the PaymentIntentId field.
func (o *CreateRefundRequest) SetPaymentIntentId(v string) {
	o.PaymentIntentId.Set(&v)
}
// SetPaymentIntentIdNil sets the value for PaymentIntentId to be an explicit nil
func (o *CreateRefundRequest) SetPaymentIntentIdNil() {
	o.PaymentIntentId.Set(nil)
}

// UnsetPaymentIntentId ensures that no value is present for PaymentIntentId, not even an explicit nil
func (o *CreateRefundRequest) UnsetPaymentIntentId() {
	o.PaymentIntentId.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CreateRefundRequest) GetReason() RefundReasonEnum {
	if o == nil || IsNil(o.Reason) {
		var ret RefundReasonEnum
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRefundRequest) GetReasonOk() (*RefundReasonEnum, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given RefundReasonEnum and assigns it to the Reason field.
func (o *CreateRefundRequest) SetReason(v RefundReasonEnum) {
	o.Reason = &v
}

// GetRefundedOutOfBand returns the RefundedOutOfBand field value if set, zero value otherwise.
func (o *CreateRefundRequest) GetRefundedOutOfBand() bool {
	if o == nil || IsNil(o.RefundedOutOfBand) {
		var ret bool
		return ret
	}
	return *o.RefundedOutOfBand
}

// GetRefundedOutOfBandOk returns a tuple with the RefundedOutOfBand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRefundRequest) GetRefundedOutOfBandOk() (*bool, bool) {
	if o == nil || IsNil(o.RefundedOutOfBand) {
		return nil, false
	}
	return o.RefundedOutOfBand, true
}

// HasRefundedOutOfBand returns a boolean if a field has been set.
func (o *CreateRefundRequest) HasRefundedOutOfBand() bool {
	if o != nil && !IsNil(o.RefundedOutOfBand) {
		return true
	}

	return false
}

// SetRefundedOutOfBand gets a reference to the given bool and assigns it to the RefundedOutOfBand field.
func (o *CreateRefundRequest) SetRefundedOutOfBand(v bool) {
	o.RefundedOutOfBand = &v
}

func (o CreateRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRefundRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AmountAtom.IsSet() {
		toSerialize["amount_atom"] = o.AmountAtom.Get()
	}
	if o.ChargeId.IsSet() {
		toSerialize["charge_id"] = o.ChargeId.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.PaymentIntentId.IsSet() {
		toSerialize["payment_intent_id"] = o.PaymentIntentId.Get()
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.RefundedOutOfBand) {
		toSerialize["refunded_out_of_band"] = o.RefundedOutOfBand
	}
	return toSerialize, nil
}

type NullableCreateRefundRequest struct {
	value *CreateRefundRequest
	isSet bool
}

func (v NullableCreateRefundRequest) Get() *CreateRefundRequest {
	return v.value
}

func (v *NullableCreateRefundRequest) Set(val *CreateRefundRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRefundRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRefundRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRefundRequest(val *CreateRefundRequest) *NullableCreateRefundRequest {
	return &NullableCreateRefundRequest{value: val, isSet: true}
}

func (v NullableCreateRefundRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRefundRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


