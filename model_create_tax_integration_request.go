/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTaxIntegrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTaxIntegrationRequest{}

// CreateTaxIntegrationRequest struct for CreateTaxIntegrationRequest
type CreateTaxIntegrationRequest struct {
	// The timezone name for the accounting timezone (see pytz.all_timezones for a full list)
	AccountingTz string `json:"accounting_tz"`
	// These keys will allow to authenticate API requests to the tax processor.
	ApiKeys map[string]string `json:"api_keys"`
	// The name of the API used for the tax integration.
	ApiName TaxIntegrationApiName `json:"api_name"`
}

type _CreateTaxIntegrationRequest CreateTaxIntegrationRequest

// NewCreateTaxIntegrationRequest instantiates a new CreateTaxIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTaxIntegrationRequest(accountingTz string, apiKeys map[string]string, apiName TaxIntegrationApiName) *CreateTaxIntegrationRequest {
	this := CreateTaxIntegrationRequest{}
	this.AccountingTz = accountingTz
	this.ApiKeys = apiKeys
	this.ApiName = apiName
	return &this
}

// NewCreateTaxIntegrationRequestWithDefaults instantiates a new CreateTaxIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTaxIntegrationRequestWithDefaults() *CreateTaxIntegrationRequest {
	this := CreateTaxIntegrationRequest{}
	return &this
}

// GetAccountingTz returns the AccountingTz field value
func (o *CreateTaxIntegrationRequest) GetAccountingTz() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountingTz
}

// GetAccountingTzOk returns a tuple with the AccountingTz field value
// and a boolean to check if the value has been set.
func (o *CreateTaxIntegrationRequest) GetAccountingTzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingTz, true
}

// SetAccountingTz sets field value
func (o *CreateTaxIntegrationRequest) SetAccountingTz(v string) {
	o.AccountingTz = v
}

// GetApiKeys returns the ApiKeys field value
func (o *CreateTaxIntegrationRequest) GetApiKeys() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ApiKeys
}

// GetApiKeysOk returns a tuple with the ApiKeys field value
// and a boolean to check if the value has been set.
func (o *CreateTaxIntegrationRequest) GetApiKeysOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.ApiKeys, true
}

// SetApiKeys sets field value
func (o *CreateTaxIntegrationRequest) SetApiKeys(v map[string]string) {
	o.ApiKeys = v
}

// GetApiName returns the ApiName field value
func (o *CreateTaxIntegrationRequest) GetApiName() TaxIntegrationApiName {
	if o == nil {
		var ret TaxIntegrationApiName
		return ret
	}

	return o.ApiName
}

// GetApiNameOk returns a tuple with the ApiName field value
// and a boolean to check if the value has been set.
func (o *CreateTaxIntegrationRequest) GetApiNameOk() (*TaxIntegrationApiName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiName, true
}

// SetApiName sets field value
func (o *CreateTaxIntegrationRequest) SetApiName(v TaxIntegrationApiName) {
	o.ApiName = v
}

func (o CreateTaxIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTaxIntegrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accounting_tz"] = o.AccountingTz
	toSerialize["api_keys"] = o.ApiKeys
	toSerialize["api_name"] = o.ApiName
	return toSerialize, nil
}

func (o *CreateTaxIntegrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accounting_tz",
		"api_keys",
		"api_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTaxIntegrationRequest := _CreateTaxIntegrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTaxIntegrationRequest)

	if err != nil {
		return err
	}

	*o = CreateTaxIntegrationRequest(varCreateTaxIntegrationRequest)

	return err
}

type NullableCreateTaxIntegrationRequest struct {
	value *CreateTaxIntegrationRequest
	isSet bool
}

func (v NullableCreateTaxIntegrationRequest) Get() *CreateTaxIntegrationRequest {
	return v.value
}

func (v *NullableCreateTaxIntegrationRequest) Set(val *CreateTaxIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTaxIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTaxIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTaxIntegrationRequest(val *CreateTaxIntegrationRequest) *NullableCreateTaxIntegrationRequest {
	return &NullableCreateTaxIntegrationRequest{value: val, isSet: true}
}

func (v NullableCreateTaxIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTaxIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


