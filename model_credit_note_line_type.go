/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CreditNoteLineType the model 'CreditNoteLineType'
type CreditNoteLineType string

// List of CreditNoteLineType
const (
	CREDITNOTELINETYPE_INVOICE_LINE_ITEM CreditNoteLineType = "invoice_line_item"
	CREDITNOTELINETYPE_CUSTOM_LINE_ITEM CreditNoteLineType = "custom_line_item"
)

// All allowed values of CreditNoteLineType enum
var AllowedCreditNoteLineTypeEnumValues = []CreditNoteLineType{
	"invoice_line_item",
	"custom_line_item",
}

func (v *CreditNoteLineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditNoteLineType(value)
	for _, existing := range AllowedCreditNoteLineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditNoteLineType", value)
}

// NewCreditNoteLineTypeFromValue returns a pointer to a valid CreditNoteLineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditNoteLineTypeFromValue(v string) (*CreditNoteLineType, error) {
	ev := CreditNoteLineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditNoteLineType: valid values are %v", v, AllowedCreditNoteLineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditNoteLineType) IsValid() bool {
	for _, existing := range AllowedCreditNoteLineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditNoteLineType value
func (v CreditNoteLineType) Ptr() *CreditNoteLineType {
	return &v
}

type NullableCreditNoteLineType struct {
	value *CreditNoteLineType
	isSet bool
}

func (v NullableCreditNoteLineType) Get() *CreditNoteLineType {
	return v.value
}

func (v *NullableCreditNoteLineType) Set(val *CreditNoteLineType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteLineType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteLineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteLineType(val *CreditNoteLineType) *NullableCreditNoteLineType {
	return &NullableCreditNoteLineType{value: val, isSet: true}
}

func (v NullableCreditNoteLineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteLineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

