/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CreditNoteReason the model 'CreditNoteReason'
type CreditNoteReason string

// List of CreditNoteReason
const (
	CREDITNOTEREASON_DUPLICATE CreditNoteReason = "duplicate"
	CREDITNOTEREASON_FRAUDULENT CreditNoteReason = "fraudulent"
	CREDITNOTEREASON_ORDER_CHANGE CreditNoteReason = "order_change"
	CREDITNOTEREASON_PRODUCT_UNSATISFACTORY CreditNoteReason = "product_unsatisfactory"
)

// All allowed values of CreditNoteReason enum
var AllowedCreditNoteReasonEnumValues = []CreditNoteReason{
	"duplicate",
	"fraudulent",
	"order_change",
	"product_unsatisfactory",
}

func (v *CreditNoteReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditNoteReason(value)
	for _, existing := range AllowedCreditNoteReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditNoteReason", value)
}

// NewCreditNoteReasonFromValue returns a pointer to a valid CreditNoteReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditNoteReasonFromValue(v string) (*CreditNoteReason, error) {
	ev := CreditNoteReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditNoteReason: valid values are %v", v, AllowedCreditNoteReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditNoteReason) IsValid() bool {
	for _, existing := range AllowedCreditNoteReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditNoteReason value
func (v CreditNoteReason) Ptr() *CreditNoteReason {
	return &v
}

type NullableCreditNoteReason struct {
	value *CreditNoteReason
	isSet bool
}

func (v NullableCreditNoteReason) Get() *CreditNoteReason {
	return v.value
}

func (v *NullableCreditNoteReason) Set(val *CreditNoteReason) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteReason) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteReason(val *CreditNoteReason) *NullableCreditNoteReason {
	return &NullableCreditNoteReason{value: val, isSet: true}
}

func (v NullableCreditNoteReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

