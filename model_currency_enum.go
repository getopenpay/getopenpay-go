/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CurrencyEnum the model 'CurrencyEnum'
type CurrencyEnum string

// List of CurrencyEnum
const (
	CURRENCYENUM_USD CurrencyEnum = "usd"
	CURRENCYENUM_BRL CurrencyEnum = "brl"
	CURRENCYENUM_EUR CurrencyEnum = "eur"
	CURRENCYENUM_GBP CurrencyEnum = "gbp"
	CURRENCYENUM_AUD CurrencyEnum = "aud"
	CURRENCYENUM_CAD CurrencyEnum = "cad"
)

// All allowed values of CurrencyEnum enum
var AllowedCurrencyEnumEnumValues = []CurrencyEnum{
	"usd",
	"brl",
	"eur",
	"gbp",
	"aud",
	"cad",
}

func (v *CurrencyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyEnum(value)
	for _, existing := range AllowedCurrencyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyEnum", value)
}

// NewCurrencyEnumFromValue returns a pointer to a valid CurrencyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyEnumFromValue(v string) (*CurrencyEnum, error) {
	ev := CurrencyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyEnum: valid values are %v", v, AllowedCurrencyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyEnum) IsValid() bool {
	for _, existing := range AllowedCurrencyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrencyEnum value
func (v CurrencyEnum) Ptr() *CurrencyEnum {
	return &v
}

type NullableCurrencyEnum struct {
	value *CurrencyEnum
	isSet bool
}

func (v NullableCurrencyEnum) Get() *CurrencyEnum {
	return v.value
}

func (v *NullableCurrencyEnum) Set(val *CurrencyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyEnum(val *CurrencyEnum) *NullableCurrencyEnum {
	return &NullableCurrencyEnum{value: val, isSet: true}
}

func (v NullableCurrencyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

