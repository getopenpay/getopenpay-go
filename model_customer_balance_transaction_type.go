/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// CustomerBalanceTransactionType refer https://stripe.com/docs/billing/customer/balance#types
type CustomerBalanceTransactionType string

// List of CustomerBalanceTransactionType
const (
	CUSTOMERBALANCETRANSACTIONTYPE_ADJUSTMENT CustomerBalanceTransactionType = "adjustment"
	CUSTOMERBALANCETRANSACTIONTYPE_APPLIED_TO_INVOICE CustomerBalanceTransactionType = "applied_to_invoice"
	CUSTOMERBALANCETRANSACTIONTYPE_CREDIT_NOTE CustomerBalanceTransactionType = "credit_note"
	CUSTOMERBALANCETRANSACTIONTYPE_INITIAL CustomerBalanceTransactionType = "initial"
	CUSTOMERBALANCETRANSACTIONTYPE_INVOICE_OVERPAID CustomerBalanceTransactionType = "invoice_overpaid"
	CUSTOMERBALANCETRANSACTIONTYPE_INVOICE_TOO_LARGE CustomerBalanceTransactionType = "invoice_too_large"
	CUSTOMERBALANCETRANSACTIONTYPE_INVOICE_TOO_SMALL CustomerBalanceTransactionType = "invoice_too_small"
	CUSTOMERBALANCETRANSACTIONTYPE_UNSPENT_RECEIVER_CREDIT CustomerBalanceTransactionType = "unspent_receiver_credit"
	CUSTOMERBALANCETRANSACTIONTYPE_UNAPPLIED_FROM_INVOICE CustomerBalanceTransactionType = "unapplied_from_invoice"
)

// All allowed values of CustomerBalanceTransactionType enum
var AllowedCustomerBalanceTransactionTypeEnumValues = []CustomerBalanceTransactionType{
	"adjustment",
	"applied_to_invoice",
	"credit_note",
	"initial",
	"invoice_overpaid",
	"invoice_too_large",
	"invoice_too_small",
	"unspent_receiver_credit",
	"unapplied_from_invoice",
}

func (v *CustomerBalanceTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomerBalanceTransactionType(value)
	for _, existing := range AllowedCustomerBalanceTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomerBalanceTransactionType", value)
}

// NewCustomerBalanceTransactionTypeFromValue returns a pointer to a valid CustomerBalanceTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomerBalanceTransactionTypeFromValue(v string) (*CustomerBalanceTransactionType, error) {
	ev := CustomerBalanceTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomerBalanceTransactionType: valid values are %v", v, AllowedCustomerBalanceTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomerBalanceTransactionType) IsValid() bool {
	for _, existing := range AllowedCustomerBalanceTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomerBalanceTransactionType value
func (v CustomerBalanceTransactionType) Ptr() *CustomerBalanceTransactionType {
	return &v
}

type NullableCustomerBalanceTransactionType struct {
	value *CustomerBalanceTransactionType
	isSet bool
}

func (v NullableCustomerBalanceTransactionType) Get() *CustomerBalanceTransactionType {
	return v.value
}

func (v *NullableCustomerBalanceTransactionType) Set(val *CustomerBalanceTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerBalanceTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerBalanceTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerBalanceTransactionType(val *CustomerBalanceTransactionType) *NullableCustomerBalanceTransactionType {
	return &NullableCustomerBalanceTransactionType{value: val, isSet: true}
}

func (v NullableCustomerBalanceTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerBalanceTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

