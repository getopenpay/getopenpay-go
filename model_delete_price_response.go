/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the DeletePriceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePriceResponse{}

// DeletePriceResponse struct for DeletePriceResponse
type DeletePriceResponse struct {
	// Message describing result of API call.
	Message *string `json:"message,omitempty"`
	// Unique identifier of the price.
	PriceId string `json:"price_id"`
	AdditionalProperties map[string]interface{}
}

type _DeletePriceResponse DeletePriceResponse

// NewDeletePriceResponse instantiates a new DeletePriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePriceResponse(priceId string) *DeletePriceResponse {
	this := DeletePriceResponse{}
	var message string = "Price deleted Successfully."
	this.Message = &message
	this.PriceId = priceId
	return &this
}

// NewDeletePriceResponseWithDefaults instantiates a new DeletePriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePriceResponseWithDefaults() *DeletePriceResponse {
	this := DeletePriceResponse{}
	var message string = "Price deleted Successfully."
	this.Message = &message
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *DeletePriceResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePriceResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *DeletePriceResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *DeletePriceResponse) SetMessage(v string) {
	o.Message = &v
}

// GetPriceId returns the PriceId field value
func (o *DeletePriceResponse) GetPriceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceId
}

// GetPriceIdOk returns a tuple with the PriceId field value
// and a boolean to check if the value has been set.
func (o *DeletePriceResponse) GetPriceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceId, true
}

// SetPriceId sets field value
func (o *DeletePriceResponse) SetPriceId(v string) {
	o.PriceId = v
}

func (o DeletePriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePriceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["price_id"] = o.PriceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeletePriceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeletePriceResponse := _DeletePriceResponse{}

	err = json.Unmarshal(data, &varDeletePriceResponse)

	if err != nil {
		return err
	}

	*o = DeletePriceResponse(varDeletePriceResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "price_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeletePriceResponse struct {
	value *DeletePriceResponse
	isSet bool
}

func (v NullableDeletePriceResponse) Get() *DeletePriceResponse {
	return v.value
}

func (v *NullableDeletePriceResponse) Set(val *DeletePriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePriceResponse(val *DeletePriceResponse) *NullableDeletePriceResponse {
	return &NullableDeletePriceResponse{value: val, isSet: true}
}

func (v NullableDeletePriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


