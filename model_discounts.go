/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// Discounts The coupons to redeem into discounts for the invoice. If not specified, inherits the discount from one of its ancestors. Pass 'null' to not apply any discounts to this invoice.
type Discounts struct {
	InvoiceDiscountOptions *InvoiceDiscountOptions
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Discounts) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into InvoiceDiscountOptions
	err = json.Unmarshal(data, &dst.InvoiceDiscountOptions);
	if err == nil {
		jsonInvoiceDiscountOptions, _ := json.Marshal(dst.InvoiceDiscountOptions)
		if string(jsonInvoiceDiscountOptions) == "{}" { // empty struct
			dst.InvoiceDiscountOptions = nil
		} else {
			return nil // data stored in dst.InvoiceDiscountOptions, return on the first match
		}
	} else {
		dst.InvoiceDiscountOptions = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Discounts)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Discounts) MarshalJSON() ([]byte, error) {
	if src.InvoiceDiscountOptions != nil {
		return json.Marshal(&src.InvoiceDiscountOptions)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableDiscounts struct {
	value *Discounts
	isSet bool
}

func (v NullableDiscounts) Get() *Discounts {
	return v.value
}

func (v *NullableDiscounts) Set(val *Discounts) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscounts) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscounts(val *Discounts) *NullableDiscounts {
	return &NullableDiscounts{value: val, isSet: true}
}

func (v NullableDiscounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


