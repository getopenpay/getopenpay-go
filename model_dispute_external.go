/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DisputeExternal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeExternal{}

// DisputeExternal struct for DisputeExternal
type DisputeExternal struct {
	// Unique identifier for the account.
	AccountId string `json:"account_id"`
	// DateTime at which the object was created, in 'ISO 8601' format.
	CreatedAt time.Time `json:"created_at"`
	// Unique identifier of the dispute.
	Id string `json:"id"`
	// If true, indicates that this object has been deleted
	IsDeleted *bool `json:"is_deleted,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Object *ObjectName `json:"object,omitempty"`
	// The payment intent id.
	PaymentIntentId string `json:"payment_intent_id"`
	Reason NullableString `json:"reason,omitempty"`
	// There dispute id.
	TheirDisputeId string `json:"their_dispute_id"`
	// Their payment intent id
	TheirPaymentIntentId string `json:"their_payment_intent_id"`
	// DateTime at which the object was updated, in 'ISO 8601' format.
	UpdatedAt time.Time `json:"updated_at"`
}

type _DisputeExternal DisputeExternal

// NewDisputeExternal instantiates a new DisputeExternal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeExternal(accountId string, createdAt time.Time, id string, paymentIntentId string, theirDisputeId string, theirPaymentIntentId string, updatedAt time.Time) *DisputeExternal {
	this := DisputeExternal{}
	this.AccountId = accountId
	this.CreatedAt = createdAt
	this.Id = id
	var isDeleted bool = false
	this.IsDeleted = &isDeleted
	this.PaymentIntentId = paymentIntentId
	this.TheirDisputeId = theirDisputeId
	this.TheirPaymentIntentId = theirPaymentIntentId
	this.UpdatedAt = updatedAt
	return &this
}

// NewDisputeExternalWithDefaults instantiates a new DisputeExternal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeExternalWithDefaults() *DisputeExternal {
	this := DisputeExternal{}
	var isDeleted bool = false
	this.IsDeleted = &isDeleted
	return &this
}

// GetAccountId returns the AccountId field value
func (o *DisputeExternal) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *DisputeExternal) SetAccountId(v string) {
	o.AccountId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DisputeExternal) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DisputeExternal) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *DisputeExternal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DisputeExternal) SetId(v string) {
	o.Id = v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *DisputeExternal) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *DisputeExternal) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *DisputeExternal) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DisputeExternal) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DisputeExternal) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DisputeExternal) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *DisputeExternal) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *DisputeExternal) GetObject() ObjectName {
	if o == nil || IsNil(o.Object) {
		var ret ObjectName
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetObjectOk() (*ObjectName, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *DisputeExternal) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given ObjectName and assigns it to the Object field.
func (o *DisputeExternal) SetObject(v ObjectName) {
	o.Object = &v
}

// GetPaymentIntentId returns the PaymentIntentId field value
func (o *DisputeExternal) GetPaymentIntentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentIntentId
}

// GetPaymentIntentIdOk returns a tuple with the PaymentIntentId field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetPaymentIntentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentIntentId, true
}

// SetPaymentIntentId sets field value
func (o *DisputeExternal) SetPaymentIntentId(v string) {
	o.PaymentIntentId = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DisputeExternal) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DisputeExternal) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *DisputeExternal) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *DisputeExternal) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *DisputeExternal) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *DisputeExternal) UnsetReason() {
	o.Reason.Unset()
}

// GetTheirDisputeId returns the TheirDisputeId field value
func (o *DisputeExternal) GetTheirDisputeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TheirDisputeId
}

// GetTheirDisputeIdOk returns a tuple with the TheirDisputeId field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetTheirDisputeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TheirDisputeId, true
}

// SetTheirDisputeId sets field value
func (o *DisputeExternal) SetTheirDisputeId(v string) {
	o.TheirDisputeId = v
}

// GetTheirPaymentIntentId returns the TheirPaymentIntentId field value
func (o *DisputeExternal) GetTheirPaymentIntentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TheirPaymentIntentId
}

// GetTheirPaymentIntentIdOk returns a tuple with the TheirPaymentIntentId field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetTheirPaymentIntentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TheirPaymentIntentId, true
}

// SetTheirPaymentIntentId sets field value
func (o *DisputeExternal) SetTheirPaymentIntentId(v string) {
	o.TheirPaymentIntentId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DisputeExternal) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DisputeExternal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DisputeExternal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o DisputeExternal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeExternal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	if !IsNil(o.IsDeleted) {
		toSerialize["is_deleted"] = o.IsDeleted
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["payment_intent_id"] = o.PaymentIntentId
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	toSerialize["their_dispute_id"] = o.TheirDisputeId
	toSerialize["their_payment_intent_id"] = o.TheirPaymentIntentId
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *DisputeExternal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"created_at",
		"id",
		"payment_intent_id",
		"their_dispute_id",
		"their_payment_intent_id",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisputeExternal := _DisputeExternal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisputeExternal)

	if err != nil {
		return err
	}

	*o = DisputeExternal(varDisputeExternal)

	return err
}

type NullableDisputeExternal struct {
	value *DisputeExternal
	isSet bool
}

func (v NullableDisputeExternal) Get() *DisputeExternal {
	return v.value
}

func (v *NullableDisputeExternal) Set(val *DisputeExternal) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeExternal) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeExternal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeExternal(val *DisputeExternal) *NullableDisputeExternal {
	return &NullableDisputeExternal{value: val, isSet: true}
}

func (v NullableDisputeExternal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeExternal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


