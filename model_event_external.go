/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EventExternal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventExternal{}

// EventExternal struct for EventExternal
type EventExternal struct {
	AccountId NullableString `json:"account_id"`
	// DateTime at which the object was created, in 'ISO 8601' format.
	CreatedAt time.Time `json:"created_at"`
	Data map[string]interface{} `json:"data"`
	DataPrevious map[string]interface{} `json:"data_previous"`
	Id string `json:"id"`
	// If true, indicates that this object has been deleted
	IsDeleted *bool `json:"is_deleted,omitempty"`
	Object *ObjectName `json:"object,omitempty"`
	PendingWebhooks int32 `json:"pending_webhooks"`
	RequestId NullableString `json:"request_id"`
	RequestIdempotencyKey NullableString `json:"request_idempotency_key"`
	Type EventType `json:"type"`
	// DateTime at which the object was updated, in 'ISO 8601' format.
	UpdatedAt time.Time `json:"updated_at"`
	User NullableString `json:"user,omitempty"`
}

type _EventExternal EventExternal

// NewEventExternal instantiates a new EventExternal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventExternal(accountId NullableString, createdAt time.Time, data map[string]interface{}, dataPrevious map[string]interface{}, id string, pendingWebhooks int32, requestId NullableString, requestIdempotencyKey NullableString, type_ EventType, updatedAt time.Time) *EventExternal {
	this := EventExternal{}
	this.AccountId = accountId
	this.CreatedAt = createdAt
	this.Data = data
	this.DataPrevious = dataPrevious
	this.Id = id
	var isDeleted bool = false
	this.IsDeleted = &isDeleted
	this.PendingWebhooks = pendingWebhooks
	this.RequestId = requestId
	this.RequestIdempotencyKey = requestIdempotencyKey
	this.Type = type_
	this.UpdatedAt = updatedAt
	return &this
}

// NewEventExternalWithDefaults instantiates a new EventExternal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventExternalWithDefaults() *EventExternal {
	this := EventExternal{}
	var isDeleted bool = false
	this.IsDeleted = &isDeleted
	return &this
}

// GetAccountId returns the AccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventExternal) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventExternal) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// SetAccountId sets field value
func (o *EventExternal) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *EventExternal) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EventExternal) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetData returns the Data field value
func (o *EventExternal) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *EventExternal) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataPrevious returns the DataPrevious field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *EventExternal) GetDataPrevious() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.DataPrevious
}

// GetDataPreviousOk returns a tuple with the DataPrevious field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventExternal) GetDataPreviousOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DataPrevious) {
		return map[string]interface{}{}, false
	}
	return o.DataPrevious, true
}

// SetDataPrevious sets field value
func (o *EventExternal) SetDataPrevious(v map[string]interface{}) {
	o.DataPrevious = v
}

// GetId returns the Id field value
func (o *EventExternal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventExternal) SetId(v string) {
	o.Id = v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *EventExternal) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExternal) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *EventExternal) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *EventExternal) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *EventExternal) GetObject() ObjectName {
	if o == nil || IsNil(o.Object) {
		var ret ObjectName
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExternal) GetObjectOk() (*ObjectName, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *EventExternal) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given ObjectName and assigns it to the Object field.
func (o *EventExternal) SetObject(v ObjectName) {
	o.Object = &v
}

// GetPendingWebhooks returns the PendingWebhooks field value
func (o *EventExternal) GetPendingWebhooks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PendingWebhooks
}

// GetPendingWebhooksOk returns a tuple with the PendingWebhooks field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetPendingWebhooksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingWebhooks, true
}

// SetPendingWebhooks sets field value
func (o *EventExternal) SetPendingWebhooks(v int32) {
	o.PendingWebhooks = v
}

// GetRequestId returns the RequestId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventExternal) GetRequestId() string {
	if o == nil || o.RequestId.Get() == nil {
		var ret string
		return ret
	}

	return *o.RequestId.Get()
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventExternal) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestId.Get(), o.RequestId.IsSet()
}

// SetRequestId sets field value
func (o *EventExternal) SetRequestId(v string) {
	o.RequestId.Set(&v)
}

// GetRequestIdempotencyKey returns the RequestIdempotencyKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventExternal) GetRequestIdempotencyKey() string {
	if o == nil || o.RequestIdempotencyKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.RequestIdempotencyKey.Get()
}

// GetRequestIdempotencyKeyOk returns a tuple with the RequestIdempotencyKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventExternal) GetRequestIdempotencyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestIdempotencyKey.Get(), o.RequestIdempotencyKey.IsSet()
}

// SetRequestIdempotencyKey sets field value
func (o *EventExternal) SetRequestIdempotencyKey(v string) {
	o.RequestIdempotencyKey.Set(&v)
}

// GetType returns the Type field value
func (o *EventExternal) GetType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventExternal) SetType(v EventType) {
	o.Type = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EventExternal) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EventExternal) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EventExternal) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventExternal) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventExternal) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *EventExternal) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *EventExternal) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *EventExternal) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *EventExternal) UnsetUser() {
	o.User.Unset()
}

func (o EventExternal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventExternal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["data"] = o.Data
	if o.DataPrevious != nil {
		toSerialize["data_previous"] = o.DataPrevious
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsDeleted) {
		toSerialize["is_deleted"] = o.IsDeleted
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["pending_webhooks"] = o.PendingWebhooks
	toSerialize["request_id"] = o.RequestId.Get()
	toSerialize["request_idempotency_key"] = o.RequestIdempotencyKey.Get()
	toSerialize["type"] = o.Type
	toSerialize["updated_at"] = o.UpdatedAt
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	return toSerialize, nil
}

func (o *EventExternal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"created_at",
		"data",
		"data_previous",
		"id",
		"pending_webhooks",
		"request_id",
		"request_idempotency_key",
		"type",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventExternal := _EventExternal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventExternal)

	if err != nil {
		return err
	}

	*o = EventExternal(varEventExternal)

	return err
}

type NullableEventExternal struct {
	value *EventExternal
	isSet bool
}

func (v NullableEventExternal) Get() *EventExternal {
	return v.value
}

func (v *NullableEventExternal) Set(val *EventExternal) {
	v.value = val
	v.isSet = true
}

func (v NullableEventExternal) IsSet() bool {
	return v.isSet
}

func (v *NullableEventExternal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventExternal(val *EventExternal) *NullableEventExternal {
	return &NullableEventExternal{value: val, isSet: true}
}

func (v NullableEventExternal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventExternal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


