/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventRetriggerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRetriggerRequest{}

// EventRetriggerRequest struct for EventRetriggerRequest
type EventRetriggerRequest struct {
	// Unique id for the event which you would like to re-retigger.
	EventId string `json:"event_id"`
	SelectedWebhooks []string `json:"selected_webhooks,omitempty"`
}

type _EventRetriggerRequest EventRetriggerRequest

// NewEventRetriggerRequest instantiates a new EventRetriggerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRetriggerRequest(eventId string) *EventRetriggerRequest {
	this := EventRetriggerRequest{}
	this.EventId = eventId
	return &this
}

// NewEventRetriggerRequestWithDefaults instantiates a new EventRetriggerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRetriggerRequestWithDefaults() *EventRetriggerRequest {
	this := EventRetriggerRequest{}
	return &this
}

// GetEventId returns the EventId field value
func (o *EventRetriggerRequest) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *EventRetriggerRequest) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *EventRetriggerRequest) SetEventId(v string) {
	o.EventId = v
}

// GetSelectedWebhooks returns the SelectedWebhooks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventRetriggerRequest) GetSelectedWebhooks() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SelectedWebhooks
}

// GetSelectedWebhooksOk returns a tuple with the SelectedWebhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventRetriggerRequest) GetSelectedWebhooksOk() ([]string, bool) {
	if o == nil || IsNil(o.SelectedWebhooks) {
		return nil, false
	}
	return o.SelectedWebhooks, true
}

// HasSelectedWebhooks returns a boolean if a field has been set.
func (o *EventRetriggerRequest) HasSelectedWebhooks() bool {
	if o != nil && !IsNil(o.SelectedWebhooks) {
		return true
	}

	return false
}

// SetSelectedWebhooks gets a reference to the given []string and assigns it to the SelectedWebhooks field.
func (o *EventRetriggerRequest) SetSelectedWebhooks(v []string) {
	o.SelectedWebhooks = v
}

func (o EventRetriggerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRetriggerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	if o.SelectedWebhooks != nil {
		toSerialize["selected_webhooks"] = o.SelectedWebhooks
	}
	return toSerialize, nil
}

func (o *EventRetriggerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventRetriggerRequest := _EventRetriggerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventRetriggerRequest)

	if err != nil {
		return err
	}

	*o = EventRetriggerRequest(varEventRetriggerRequest)

	return err
}

type NullableEventRetriggerRequest struct {
	value *EventRetriggerRequest
	isSet bool
}

func (v NullableEventRetriggerRequest) Get() *EventRetriggerRequest {
	return v.value
}

func (v *NullableEventRetriggerRequest) Set(val *EventRetriggerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRetriggerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRetriggerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRetriggerRequest(val *EventRetriggerRequest) *NullableEventRetriggerRequest {
	return &NullableEventRetriggerRequest{value: val, isSet: true}
}

func (v NullableEventRetriggerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRetriggerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


