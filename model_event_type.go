/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// EventType the model 'EventType'
type EventType string

// List of EventType
const (
	EVENTTYPE_ALL EventType = "all"
	EVENTTYPE_ACCOUNT_CREATED EventType = "account.created"
	EVENTTYPE_ACCOUNT_UPDATED EventType = "account.updated"
	EVENTTYPE_ACCOUNT_DELETED EventType = "account.deleted"
	EVENTTYPE_API_TOKEN_CREATED EventType = "api_token.created"
	EVENTTYPE_API_TOKEN_UPDATED EventType = "api_token.updated"
	EVENTTYPE_API_TOKEN_DELETED EventType = "api_token.deleted"
	EVENTTYPE_CHARGE_CREATED EventType = "charge.created"
	EVENTTYPE_CHARGE_UPDATED EventType = "charge.updated"
	EVENTTYPE_CHARGE_DELETED EventType = "charge.deleted"
	EVENTTYPE_COUPON_CREATED EventType = "coupon.created"
	EVENTTYPE_COUPON_UPDATED EventType = "coupon.updated"
	EVENTTYPE_COUPON_DELETED EventType = "coupon.deleted"
	EVENTTYPE_CREDIT_NOTE_CREATED EventType = "credit_note.created"
	EVENTTYPE_CREDIT_NOTE_UPDATED EventType = "credit_note.updated"
	EVENTTYPE_CREDIT_NOTE_DELETED EventType = "credit_note.deleted"
	EVENTTYPE_CREDIT_NOTE_ITEM_CREATED EventType = "credit_note_item.created"
	EVENTTYPE_CREDIT_NOTE_ITEM_UPDATED EventType = "credit_note_item.updated"
	EVENTTYPE_CREDIT_NOTE_ITEM_DELETED EventType = "credit_note_item.deleted"
	EVENTTYPE_CUSTOMER_CREATED EventType = "customer.created"
	EVENTTYPE_CUSTOMER_UPDATED EventType = "customer.updated"
	EVENTTYPE_CUSTOMER_DELETED EventType = "customer.deleted"
	EVENTTYPE_CUSTOMER_BALANCE_TRANSACTION_CREATED EventType = "customer_balance_transaction.created"
	EVENTTYPE_CUSTOMER_BALANCE_TRANSACTION_UPDATED EventType = "customer_balance_transaction.updated"
	EVENTTYPE_CUSTOMER_BALANCE_TRANSACTION_DELETED EventType = "customer_balance_transaction.deleted"
	EVENTTYPE_DELIVERY_ATTEMPT_CREATED EventType = "delivery_attempt.created"
	EVENTTYPE_DELIVERY_ATTEMPT_UPDATED EventType = "delivery_attempt.updated"
	EVENTTYPE_DELIVERY_ATTEMPT_DELETED EventType = "delivery_attempt.deleted"
	EVENTTYPE_DISCOUNT_CREATED EventType = "discount.created"
	EVENTTYPE_DISCOUNT_UPDATED EventType = "discount.updated"
	EVENTTYPE_DISCOUNT_DELETED EventType = "discount.deleted"
	EVENTTYPE_EVENT_CREATED EventType = "event.created"
	EVENTTYPE_EVENT_UPDATED EventType = "event.updated"
	EVENTTYPE_EVENT_DELETED EventType = "event.deleted"
	EVENTTYPE_INVITE_CREATED EventType = "invite.created"
	EVENTTYPE_INVITE_UPDATED EventType = "invite.updated"
	EVENTTYPE_INVITE_DELETED EventType = "invite.deleted"
	EVENTTYPE_INVITE_ITEM_DISCOUNT_CREATED EventType = "invite_item_discount.created"
	EVENTTYPE_INVITE_ITEM_DISCOUNT_UPDATED EventType = "invite_item_discount.updated"
	EVENTTYPE_INVITE_ITEM_DISCOUNT_DELETED EventType = "invite_item_discount.deleted"
	EVENTTYPE_INVOICE_CREATED EventType = "invoice.created"
	EVENTTYPE_INVOICE_UPDATED EventType = "invoice.updated"
	EVENTTYPE_INVOICE_DELETED EventType = "invoice.deleted"
	EVENTTYPE_INVOICE_UPCOMING EventType = "invoice.upcoming"
	EVENTTYPE_INVOICE_DISCOUNT_CREATED EventType = "invoice_discount.created"
	EVENTTYPE_INVOICE_DISCOUNT_UPDATED EventType = "invoice_discount.updated"
	EVENTTYPE_INVOICE_DISCOUNT_DELETED EventType = "invoice_discount.deleted"
	EVENTTYPE_INVOICE_ITEM_CREATED EventType = "invoice_item.created"
	EVENTTYPE_INVOICE_ITEM_UPDATED EventType = "invoice_item.updated"
	EVENTTYPE_INVOICE_ITEM_DELETED EventType = "invoice_item.deleted"
	EVENTTYPE_PAYMENT_INTENT_CREATED EventType = "payment_intent.created"
	EVENTTYPE_PAYMENT_INTENT_UPDATED EventType = "payment_intent.updated"
	EVENTTYPE_PAYMENT_INTENT_DELETED EventType = "payment_intent.deleted"
	EVENTTYPE_PAYMENT_METHOD_CREATED EventType = "payment_method.created"
	EVENTTYPE_PAYMENT_METHOD_UPDATED EventType = "payment_method.updated"
	EVENTTYPE_PAYMENT_METHOD_DELETED EventType = "payment_method.deleted"
	EVENTTYPE_PAYMENT_PROCESSOR_CREATED EventType = "payment_processor.created"
	EVENTTYPE_PAYMENT_PROCESSOR_UPDATED EventType = "payment_processor.updated"
	EVENTTYPE_PAYMENT_PROCESSOR_DELETED EventType = "payment_processor.deleted"
	EVENTTYPE_PRICE_CREATED EventType = "price.created"
	EVENTTYPE_PRICE_UPDATED EventType = "price.updated"
	EVENTTYPE_PRICE_DELETED EventType = "price.deleted"
	EVENTTYPE_PRICE_TIER_CREATED EventType = "price_tier.created"
	EVENTTYPE_PRICE_TIER_UPDATED EventType = "price_tier.updated"
	EVENTTYPE_PRICE_TIER_DELETED EventType = "price_tier.deleted"
	EVENTTYPE_PRODUCT_CREATED EventType = "product.created"
	EVENTTYPE_PRODUCT_UPDATED EventType = "product.updated"
	EVENTTYPE_PRODUCT_DELETED EventType = "product.deleted"
	EVENTTYPE_PROMOTION_CODE_CREATED EventType = "promotion_code.created"
	EVENTTYPE_PROMOTION_CODE_UPDATED EventType = "promotion_code.updated"
	EVENTTYPE_PROMOTION_CODE_DELETED EventType = "promotion_code.deleted"
	EVENTTYPE_REFUND_CREATED EventType = "refund.created"
	EVENTTYPE_REFUND_UPDATED EventType = "refund.updated"
	EVENTTYPE_REFUND_DELETED EventType = "refund.deleted"
	EVENTTYPE_CUSTOMER_SUBSCRIPTION_CREATED EventType = "customer.subscription.created"
	EVENTTYPE_CUSTOMER_SUBSCRIPTION_UPDATED EventType = "customer.subscription.updated"
	EVENTTYPE_CUSTOMER_SUBSCRIPTION_DELETED EventType = "customer.subscription.deleted"
	EVENTTYPE_CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END EventType = "customer.subscription.trial_will_end"
	EVENTTYPE_SUBSCRIPTION_ITEM_CREATED EventType = "subscription_item.created"
	EVENTTYPE_SUBSCRIPTION_ITEM_UPDATED EventType = "subscription_item.updated"
	EVENTTYPE_SUBSCRIPTION_ITEM_DELETED EventType = "subscription_item.deleted"
	EVENTTYPE_USER_CREATED EventType = "user.created"
	EVENTTYPE_USER_UPDATED EventType = "user.updated"
	EVENTTYPE_USER_DELETED EventType = "user.deleted"
	EVENTTYPE_USER_LOGIN_CREATED EventType = "user_login.created"
	EVENTTYPE_USER_LOGIN_UPDATED EventType = "user_login.updated"
	EVENTTYPE_USER_LOGIN_DELETED EventType = "user_login.deleted"
	EVENTTYPE_USER_RECORD_CREATED EventType = "user_record.created"
	EVENTTYPE_USER_RECORD_UPDATED EventType = "user_record.updated"
	EVENTTYPE_USER_RECORD_DELETED EventType = "user_record.deleted"
	EVENTTYPE_USER_RECORD_SUMMARY_CREATED EventType = "user_record_summary.created"
	EVENTTYPE_USER_RECORD_SUMMARY_UPDATED EventType = "user_record_summary.updated"
	EVENTTYPE_USER_RECORD_SUMMARY_DELETED EventType = "user_record_summary.deleted"
	EVENTTYPE_WEBHOOK_ENDPOINT_CREATED EventType = "webhook_endpoint.created"
	EVENTTYPE_WEBHOOK_ENDPOINT_UPDATED EventType = "webhook_endpoint.updated"
	EVENTTYPE_WEBHOOK_ENDPOINT_DELETED EventType = "webhook_endpoint.deleted"
)

// All allowed values of EventType enum
var AllowedEventTypeEnumValues = []EventType{
	"all",
	"account.created",
	"account.updated",
	"account.deleted",
	"api_token.created",
	"api_token.updated",
	"api_token.deleted",
	"charge.created",
	"charge.updated",
	"charge.deleted",
	"coupon.created",
	"coupon.updated",
	"coupon.deleted",
	"credit_note.created",
	"credit_note.updated",
	"credit_note.deleted",
	"credit_note_item.created",
	"credit_note_item.updated",
	"credit_note_item.deleted",
	"customer.created",
	"customer.updated",
	"customer.deleted",
	"customer_balance_transaction.created",
	"customer_balance_transaction.updated",
	"customer_balance_transaction.deleted",
	"delivery_attempt.created",
	"delivery_attempt.updated",
	"delivery_attempt.deleted",
	"discount.created",
	"discount.updated",
	"discount.deleted",
	"event.created",
	"event.updated",
	"event.deleted",
	"invite.created",
	"invite.updated",
	"invite.deleted",
	"invite_item_discount.created",
	"invite_item_discount.updated",
	"invite_item_discount.deleted",
	"invoice.created",
	"invoice.updated",
	"invoice.deleted",
	"invoice.upcoming",
	"invoice_discount.created",
	"invoice_discount.updated",
	"invoice_discount.deleted",
	"invoice_item.created",
	"invoice_item.updated",
	"invoice_item.deleted",
	"payment_intent.created",
	"payment_intent.updated",
	"payment_intent.deleted",
	"payment_method.created",
	"payment_method.updated",
	"payment_method.deleted",
	"payment_processor.created",
	"payment_processor.updated",
	"payment_processor.deleted",
	"price.created",
	"price.updated",
	"price.deleted",
	"price_tier.created",
	"price_tier.updated",
	"price_tier.deleted",
	"product.created",
	"product.updated",
	"product.deleted",
	"promotion_code.created",
	"promotion_code.updated",
	"promotion_code.deleted",
	"refund.created",
	"refund.updated",
	"refund.deleted",
	"customer.subscription.created",
	"customer.subscription.updated",
	"customer.subscription.deleted",
	"customer.subscription.trial_will_end",
	"subscription_item.created",
	"subscription_item.updated",
	"subscription_item.deleted",
	"user.created",
	"user.updated",
	"user.deleted",
	"user_login.created",
	"user_login.updated",
	"user_login.deleted",
	"user_record.created",
	"user_record.updated",
	"user_record.deleted",
	"user_record_summary.created",
	"user_record_summary.updated",
	"user_record_summary.deleted",
	"webhook_endpoint.created",
	"webhook_endpoint.updated",
	"webhook_endpoint.deleted",
}

func (v *EventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventType(value)
	for _, existing := range AllowedEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventType", value)
}

// NewEventTypeFromValue returns a pointer to a valid EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeFromValue(v string) (*EventType, error) {
	ev := EventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventType: valid values are %v", v, AllowedEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventType) IsValid() bool {
	for _, existing := range AllowedEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EventType value
func (v EventType) Ptr() *EventType {
	return &v
}

type NullableEventType struct {
	value *EventType
	isSet bool
}

func (v NullableEventType) Get() *EventType {
	return v.value
}

func (v *NullableEventType) Set(val *EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventType(val *EventType) *NullableEventType {
	return &NullableEventType{value: val, isSet: true}
}

func (v NullableEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

