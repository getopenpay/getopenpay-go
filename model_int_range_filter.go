/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the IntRangeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntRangeFilter{}

// IntRangeFilter struct for IntRangeFilter
type IntRangeFilter struct {
	Eq NullableInt32 `json:"eq,omitempty"`
	Lt NullableInt32 `json:"lt,omitempty"`
	Lte NullableInt32 `json:"lte,omitempty"`
	Gt NullableInt32 `json:"gt,omitempty"`
	Gte NullableInt32 `json:"gte,omitempty"`
}

// NewIntRangeFilter instantiates a new IntRangeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntRangeFilter() *IntRangeFilter {
	this := IntRangeFilter{}
	return &this
}

// NewIntRangeFilterWithDefaults instantiates a new IntRangeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntRangeFilterWithDefaults() *IntRangeFilter {
	this := IntRangeFilter{}
	return &this
}

// GetEq returns the Eq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntRangeFilter) GetEq() int32 {
	if o == nil || IsNil(o.Eq.Get()) {
		var ret int32
		return ret
	}
	return *o.Eq.Get()
}

// GetEqOk returns a tuple with the Eq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntRangeFilter) GetEqOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Eq.Get(), o.Eq.IsSet()
}

// HasEq returns a boolean if a field has been set.
func (o *IntRangeFilter) HasEq() bool {
	if o != nil && o.Eq.IsSet() {
		return true
	}

	return false
}

// SetEq gets a reference to the given NullableInt32 and assigns it to the Eq field.
func (o *IntRangeFilter) SetEq(v int32) {
	o.Eq.Set(&v)
}
// SetEqNil sets the value for Eq to be an explicit nil
func (o *IntRangeFilter) SetEqNil() {
	o.Eq.Set(nil)
}

// UnsetEq ensures that no value is present for Eq, not even an explicit nil
func (o *IntRangeFilter) UnsetEq() {
	o.Eq.Unset()
}

// GetLt returns the Lt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntRangeFilter) GetLt() int32 {
	if o == nil || IsNil(o.Lt.Get()) {
		var ret int32
		return ret
	}
	return *o.Lt.Get()
}

// GetLtOk returns a tuple with the Lt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntRangeFilter) GetLtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lt.Get(), o.Lt.IsSet()
}

// HasLt returns a boolean if a field has been set.
func (o *IntRangeFilter) HasLt() bool {
	if o != nil && o.Lt.IsSet() {
		return true
	}

	return false
}

// SetLt gets a reference to the given NullableInt32 and assigns it to the Lt field.
func (o *IntRangeFilter) SetLt(v int32) {
	o.Lt.Set(&v)
}
// SetLtNil sets the value for Lt to be an explicit nil
func (o *IntRangeFilter) SetLtNil() {
	o.Lt.Set(nil)
}

// UnsetLt ensures that no value is present for Lt, not even an explicit nil
func (o *IntRangeFilter) UnsetLt() {
	o.Lt.Unset()
}

// GetLte returns the Lte field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntRangeFilter) GetLte() int32 {
	if o == nil || IsNil(o.Lte.Get()) {
		var ret int32
		return ret
	}
	return *o.Lte.Get()
}

// GetLteOk returns a tuple with the Lte field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntRangeFilter) GetLteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lte.Get(), o.Lte.IsSet()
}

// HasLte returns a boolean if a field has been set.
func (o *IntRangeFilter) HasLte() bool {
	if o != nil && o.Lte.IsSet() {
		return true
	}

	return false
}

// SetLte gets a reference to the given NullableInt32 and assigns it to the Lte field.
func (o *IntRangeFilter) SetLte(v int32) {
	o.Lte.Set(&v)
}
// SetLteNil sets the value for Lte to be an explicit nil
func (o *IntRangeFilter) SetLteNil() {
	o.Lte.Set(nil)
}

// UnsetLte ensures that no value is present for Lte, not even an explicit nil
func (o *IntRangeFilter) UnsetLte() {
	o.Lte.Unset()
}

// GetGt returns the Gt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntRangeFilter) GetGt() int32 {
	if o == nil || IsNil(o.Gt.Get()) {
		var ret int32
		return ret
	}
	return *o.Gt.Get()
}

// GetGtOk returns a tuple with the Gt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntRangeFilter) GetGtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gt.Get(), o.Gt.IsSet()
}

// HasGt returns a boolean if a field has been set.
func (o *IntRangeFilter) HasGt() bool {
	if o != nil && o.Gt.IsSet() {
		return true
	}

	return false
}

// SetGt gets a reference to the given NullableInt32 and assigns it to the Gt field.
func (o *IntRangeFilter) SetGt(v int32) {
	o.Gt.Set(&v)
}
// SetGtNil sets the value for Gt to be an explicit nil
func (o *IntRangeFilter) SetGtNil() {
	o.Gt.Set(nil)
}

// UnsetGt ensures that no value is present for Gt, not even an explicit nil
func (o *IntRangeFilter) UnsetGt() {
	o.Gt.Unset()
}

// GetGte returns the Gte field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntRangeFilter) GetGte() int32 {
	if o == nil || IsNil(o.Gte.Get()) {
		var ret int32
		return ret
	}
	return *o.Gte.Get()
}

// GetGteOk returns a tuple with the Gte field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntRangeFilter) GetGteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gte.Get(), o.Gte.IsSet()
}

// HasGte returns a boolean if a field has been set.
func (o *IntRangeFilter) HasGte() bool {
	if o != nil && o.Gte.IsSet() {
		return true
	}

	return false
}

// SetGte gets a reference to the given NullableInt32 and assigns it to the Gte field.
func (o *IntRangeFilter) SetGte(v int32) {
	o.Gte.Set(&v)
}
// SetGteNil sets the value for Gte to be an explicit nil
func (o *IntRangeFilter) SetGteNil() {
	o.Gte.Set(nil)
}

// UnsetGte ensures that no value is present for Gte, not even an explicit nil
func (o *IntRangeFilter) UnsetGte() {
	o.Gte.Unset()
}

func (o IntRangeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntRangeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Eq.IsSet() {
		toSerialize["eq"] = o.Eq.Get()
	}
	if o.Lt.IsSet() {
		toSerialize["lt"] = o.Lt.Get()
	}
	if o.Lte.IsSet() {
		toSerialize["lte"] = o.Lte.Get()
	}
	if o.Gt.IsSet() {
		toSerialize["gt"] = o.Gt.Get()
	}
	if o.Gte.IsSet() {
		toSerialize["gte"] = o.Gte.Get()
	}
	return toSerialize, nil
}

type NullableIntRangeFilter struct {
	value *IntRangeFilter
	isSet bool
}

func (v NullableIntRangeFilter) Get() *IntRangeFilter {
	return v.value
}

func (v *NullableIntRangeFilter) Set(val *IntRangeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIntRangeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIntRangeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntRangeFilter(val *IntRangeFilter) *NullableIntRangeFilter {
	return &NullableIntRangeFilter{value: val, isSet: true}
}

func (v NullableIntRangeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntRangeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


