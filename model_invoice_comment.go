/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the InvoiceComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceComment{}

// InvoiceComment struct for InvoiceComment
type InvoiceComment struct {
	// Status update.
	Comment string `json:"comment"`
	// Creation date of the comment.
	CreatedAt time.Time `json:"created_at"`
	UserEmail NullableString `json:"user_email"`
	AdditionalProperties map[string]interface{}
}

type _InvoiceComment InvoiceComment

// NewInvoiceComment instantiates a new InvoiceComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceComment(comment string, createdAt time.Time, userEmail NullableString) *InvoiceComment {
	this := InvoiceComment{}
	this.Comment = comment
	this.CreatedAt = createdAt
	this.UserEmail = userEmail
	return &this
}

// NewInvoiceCommentWithDefaults instantiates a new InvoiceComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceCommentWithDefaults() *InvoiceComment {
	this := InvoiceComment{}
	return &this
}

// GetComment returns the Comment field value
func (o *InvoiceComment) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *InvoiceComment) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *InvoiceComment) SetComment(v string) {
	o.Comment = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *InvoiceComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InvoiceComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InvoiceComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUserEmail returns the UserEmail field value
// If the value is explicit nil, the zero value for string will be returned
func (o *InvoiceComment) GetUserEmail() string {
	if o == nil || o.UserEmail.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserEmail.Get()
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceComment) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserEmail.Get(), o.UserEmail.IsSet()
}

// SetUserEmail sets field value
func (o *InvoiceComment) SetUserEmail(v string) {
	o.UserEmail.Set(&v)
}

func (o InvoiceComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["user_email"] = o.UserEmail.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InvoiceComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
		"created_at",
		"user_email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoiceComment := _InvoiceComment{}

	err = json.Unmarshal(data, &varInvoiceComment)

	if err != nil {
		return err
	}

	*o = InvoiceComment(varInvoiceComment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "user_email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvoiceComment struct {
	value *InvoiceComment
	isSet bool
}

func (v NullableInvoiceComment) Get() *InvoiceComment {
	return v.value
}

func (v *NullableInvoiceComment) Set(val *InvoiceComment) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceComment) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceComment(val *InvoiceComment) *NullableInvoiceComment {
	return &NullableInvoiceComment{value: val, isSet: true}
}

func (v NullableInvoiceComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


