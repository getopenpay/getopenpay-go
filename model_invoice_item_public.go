/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the InvoiceItemPublic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceItemPublic{}

// InvoiceItemPublic struct for InvoiceItemPublic
type InvoiceItemPublic struct {
	// Total amount of invoice_item in atomic units (in USD this is cents).
	AmountAtom int32 `json:"amount_atom"`
	// Total amount of invoice_item in atomic units considering discounts
	AmountAtomConsideringDiscountApplied int32 `json:"amount_atom_considering_discount_applied"`
	// Three-letter ISO currency code, in lowercase.
	Currency CurrencyEnum `json:"currency"`
	// The amount_atom of all discount.
	DiscountAmountAtoms []InvoiceItemDiscountAmountsPublic `json:"discount_amount_atoms"`
	// The discounts only directly applied to the InvoiceItem.
	Discounts []string `json:"discounts"`
	InvoiceItemDescription NullableString `json:"invoice_item_description"`
	// The name of the line item as it appears in the invoice.
	Name string `json:"name"`
	// End of the usage period of the invoice_item. It is in 'ISO 8601' format.
	PeriodEnd time.Time `json:"period_end"`
	// The price tiers of the product, if applicable.
	PriceTiers []PriceTierPublic `json:"price_tiers,omitempty"`
	// Quantity of the line item.
	Quantity int32 `json:"quantity"`
	SubscriptionItemDescription NullableString `json:"subscription_item_description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvoiceItemPublic InvoiceItemPublic

// NewInvoiceItemPublic instantiates a new InvoiceItemPublic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceItemPublic(amountAtom int32, amountAtomConsideringDiscountApplied int32, currency CurrencyEnum, discountAmountAtoms []InvoiceItemDiscountAmountsPublic, discounts []string, invoiceItemDescription NullableString, name string, periodEnd time.Time, quantity int32) *InvoiceItemPublic {
	this := InvoiceItemPublic{}
	this.AmountAtom = amountAtom
	this.AmountAtomConsideringDiscountApplied = amountAtomConsideringDiscountApplied
	this.Currency = currency
	this.DiscountAmountAtoms = discountAmountAtoms
	this.Discounts = discounts
	this.InvoiceItemDescription = invoiceItemDescription
	this.Name = name
	this.PeriodEnd = periodEnd
	this.Quantity = quantity
	return &this
}

// NewInvoiceItemPublicWithDefaults instantiates a new InvoiceItemPublic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceItemPublicWithDefaults() *InvoiceItemPublic {
	this := InvoiceItemPublic{}
	return &this
}

// GetAmountAtom returns the AmountAtom field value
func (o *InvoiceItemPublic) GetAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountAtom
}

// GetAmountAtomOk returns a tuple with the AmountAtom field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountAtom, true
}

// SetAmountAtom sets field value
func (o *InvoiceItemPublic) SetAmountAtom(v int32) {
	o.AmountAtom = v
}

// GetAmountAtomConsideringDiscountApplied returns the AmountAtomConsideringDiscountApplied field value
func (o *InvoiceItemPublic) GetAmountAtomConsideringDiscountApplied() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountAtomConsideringDiscountApplied
}

// GetAmountAtomConsideringDiscountAppliedOk returns a tuple with the AmountAtomConsideringDiscountApplied field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetAmountAtomConsideringDiscountAppliedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountAtomConsideringDiscountApplied, true
}

// SetAmountAtomConsideringDiscountApplied sets field value
func (o *InvoiceItemPublic) SetAmountAtomConsideringDiscountApplied(v int32) {
	o.AmountAtomConsideringDiscountApplied = v
}

// GetCurrency returns the Currency field value
func (o *InvoiceItemPublic) GetCurrency() CurrencyEnum {
	if o == nil {
		var ret CurrencyEnum
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InvoiceItemPublic) SetCurrency(v CurrencyEnum) {
	o.Currency = v
}

// GetDiscountAmountAtoms returns the DiscountAmountAtoms field value
func (o *InvoiceItemPublic) GetDiscountAmountAtoms() []InvoiceItemDiscountAmountsPublic {
	if o == nil {
		var ret []InvoiceItemDiscountAmountsPublic
		return ret
	}

	return o.DiscountAmountAtoms
}

// GetDiscountAmountAtomsOk returns a tuple with the DiscountAmountAtoms field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetDiscountAmountAtomsOk() ([]InvoiceItemDiscountAmountsPublic, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountAmountAtoms, true
}

// SetDiscountAmountAtoms sets field value
func (o *InvoiceItemPublic) SetDiscountAmountAtoms(v []InvoiceItemDiscountAmountsPublic) {
	o.DiscountAmountAtoms = v
}

// GetDiscounts returns the Discounts field value
func (o *InvoiceItemPublic) GetDiscounts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetDiscountsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Discounts, true
}

// SetDiscounts sets field value
func (o *InvoiceItemPublic) SetDiscounts(v []string) {
	o.Discounts = v
}

// GetInvoiceItemDescription returns the InvoiceItemDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *InvoiceItemPublic) GetInvoiceItemDescription() string {
	if o == nil || o.InvoiceItemDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.InvoiceItemDescription.Get()
}

// GetInvoiceItemDescriptionOk returns a tuple with the InvoiceItemDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceItemPublic) GetInvoiceItemDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceItemDescription.Get(), o.InvoiceItemDescription.IsSet()
}

// SetInvoiceItemDescription sets field value
func (o *InvoiceItemPublic) SetInvoiceItemDescription(v string) {
	o.InvoiceItemDescription.Set(&v)
}

// GetName returns the Name field value
func (o *InvoiceItemPublic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InvoiceItemPublic) SetName(v string) {
	o.Name = v
}

// GetPeriodEnd returns the PeriodEnd field value
func (o *InvoiceItemPublic) GetPeriodEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetPeriodEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodEnd, true
}

// SetPeriodEnd sets field value
func (o *InvoiceItemPublic) SetPeriodEnd(v time.Time) {
	o.PeriodEnd = v
}

// GetPriceTiers returns the PriceTiers field value if set, zero value otherwise.
func (o *InvoiceItemPublic) GetPriceTiers() []PriceTierPublic {
	if o == nil || IsNil(o.PriceTiers) {
		var ret []PriceTierPublic
		return ret
	}
	return o.PriceTiers
}

// GetPriceTiersOk returns a tuple with the PriceTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetPriceTiersOk() ([]PriceTierPublic, bool) {
	if o == nil || IsNil(o.PriceTiers) {
		return nil, false
	}
	return o.PriceTiers, true
}

// HasPriceTiers returns a boolean if a field has been set.
func (o *InvoiceItemPublic) HasPriceTiers() bool {
	if o != nil && !IsNil(o.PriceTiers) {
		return true
	}

	return false
}

// SetPriceTiers gets a reference to the given []PriceTierPublic and assigns it to the PriceTiers field.
func (o *InvoiceItemPublic) SetPriceTiers(v []PriceTierPublic) {
	o.PriceTiers = v
}

// GetQuantity returns the Quantity field value
func (o *InvoiceItemPublic) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *InvoiceItemPublic) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *InvoiceItemPublic) SetQuantity(v int32) {
	o.Quantity = v
}

// GetSubscriptionItemDescription returns the SubscriptionItemDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceItemPublic) GetSubscriptionItemDescription() string {
	if o == nil || IsNil(o.SubscriptionItemDescription.Get()) {
		var ret string
		return ret
	}
	return *o.SubscriptionItemDescription.Get()
}

// GetSubscriptionItemDescriptionOk returns a tuple with the SubscriptionItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceItemPublic) GetSubscriptionItemDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionItemDescription.Get(), o.SubscriptionItemDescription.IsSet()
}

// HasSubscriptionItemDescription returns a boolean if a field has been set.
func (o *InvoiceItemPublic) HasSubscriptionItemDescription() bool {
	if o != nil && o.SubscriptionItemDescription.IsSet() {
		return true
	}

	return false
}

// SetSubscriptionItemDescription gets a reference to the given NullableString and assigns it to the SubscriptionItemDescription field.
func (o *InvoiceItemPublic) SetSubscriptionItemDescription(v string) {
	o.SubscriptionItemDescription.Set(&v)
}
// SetSubscriptionItemDescriptionNil sets the value for SubscriptionItemDescription to be an explicit nil
func (o *InvoiceItemPublic) SetSubscriptionItemDescriptionNil() {
	o.SubscriptionItemDescription.Set(nil)
}

// UnsetSubscriptionItemDescription ensures that no value is present for SubscriptionItemDescription, not even an explicit nil
func (o *InvoiceItemPublic) UnsetSubscriptionItemDescription() {
	o.SubscriptionItemDescription.Unset()
}

func (o InvoiceItemPublic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceItemPublic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount_atom"] = o.AmountAtom
	toSerialize["amount_atom_considering_discount_applied"] = o.AmountAtomConsideringDiscountApplied
	toSerialize["currency"] = o.Currency
	toSerialize["discount_amount_atoms"] = o.DiscountAmountAtoms
	toSerialize["discounts"] = o.Discounts
	toSerialize["invoice_item_description"] = o.InvoiceItemDescription.Get()
	toSerialize["name"] = o.Name
	toSerialize["period_end"] = o.PeriodEnd
	if !IsNil(o.PriceTiers) {
		toSerialize["price_tiers"] = o.PriceTiers
	}
	toSerialize["quantity"] = o.Quantity
	if o.SubscriptionItemDescription.IsSet() {
		toSerialize["subscription_item_description"] = o.SubscriptionItemDescription.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InvoiceItemPublic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount_atom",
		"amount_atom_considering_discount_applied",
		"currency",
		"discount_amount_atoms",
		"discounts",
		"invoice_item_description",
		"name",
		"period_end",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoiceItemPublic := _InvoiceItemPublic{}

	err = json.Unmarshal(data, &varInvoiceItemPublic)

	if err != nil {
		return err
	}

	*o = InvoiceItemPublic(varInvoiceItemPublic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount_atom")
		delete(additionalProperties, "amount_atom_considering_discount_applied")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "discount_amount_atoms")
		delete(additionalProperties, "discounts")
		delete(additionalProperties, "invoice_item_description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "period_end")
		delete(additionalProperties, "price_tiers")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "subscription_item_description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvoiceItemPublic struct {
	value *InvoiceItemPublic
	isSet bool
}

func (v NullableInvoiceItemPublic) Get() *InvoiceItemPublic {
	return v.value
}

func (v *NullableInvoiceItemPublic) Set(val *InvoiceItemPublic) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceItemPublic) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceItemPublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceItemPublic(val *InvoiceItemPublic) *NullableInvoiceItemPublic {
	return &NullableInvoiceItemPublic{value: val, isSet: true}
}

func (v NullableInvoiceItemPublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceItemPublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


