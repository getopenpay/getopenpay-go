/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the InvoicePublic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoicePublic{}

// InvoicePublic struct for InvoicePublic
type InvoicePublic struct {
	// Unique identifier of the invoice.
	Id string `json:"id"`
	PaidAt NullableTime `json:"paid_at,omitempty"`
	// DateTime at which the object was created, in 'ISO 8601' format.
	CreatedAt time.Time `json:"created_at"`
	Currency CurrencyEnum `json:"currency"`
	// Total amount paid. It is in atomic units (in USD this is cents).
	PaidAmountAtom int32 `json:"paid_amount_atom"`
	// Total tax amount in atomic units.
	TaxAmountAtom int32 `json:"tax_amount_atom"`
	// Remaining amount of the invoice to be paid. It is in atomic units (in USD this is cents).
	RemainingAmountAtom int32 `json:"remaining_amount_atom"`
	TotalDiscountAmountAtoms []InvoiceDiscountAmountsExternal `json:"total_discount_amount_atoms,omitempty"`
	BilledTo NullableString `json:"billed_to,omitempty"`
	BillingAddress NullableString `json:"billing_address,omitempty"`
	CardType NullableString `json:"card_type,omitempty"`
	LastFour NullableString `json:"last_four,omitempty"`
	Lines []InvoiceItemPublic `json:"lines,omitempty"`
	// The branding settings associated with the account
	Branding map[string]interface{} `json:"branding"`
	// The URL for the Invoice PDF
	InvoicePdfUrl string `json:"invoice_pdf_url"`
	// The URL for the Receipt PDF
	ReceiptPdfUrl string `json:"receipt_pdf_url"`
	// Whether this is the first invoice for a trial subscription.
	IsInitialInvoiceForTrialSub bool `json:"is_initial_invoice_for_trial_sub"`
	TrialStartForSub NullableTime `json:"trial_start_for_sub"`
	TrialEndForSub NullableTime `json:"trial_end_for_sub"`
	Status InvoiceStatusEnum `json:"status"`
	// Final amount due at this time for this invoice. It isin atomic units (in USD this is cents).
	DueAmountAtom int32 `json:"due_amount_atom"`
	DueDate NullableTime `json:"due_date,omitempty"`
}

type _InvoicePublic InvoicePublic

// NewInvoicePublic instantiates a new InvoicePublic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoicePublic(id string, createdAt time.Time, currency CurrencyEnum, paidAmountAtom int32, taxAmountAtom int32, remainingAmountAtom int32, branding map[string]interface{}, invoicePdfUrl string, receiptPdfUrl string, isInitialInvoiceForTrialSub bool, trialStartForSub NullableTime, trialEndForSub NullableTime, status InvoiceStatusEnum, dueAmountAtom int32) *InvoicePublic {
	this := InvoicePublic{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Currency = currency
	this.PaidAmountAtom = paidAmountAtom
	this.TaxAmountAtom = taxAmountAtom
	this.RemainingAmountAtom = remainingAmountAtom
	this.Branding = branding
	this.InvoicePdfUrl = invoicePdfUrl
	this.ReceiptPdfUrl = receiptPdfUrl
	this.IsInitialInvoiceForTrialSub = isInitialInvoiceForTrialSub
	this.TrialStartForSub = trialStartForSub
	this.TrialEndForSub = trialEndForSub
	this.Status = status
	this.DueAmountAtom = dueAmountAtom
	return &this
}

// NewInvoicePublicWithDefaults instantiates a new InvoicePublic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicePublicWithDefaults() *InvoicePublic {
	this := InvoicePublic{}
	return &this
}

// GetId returns the Id field value
func (o *InvoicePublic) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InvoicePublic) SetId(v string) {
	o.Id = v
}

// GetPaidAt returns the PaidAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetPaidAt() time.Time {
	if o == nil || IsNil(o.PaidAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PaidAt.Get()
}

// GetPaidAtOk returns a tuple with the PaidAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetPaidAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaidAt.Get(), o.PaidAt.IsSet()
}

// HasPaidAt returns a boolean if a field has been set.
func (o *InvoicePublic) HasPaidAt() bool {
	if o != nil && o.PaidAt.IsSet() {
		return true
	}

	return false
}

// SetPaidAt gets a reference to the given NullableTime and assigns it to the PaidAt field.
func (o *InvoicePublic) SetPaidAt(v time.Time) {
	o.PaidAt.Set(&v)
}
// SetPaidAtNil sets the value for PaidAt to be an explicit nil
func (o *InvoicePublic) SetPaidAtNil() {
	o.PaidAt.Set(nil)
}

// UnsetPaidAt ensures that no value is present for PaidAt, not even an explicit nil
func (o *InvoicePublic) UnsetPaidAt() {
	o.PaidAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *InvoicePublic) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *InvoicePublic) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCurrency returns the Currency field value
func (o *InvoicePublic) GetCurrency() CurrencyEnum {
	if o == nil {
		var ret CurrencyEnum
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InvoicePublic) SetCurrency(v CurrencyEnum) {
	o.Currency = v
}

// GetPaidAmountAtom returns the PaidAmountAtom field value
func (o *InvoicePublic) GetPaidAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PaidAmountAtom
}

// GetPaidAmountAtomOk returns a tuple with the PaidAmountAtom field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetPaidAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaidAmountAtom, true
}

// SetPaidAmountAtom sets field value
func (o *InvoicePublic) SetPaidAmountAtom(v int32) {
	o.PaidAmountAtom = v
}

// GetTaxAmountAtom returns the TaxAmountAtom field value
func (o *InvoicePublic) GetTaxAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaxAmountAtom
}

// GetTaxAmountAtomOk returns a tuple with the TaxAmountAtom field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetTaxAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxAmountAtom, true
}

// SetTaxAmountAtom sets field value
func (o *InvoicePublic) SetTaxAmountAtom(v int32) {
	o.TaxAmountAtom = v
}

// GetRemainingAmountAtom returns the RemainingAmountAtom field value
func (o *InvoicePublic) GetRemainingAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemainingAmountAtom
}

// GetRemainingAmountAtomOk returns a tuple with the RemainingAmountAtom field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetRemainingAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingAmountAtom, true
}

// SetRemainingAmountAtom sets field value
func (o *InvoicePublic) SetRemainingAmountAtom(v int32) {
	o.RemainingAmountAtom = v
}

// GetTotalDiscountAmountAtoms returns the TotalDiscountAmountAtoms field value if set, zero value otherwise.
func (o *InvoicePublic) GetTotalDiscountAmountAtoms() []InvoiceDiscountAmountsExternal {
	if o == nil || IsNil(o.TotalDiscountAmountAtoms) {
		var ret []InvoiceDiscountAmountsExternal
		return ret
	}
	return o.TotalDiscountAmountAtoms
}

// GetTotalDiscountAmountAtomsOk returns a tuple with the TotalDiscountAmountAtoms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetTotalDiscountAmountAtomsOk() ([]InvoiceDiscountAmountsExternal, bool) {
	if o == nil || IsNil(o.TotalDiscountAmountAtoms) {
		return nil, false
	}
	return o.TotalDiscountAmountAtoms, true
}

// HasTotalDiscountAmountAtoms returns a boolean if a field has been set.
func (o *InvoicePublic) HasTotalDiscountAmountAtoms() bool {
	if o != nil && !IsNil(o.TotalDiscountAmountAtoms) {
		return true
	}

	return false
}

// SetTotalDiscountAmountAtoms gets a reference to the given []InvoiceDiscountAmountsExternal and assigns it to the TotalDiscountAmountAtoms field.
func (o *InvoicePublic) SetTotalDiscountAmountAtoms(v []InvoiceDiscountAmountsExternal) {
	o.TotalDiscountAmountAtoms = v
}

// GetBilledTo returns the BilledTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetBilledTo() string {
	if o == nil || IsNil(o.BilledTo.Get()) {
		var ret string
		return ret
	}
	return *o.BilledTo.Get()
}

// GetBilledToOk returns a tuple with the BilledTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetBilledToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BilledTo.Get(), o.BilledTo.IsSet()
}

// HasBilledTo returns a boolean if a field has been set.
func (o *InvoicePublic) HasBilledTo() bool {
	if o != nil && o.BilledTo.IsSet() {
		return true
	}

	return false
}

// SetBilledTo gets a reference to the given NullableString and assigns it to the BilledTo field.
func (o *InvoicePublic) SetBilledTo(v string) {
	o.BilledTo.Set(&v)
}
// SetBilledToNil sets the value for BilledTo to be an explicit nil
func (o *InvoicePublic) SetBilledToNil() {
	o.BilledTo.Set(nil)
}

// UnsetBilledTo ensures that no value is present for BilledTo, not even an explicit nil
func (o *InvoicePublic) UnsetBilledTo() {
	o.BilledTo.Unset()
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetBillingAddress() string {
	if o == nil || IsNil(o.BillingAddress.Get()) {
		var ret string
		return ret
	}
	return *o.BillingAddress.Get()
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetBillingAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingAddress.Get(), o.BillingAddress.IsSet()
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *InvoicePublic) HasBillingAddress() bool {
	if o != nil && o.BillingAddress.IsSet() {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given NullableString and assigns it to the BillingAddress field.
func (o *InvoicePublic) SetBillingAddress(v string) {
	o.BillingAddress.Set(&v)
}
// SetBillingAddressNil sets the value for BillingAddress to be an explicit nil
func (o *InvoicePublic) SetBillingAddressNil() {
	o.BillingAddress.Set(nil)
}

// UnsetBillingAddress ensures that no value is present for BillingAddress, not even an explicit nil
func (o *InvoicePublic) UnsetBillingAddress() {
	o.BillingAddress.Unset()
}

// GetCardType returns the CardType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetCardType() string {
	if o == nil || IsNil(o.CardType.Get()) {
		var ret string
		return ret
	}
	return *o.CardType.Get()
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetCardTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardType.Get(), o.CardType.IsSet()
}

// HasCardType returns a boolean if a field has been set.
func (o *InvoicePublic) HasCardType() bool {
	if o != nil && o.CardType.IsSet() {
		return true
	}

	return false
}

// SetCardType gets a reference to the given NullableString and assigns it to the CardType field.
func (o *InvoicePublic) SetCardType(v string) {
	o.CardType.Set(&v)
}
// SetCardTypeNil sets the value for CardType to be an explicit nil
func (o *InvoicePublic) SetCardTypeNil() {
	o.CardType.Set(nil)
}

// UnsetCardType ensures that no value is present for CardType, not even an explicit nil
func (o *InvoicePublic) UnsetCardType() {
	o.CardType.Unset()
}

// GetLastFour returns the LastFour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetLastFour() string {
	if o == nil || IsNil(o.LastFour.Get()) {
		var ret string
		return ret
	}
	return *o.LastFour.Get()
}

// GetLastFourOk returns a tuple with the LastFour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetLastFourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastFour.Get(), o.LastFour.IsSet()
}

// HasLastFour returns a boolean if a field has been set.
func (o *InvoicePublic) HasLastFour() bool {
	if o != nil && o.LastFour.IsSet() {
		return true
	}

	return false
}

// SetLastFour gets a reference to the given NullableString and assigns it to the LastFour field.
func (o *InvoicePublic) SetLastFour(v string) {
	o.LastFour.Set(&v)
}
// SetLastFourNil sets the value for LastFour to be an explicit nil
func (o *InvoicePublic) SetLastFourNil() {
	o.LastFour.Set(nil)
}

// UnsetLastFour ensures that no value is present for LastFour, not even an explicit nil
func (o *InvoicePublic) UnsetLastFour() {
	o.LastFour.Unset()
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *InvoicePublic) GetLines() []InvoiceItemPublic {
	if o == nil || IsNil(o.Lines) {
		var ret []InvoiceItemPublic
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetLinesOk() ([]InvoiceItemPublic, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *InvoicePublic) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []InvoiceItemPublic and assigns it to the Lines field.
func (o *InvoicePublic) SetLines(v []InvoiceItemPublic) {
	o.Lines = v
}

// GetBranding returns the Branding field value
func (o *InvoicePublic) GetBranding() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetBrandingOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Branding, true
}

// SetBranding sets field value
func (o *InvoicePublic) SetBranding(v map[string]interface{}) {
	o.Branding = v
}

// GetInvoicePdfUrl returns the InvoicePdfUrl field value
func (o *InvoicePublic) GetInvoicePdfUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoicePdfUrl
}

// GetInvoicePdfUrlOk returns a tuple with the InvoicePdfUrl field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetInvoicePdfUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoicePdfUrl, true
}

// SetInvoicePdfUrl sets field value
func (o *InvoicePublic) SetInvoicePdfUrl(v string) {
	o.InvoicePdfUrl = v
}

// GetReceiptPdfUrl returns the ReceiptPdfUrl field value
func (o *InvoicePublic) GetReceiptPdfUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceiptPdfUrl
}

// GetReceiptPdfUrlOk returns a tuple with the ReceiptPdfUrl field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetReceiptPdfUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiptPdfUrl, true
}

// SetReceiptPdfUrl sets field value
func (o *InvoicePublic) SetReceiptPdfUrl(v string) {
	o.ReceiptPdfUrl = v
}

// GetIsInitialInvoiceForTrialSub returns the IsInitialInvoiceForTrialSub field value
func (o *InvoicePublic) GetIsInitialInvoiceForTrialSub() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsInitialInvoiceForTrialSub
}

// GetIsInitialInvoiceForTrialSubOk returns a tuple with the IsInitialInvoiceForTrialSub field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetIsInitialInvoiceForTrialSubOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsInitialInvoiceForTrialSub, true
}

// SetIsInitialInvoiceForTrialSub sets field value
func (o *InvoicePublic) SetIsInitialInvoiceForTrialSub(v bool) {
	o.IsInitialInvoiceForTrialSub = v
}

// GetTrialStartForSub returns the TrialStartForSub field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *InvoicePublic) GetTrialStartForSub() time.Time {
	if o == nil || o.TrialStartForSub.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.TrialStartForSub.Get()
}

// GetTrialStartForSubOk returns a tuple with the TrialStartForSub field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetTrialStartForSubOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialStartForSub.Get(), o.TrialStartForSub.IsSet()
}

// SetTrialStartForSub sets field value
func (o *InvoicePublic) SetTrialStartForSub(v time.Time) {
	o.TrialStartForSub.Set(&v)
}

// GetTrialEndForSub returns the TrialEndForSub field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *InvoicePublic) GetTrialEndForSub() time.Time {
	if o == nil || o.TrialEndForSub.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.TrialEndForSub.Get()
}

// GetTrialEndForSubOk returns a tuple with the TrialEndForSub field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetTrialEndForSubOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialEndForSub.Get(), o.TrialEndForSub.IsSet()
}

// SetTrialEndForSub sets field value
func (o *InvoicePublic) SetTrialEndForSub(v time.Time) {
	o.TrialEndForSub.Set(&v)
}

// GetStatus returns the Status field value
func (o *InvoicePublic) GetStatus() InvoiceStatusEnum {
	if o == nil {
		var ret InvoiceStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetStatusOk() (*InvoiceStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvoicePublic) SetStatus(v InvoiceStatusEnum) {
	o.Status = v
}

// GetDueAmountAtom returns the DueAmountAtom field value
func (o *InvoicePublic) GetDueAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DueAmountAtom
}

// GetDueAmountAtomOk returns a tuple with the DueAmountAtom field value
// and a boolean to check if the value has been set.
func (o *InvoicePublic) GetDueAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueAmountAtom, true
}

// SetDueAmountAtom sets field value
func (o *InvoicePublic) SetDueAmountAtom(v int32) {
	o.DueAmountAtom = v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePublic) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePublic) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *InvoicePublic) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *InvoicePublic) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *InvoicePublic) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *InvoicePublic) UnsetDueDate() {
	o.DueDate.Unset()
}

func (o InvoicePublic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoicePublic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.PaidAt.IsSet() {
		toSerialize["paid_at"] = o.PaidAt.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["currency"] = o.Currency
	toSerialize["paid_amount_atom"] = o.PaidAmountAtom
	toSerialize["tax_amount_atom"] = o.TaxAmountAtom
	toSerialize["remaining_amount_atom"] = o.RemainingAmountAtom
	if !IsNil(o.TotalDiscountAmountAtoms) {
		toSerialize["total_discount_amount_atoms"] = o.TotalDiscountAmountAtoms
	}
	if o.BilledTo.IsSet() {
		toSerialize["billed_to"] = o.BilledTo.Get()
	}
	if o.BillingAddress.IsSet() {
		toSerialize["billing_address"] = o.BillingAddress.Get()
	}
	if o.CardType.IsSet() {
		toSerialize["card_type"] = o.CardType.Get()
	}
	if o.LastFour.IsSet() {
		toSerialize["last_four"] = o.LastFour.Get()
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	toSerialize["branding"] = o.Branding
	toSerialize["invoice_pdf_url"] = o.InvoicePdfUrl
	toSerialize["receipt_pdf_url"] = o.ReceiptPdfUrl
	toSerialize["is_initial_invoice_for_trial_sub"] = o.IsInitialInvoiceForTrialSub
	toSerialize["trial_start_for_sub"] = o.TrialStartForSub.Get()
	toSerialize["trial_end_for_sub"] = o.TrialEndForSub.Get()
	toSerialize["status"] = o.Status
	toSerialize["due_amount_atom"] = o.DueAmountAtom
	if o.DueDate.IsSet() {
		toSerialize["due_date"] = o.DueDate.Get()
	}
	return toSerialize, nil
}

func (o *InvoicePublic) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"currency",
		"paid_amount_atom",
		"tax_amount_atom",
		"remaining_amount_atom",
		"branding",
		"invoice_pdf_url",
		"receipt_pdf_url",
		"is_initial_invoice_for_trial_sub",
		"trial_start_for_sub",
		"trial_end_for_sub",
		"status",
		"due_amount_atom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoicePublic := _InvoicePublic{}

	err = json.Unmarshal(bytes, &varInvoicePublic)

	if err != nil {
		return err
	}

	*o = InvoicePublic(varInvoicePublic)

	return err
}

type NullableInvoicePublic struct {
	value *InvoicePublic
	isSet bool
}

func (v NullableInvoicePublic) Get() *InvoicePublic {
	return v.value
}

func (v *NullableInvoicePublic) Set(val *InvoicePublic) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoicePublic) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoicePublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoicePublic(val *InvoicePublic) *NullableInvoicePublic {
	return &NullableInvoicePublic{value: val, isSet: true}
}

func (v NullableInvoicePublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoicePublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


