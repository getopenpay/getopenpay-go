/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// InvoiceType the model 'InvoiceType'
type InvoiceType string

// List of InvoiceType
const (
	INVOICETYPE_STANDARD InvoiceType = "standard"
	INVOICETYPE_ONE_OFF InvoiceType = "one_off"
)

// All allowed values of InvoiceType enum
var AllowedInvoiceTypeEnumValues = []InvoiceType{
	"standard",
	"one_off",
}

func (v *InvoiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvoiceType(value)
	for _, existing := range AllowedInvoiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvoiceType", value)
}

// NewInvoiceTypeFromValue returns a pointer to a valid InvoiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvoiceTypeFromValue(v string) (*InvoiceType, error) {
	ev := InvoiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvoiceType: valid values are %v", v, AllowedInvoiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvoiceType) IsValid() bool {
	for _, existing := range AllowedInvoiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvoiceType value
func (v InvoiceType) Ptr() *InvoiceType {
	return &v
}

type NullableInvoiceType struct {
	value *InvoiceType
	isSet bool
}

func (v NullableInvoiceType) Get() *InvoiceType {
	return v.value
}

func (v *NullableInvoiceType) Set(val *InvoiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceType(val *InvoiceType) *NullableInvoiceType {
	return &NullableInvoiceType{value: val, isSet: true}
}

func (v NullableInvoiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

