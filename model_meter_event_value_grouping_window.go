/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// MeterEventValueGroupingWindow the model 'MeterEventValueGroupingWindow'
type MeterEventValueGroupingWindow string

// List of MeterEventValueGroupingWindow
const (
	METEREVENTVALUEGROUPINGWINDOW_DAY MeterEventValueGroupingWindow = "day"
	METEREVENTVALUEGROUPINGWINDOW_HOUR MeterEventValueGroupingWindow = "hour"
	METEREVENTVALUEGROUPINGWINDOW_NONE MeterEventValueGroupingWindow = "none"
)

// All allowed values of MeterEventValueGroupingWindow enum
var AllowedMeterEventValueGroupingWindowEnumValues = []MeterEventValueGroupingWindow{
	"day",
	"hour",
	"none",
}

func (v *MeterEventValueGroupingWindow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeterEventValueGroupingWindow(value)
	for _, existing := range AllowedMeterEventValueGroupingWindowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeterEventValueGroupingWindow", value)
}

// NewMeterEventValueGroupingWindowFromValue returns a pointer to a valid MeterEventValueGroupingWindow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeterEventValueGroupingWindowFromValue(v string) (*MeterEventValueGroupingWindow, error) {
	ev := MeterEventValueGroupingWindow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeterEventValueGroupingWindow: valid values are %v", v, AllowedMeterEventValueGroupingWindowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeterEventValueGroupingWindow) IsValid() bool {
	for _, existing := range AllowedMeterEventValueGroupingWindowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MeterEventValueGroupingWindow value
func (v MeterEventValueGroupingWindow) Ptr() *MeterEventValueGroupingWindow {
	return &v
}

type NullableMeterEventValueGroupingWindow struct {
	value *MeterEventValueGroupingWindow
	isSet bool
}

func (v NullableMeterEventValueGroupingWindow) Get() *MeterEventValueGroupingWindow {
	return v.value
}

func (v *NullableMeterEventValueGroupingWindow) Set(val *MeterEventValueGroupingWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterEventValueGroupingWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterEventValueGroupingWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterEventValueGroupingWindow(val *MeterEventValueGroupingWindow) *NullableMeterEventValueGroupingWindow {
	return &NullableMeterEventValueGroupingWindow{value: val, isSet: true}
}

func (v NullableMeterEventValueGroupingWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterEventValueGroupingWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

