/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PaymentIntentStatus the model 'PaymentIntentStatus'
type PaymentIntentStatus string

// List of PaymentIntentStatus
const (
	PAYMENTINTENTSTATUS_REQUIRES_CONFIRMATION PaymentIntentStatus = "requires_confirmation"
	PAYMENTINTENTSTATUS_REQUIRES_CAPTURE PaymentIntentStatus = "requires_capture"
	PAYMENTINTENTSTATUS_REQUIRES_ACTION PaymentIntentStatus = "requires_action"
	PAYMENTINTENTSTATUS_REQUIRES_PAYMENT_METHOD PaymentIntentStatus = "requires_payment_method"
	PAYMENTINTENTSTATUS_PROCESSING PaymentIntentStatus = "processing"
	PAYMENTINTENTSTATUS_CANCELED PaymentIntentStatus = "canceled"
	PAYMENTINTENTSTATUS_SUCCEEDED PaymentIntentStatus = "succeeded"
	PAYMENTINTENTSTATUS_EXCEPTION PaymentIntentStatus = "exception"
)

// All allowed values of PaymentIntentStatus enum
var AllowedPaymentIntentStatusEnumValues = []PaymentIntentStatus{
	"requires_confirmation",
	"requires_capture",
	"requires_action",
	"requires_payment_method",
	"processing",
	"canceled",
	"succeeded",
	"exception",
}

func (v *PaymentIntentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentIntentStatus(value)
	for _, existing := range AllowedPaymentIntentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentIntentStatus", value)
}

// NewPaymentIntentStatusFromValue returns a pointer to a valid PaymentIntentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentIntentStatusFromValue(v string) (*PaymentIntentStatus, error) {
	ev := PaymentIntentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentIntentStatus: valid values are %v", v, AllowedPaymentIntentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentIntentStatus) IsValid() bool {
	for _, existing := range AllowedPaymentIntentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentIntentStatus value
func (v PaymentIntentStatus) Ptr() *PaymentIntentStatus {
	return &v
}

type NullablePaymentIntentStatus struct {
	value *PaymentIntentStatus
	isSet bool
}

func (v NullablePaymentIntentStatus) Get() *PaymentIntentStatus {
	return v.value
}

func (v *NullablePaymentIntentStatus) Set(val *PaymentIntentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentIntentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentIntentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentIntentStatus(val *PaymentIntentStatus) *NullablePaymentIntentStatus {
	return &NullablePaymentIntentStatus{value: val, isSet: true}
}

func (v NullablePaymentIntentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentIntentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

