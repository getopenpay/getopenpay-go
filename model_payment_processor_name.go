/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PaymentProcessorName PaymentProcessors are api's that we support and can charge.
type PaymentProcessorName string

// List of PaymentProcessorName
const (
	PAYMENTPROCESSORNAME_AIRWALLEX PaymentProcessorName = "airwallex"
	PAYMENTPROCESSORNAME_AUTHORIZE_NET PaymentProcessorName = "authorize_net"
	PAYMENTPROCESSORNAME_CHECKOUT_COM PaymentProcessorName = "checkout_com"
	PAYMENTPROCESSORNAME_BRAINTREE PaymentProcessorName = "braintree"
	PAYMENTPROCESSORNAME_STRIPE PaymentProcessorName = "stripe"
	PAYMENTPROCESSORNAME_FOOBAR PaymentProcessorName = "foobar"
)

// All allowed values of PaymentProcessorName enum
var AllowedPaymentProcessorNameEnumValues = []PaymentProcessorName{
	"airwallex",
	"authorize_net",
	"checkout_com",
	"braintree",
	"stripe",
	"foobar",
}

func (v *PaymentProcessorName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentProcessorName(value)
	for _, existing := range AllowedPaymentProcessorNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentProcessorName", value)
}

// NewPaymentProcessorNameFromValue returns a pointer to a valid PaymentProcessorName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentProcessorNameFromValue(v string) (*PaymentProcessorName, error) {
	ev := PaymentProcessorName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentProcessorName: valid values are %v", v, AllowedPaymentProcessorNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentProcessorName) IsValid() bool {
	for _, existing := range AllowedPaymentProcessorNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentProcessorName value
func (v PaymentProcessorName) Ptr() *PaymentProcessorName {
	return &v
}

type NullablePaymentProcessorName struct {
	value *PaymentProcessorName
	isSet bool
}

func (v NullablePaymentProcessorName) Get() *PaymentProcessorName {
	return v.value
}

func (v *NullablePaymentProcessorName) Set(val *PaymentProcessorName) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentProcessorName) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentProcessorName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentProcessorName(val *PaymentProcessorName) *NullablePaymentProcessorName {
	return &NullablePaymentProcessorName{value: val, isSet: true}
}

func (v NullablePaymentProcessorName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentProcessorName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

