/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PaymentProviderType Not to be confused with PaymentProcessor, this type is used in PaymentMethod which are methods that are visible to customer (i.e. customer has an option to pay with these different providers).
type PaymentProviderType string

// List of PaymentProviderType
const (
	PAYMENTPROVIDERTYPE_ABSTRACT_BASE PaymentProviderType = "_abstract_base"
	PAYMENTPROVIDERTYPE_ACH PaymentProviderType = "ach"
	PAYMENTPROVIDERTYPE_APPLE_PAY PaymentProviderType = "apple_pay"
	PAYMENTPROVIDERTYPE_CREDIT_CARD PaymentProviderType = "credit_card"
	PAYMENTPROVIDERTYPE_GOOGLE_PAY PaymentProviderType = "google_pay"
	PAYMENTPROVIDERTYPE_STRIPE_LINK PaymentProviderType = "stripe_link"
	PAYMENTPROVIDERTYPE_PAYPAL PaymentProviderType = "paypal"
	PAYMENTPROVIDERTYPE_CRYPTO PaymentProviderType = "crypto"
)

// All allowed values of PaymentProviderType enum
var AllowedPaymentProviderTypeEnumValues = []PaymentProviderType{
	"_abstract_base",
	"ach",
	"apple_pay",
	"credit_card",
	"google_pay",
	"stripe_link",
	"paypal",
	"crypto",
}

func (v *PaymentProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentProviderType(value)
	for _, existing := range AllowedPaymentProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentProviderType", value)
}

// NewPaymentProviderTypeFromValue returns a pointer to a valid PaymentProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentProviderTypeFromValue(v string) (*PaymentProviderType, error) {
	ev := PaymentProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentProviderType: valid values are %v", v, AllowedPaymentProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentProviderType) IsValid() bool {
	for _, existing := range AllowedPaymentProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentProviderType value
func (v PaymentProviderType) Ptr() *PaymentProviderType {
	return &v
}

type NullablePaymentProviderType struct {
	value *PaymentProviderType
	isSet bool
}

func (v NullablePaymentProviderType) Get() *PaymentProviderType {
	return v.value
}

func (v *NullablePaymentProviderType) Set(val *PaymentProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentProviderType(val *PaymentProviderType) *NullablePaymentProviderType {
	return &NullablePaymentProviderType{value: val, isSet: true}
}

func (v NullablePaymentProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

