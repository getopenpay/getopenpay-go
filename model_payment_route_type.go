/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PaymentRouteType the model 'PaymentRouteType'
type PaymentRouteType string

// List of PaymentRouteType
const (
	PAYMENTROUTETYPE_DEPRECATED PaymentRouteType = "deprecated"
	PAYMENTROUTETYPE_SIMPLE_MIT_CIT_FILTER PaymentRouteType = "simple_mit_cit_filter"
	PAYMENTROUTETYPE_CIT_MIT_PROCESSORS PaymentRouteType = "cit_mit_processors"
)

// All allowed values of PaymentRouteType enum
var AllowedPaymentRouteTypeEnumValues = []PaymentRouteType{
	"deprecated",
	"simple_mit_cit_filter",
	"cit_mit_processors",
}

func (v *PaymentRouteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentRouteType(value)
	for _, existing := range AllowedPaymentRouteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentRouteType", value)
}

// NewPaymentRouteTypeFromValue returns a pointer to a valid PaymentRouteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentRouteTypeFromValue(v string) (*PaymentRouteType, error) {
	ev := PaymentRouteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentRouteType: valid values are %v", v, AllowedPaymentRouteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentRouteType) IsValid() bool {
	for _, existing := range AllowedPaymentRouteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentRouteType value
func (v PaymentRouteType) Ptr() *PaymentRouteType {
	return &v
}

type NullablePaymentRouteType struct {
	value *PaymentRouteType
	isSet bool
}

func (v NullablePaymentRouteType) Get() *PaymentRouteType {
	return v.value
}

func (v *NullablePaymentRouteType) Set(val *PaymentRouteType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRouteType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRouteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRouteType(val *PaymentRouteType) *NullablePaymentRouteType {
	return &NullablePaymentRouteType{value: val, isSet: true}
}

func (v NullablePaymentRouteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRouteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

