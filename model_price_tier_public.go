/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the PriceTierPublic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceTierPublic{}

// PriceTierPublic struct for PriceTierPublic
type PriceTierPublic struct {
	UnitsUpto NullableInt32 `json:"units_upto,omitempty"`
	// Price per unit in the currency atom.
	UnitAmountAtom int32 `json:"unit_amount_atom"`
	// Flat price in the currency atom.
	FlatAmountAtom int32 `json:"flat_amount_atom"`
}

type _PriceTierPublic PriceTierPublic

// NewPriceTierPublic instantiates a new PriceTierPublic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceTierPublic(unitAmountAtom int32, flatAmountAtom int32) *PriceTierPublic {
	this := PriceTierPublic{}
	this.UnitAmountAtom = unitAmountAtom
	this.FlatAmountAtom = flatAmountAtom
	return &this
}

// NewPriceTierPublicWithDefaults instantiates a new PriceTierPublic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceTierPublicWithDefaults() *PriceTierPublic {
	this := PriceTierPublic{}
	return &this
}

// GetUnitsUpto returns the UnitsUpto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceTierPublic) GetUnitsUpto() int32 {
	if o == nil || IsNil(o.UnitsUpto.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitsUpto.Get()
}

// GetUnitsUptoOk returns a tuple with the UnitsUpto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceTierPublic) GetUnitsUptoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitsUpto.Get(), o.UnitsUpto.IsSet()
}

// HasUnitsUpto returns a boolean if a field has been set.
func (o *PriceTierPublic) HasUnitsUpto() bool {
	if o != nil && o.UnitsUpto.IsSet() {
		return true
	}

	return false
}

// SetUnitsUpto gets a reference to the given NullableInt32 and assigns it to the UnitsUpto field.
func (o *PriceTierPublic) SetUnitsUpto(v int32) {
	o.UnitsUpto.Set(&v)
}
// SetUnitsUptoNil sets the value for UnitsUpto to be an explicit nil
func (o *PriceTierPublic) SetUnitsUptoNil() {
	o.UnitsUpto.Set(nil)
}

// UnsetUnitsUpto ensures that no value is present for UnitsUpto, not even an explicit nil
func (o *PriceTierPublic) UnsetUnitsUpto() {
	o.UnitsUpto.Unset()
}

// GetUnitAmountAtom returns the UnitAmountAtom field value
func (o *PriceTierPublic) GetUnitAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UnitAmountAtom
}

// GetUnitAmountAtomOk returns a tuple with the UnitAmountAtom field value
// and a boolean to check if the value has been set.
func (o *PriceTierPublic) GetUnitAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitAmountAtom, true
}

// SetUnitAmountAtom sets field value
func (o *PriceTierPublic) SetUnitAmountAtom(v int32) {
	o.UnitAmountAtom = v
}

// GetFlatAmountAtom returns the FlatAmountAtom field value
func (o *PriceTierPublic) GetFlatAmountAtom() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FlatAmountAtom
}

// GetFlatAmountAtomOk returns a tuple with the FlatAmountAtom field value
// and a boolean to check if the value has been set.
func (o *PriceTierPublic) GetFlatAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlatAmountAtom, true
}

// SetFlatAmountAtom sets field value
func (o *PriceTierPublic) SetFlatAmountAtom(v int32) {
	o.FlatAmountAtom = v
}

func (o PriceTierPublic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceTierPublic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UnitsUpto.IsSet() {
		toSerialize["units_upto"] = o.UnitsUpto.Get()
	}
	toSerialize["unit_amount_atom"] = o.UnitAmountAtom
	toSerialize["flat_amount_atom"] = o.FlatAmountAtom
	return toSerialize, nil
}

func (o *PriceTierPublic) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit_amount_atom",
		"flat_amount_atom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceTierPublic := _PriceTierPublic{}

	err = json.Unmarshal(bytes, &varPriceTierPublic)

	if err != nil {
		return err
	}

	*o = PriceTierPublic(varPriceTierPublic)

	return err
}

type NullablePriceTierPublic struct {
	value *PriceTierPublic
	isSet bool
}

func (v NullablePriceTierPublic) Get() *PriceTierPublic {
	return v.value
}

func (v *NullablePriceTierPublic) Set(val *PriceTierPublic) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceTierPublic) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceTierPublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceTierPublic(val *PriceTierPublic) *NullablePriceTierPublic {
	return &NullablePriceTierPublic{value: val, isSet: true}
}

func (v NullablePriceTierPublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceTierPublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


