/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PriceTypeEnum the model 'PriceTypeEnum'
type PriceTypeEnum string

// List of PriceTypeEnum
const (
	PRICETYPEENUM_ONE_TIME PriceTypeEnum = "one_time"
	PRICETYPEENUM_RECURRING PriceTypeEnum = "recurring"
)

// All allowed values of PriceTypeEnum enum
var AllowedPriceTypeEnumEnumValues = []PriceTypeEnum{
	"one_time",
	"recurring",
}

func (v *PriceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceTypeEnum(value)
	for _, existing := range AllowedPriceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceTypeEnum", value)
}

// NewPriceTypeEnumFromValue returns a pointer to a valid PriceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceTypeEnumFromValue(v string) (*PriceTypeEnum, error) {
	ev := PriceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceTypeEnum: valid values are %v", v, AllowedPriceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceTypeEnum) IsValid() bool {
	for _, existing := range AllowedPriceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceTypeEnum value
func (v PriceTypeEnum) Ptr() *PriceTypeEnum {
	return &v
}

type NullablePriceTypeEnum struct {
	value *PriceTypeEnum
	isSet bool
}

func (v NullablePriceTypeEnum) Get() *PriceTypeEnum {
	return v.value
}

func (v *NullablePriceTypeEnum) Set(val *PriceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceTypeEnum(val *PriceTypeEnum) *NullablePriceTypeEnum {
	return &NullablePriceTypeEnum{value: val, isSet: true}
}

func (v NullablePriceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

