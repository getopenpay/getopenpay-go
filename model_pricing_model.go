/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PricingModel the model 'PricingModel'
type PricingModel string

// List of PricingModel
const (
	PRICINGMODEL_STANDARD PricingModel = "standard"
	PRICINGMODEL_PACKAGE PricingModel = "package"
	PRICINGMODEL_GRADUATED PricingModel = "graduated"
	PRICINGMODEL_VOLUME PricingModel = "volume"
)

// All allowed values of PricingModel enum
var AllowedPricingModelEnumValues = []PricingModel{
	"standard",
	"package",
	"graduated",
	"volume",
}

func (v *PricingModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PricingModel(value)
	for _, existing := range AllowedPricingModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PricingModel", value)
}

// NewPricingModelFromValue returns a pointer to a valid PricingModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPricingModelFromValue(v string) (*PricingModel, error) {
	ev := PricingModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PricingModel: valid values are %v", v, AllowedPricingModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PricingModel) IsValid() bool {
	for _, existing := range AllowedPricingModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PricingModel value
func (v PricingModel) Ptr() *PricingModel {
	return &v
}

type NullablePricingModel struct {
	value *PricingModel
	isSet bool
}

func (v NullablePricingModel) Get() *PricingModel {
	return v.value
}

func (v *NullablePricingModel) Set(val *PricingModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingModel(val *PricingModel) *NullablePricingModel {
	return &NullablePricingModel{value: val, isSet: true}
}

func (v NullablePricingModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

