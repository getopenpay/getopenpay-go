/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// PricingTiersEnum the model 'PricingTiersEnum'
type PricingTiersEnum string

// List of PricingTiersEnum
const (
	PRICINGTIERSENUM_GRADUATED PricingTiersEnum = "graduated"
	PRICINGTIERSENUM_VOLUME PricingTiersEnum = "volume"
)

// All allowed values of PricingTiersEnum enum
var AllowedPricingTiersEnumEnumValues = []PricingTiersEnum{
	"graduated",
	"volume",
}

func (v *PricingTiersEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PricingTiersEnum(value)
	for _, existing := range AllowedPricingTiersEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PricingTiersEnum", value)
}

// NewPricingTiersEnumFromValue returns a pointer to a valid PricingTiersEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPricingTiersEnumFromValue(v string) (*PricingTiersEnum, error) {
	ev := PricingTiersEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PricingTiersEnum: valid values are %v", v, AllowedPricingTiersEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PricingTiersEnum) IsValid() bool {
	for _, existing := range AllowedPricingTiersEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PricingTiersEnum value
func (v PricingTiersEnum) Ptr() *PricingTiersEnum {
	return &v
}

type NullablePricingTiersEnum struct {
	value *PricingTiersEnum
	isSet bool
}

func (v NullablePricingTiersEnum) Get() *PricingTiersEnum {
	return v.value
}

func (v *NullablePricingTiersEnum) Set(val *PricingTiersEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingTiersEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingTiersEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingTiersEnum(val *PricingTiersEnum) *NullablePricingTiersEnum {
	return &NullablePricingTiersEnum{value: val, isSet: true}
}

func (v NullablePricingTiersEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingTiersEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

