/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the PromoRestrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromoRestrictions{}

// PromoRestrictions struct for PromoRestrictions
type PromoRestrictions struct {
	FirstTimeTransaction NullableBool `json:"first_time_transaction,omitempty"`
	MinimumAmountAtom NullableInt32 `json:"minimum_amount_atom,omitempty"`
	MinimumAmountCurrency NullableCurrencyEnum `json:"minimum_amount_currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PromoRestrictions PromoRestrictions

// NewPromoRestrictions instantiates a new PromoRestrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromoRestrictions() *PromoRestrictions {
	this := PromoRestrictions{}
	return &this
}

// NewPromoRestrictionsWithDefaults instantiates a new PromoRestrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromoRestrictionsWithDefaults() *PromoRestrictions {
	this := PromoRestrictions{}
	return &this
}

// GetFirstTimeTransaction returns the FirstTimeTransaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PromoRestrictions) GetFirstTimeTransaction() bool {
	if o == nil || IsNil(o.FirstTimeTransaction.Get()) {
		var ret bool
		return ret
	}
	return *o.FirstTimeTransaction.Get()
}

// GetFirstTimeTransactionOk returns a tuple with the FirstTimeTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PromoRestrictions) GetFirstTimeTransactionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstTimeTransaction.Get(), o.FirstTimeTransaction.IsSet()
}

// HasFirstTimeTransaction returns a boolean if a field has been set.
func (o *PromoRestrictions) HasFirstTimeTransaction() bool {
	if o != nil && o.FirstTimeTransaction.IsSet() {
		return true
	}

	return false
}

// SetFirstTimeTransaction gets a reference to the given NullableBool and assigns it to the FirstTimeTransaction field.
func (o *PromoRestrictions) SetFirstTimeTransaction(v bool) {
	o.FirstTimeTransaction.Set(&v)
}
// SetFirstTimeTransactionNil sets the value for FirstTimeTransaction to be an explicit nil
func (o *PromoRestrictions) SetFirstTimeTransactionNil() {
	o.FirstTimeTransaction.Set(nil)
}

// UnsetFirstTimeTransaction ensures that no value is present for FirstTimeTransaction, not even an explicit nil
func (o *PromoRestrictions) UnsetFirstTimeTransaction() {
	o.FirstTimeTransaction.Unset()
}

// GetMinimumAmountAtom returns the MinimumAmountAtom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PromoRestrictions) GetMinimumAmountAtom() int32 {
	if o == nil || IsNil(o.MinimumAmountAtom.Get()) {
		var ret int32
		return ret
	}
	return *o.MinimumAmountAtom.Get()
}

// GetMinimumAmountAtomOk returns a tuple with the MinimumAmountAtom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PromoRestrictions) GetMinimumAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumAmountAtom.Get(), o.MinimumAmountAtom.IsSet()
}

// HasMinimumAmountAtom returns a boolean if a field has been set.
func (o *PromoRestrictions) HasMinimumAmountAtom() bool {
	if o != nil && o.MinimumAmountAtom.IsSet() {
		return true
	}

	return false
}

// SetMinimumAmountAtom gets a reference to the given NullableInt32 and assigns it to the MinimumAmountAtom field.
func (o *PromoRestrictions) SetMinimumAmountAtom(v int32) {
	o.MinimumAmountAtom.Set(&v)
}
// SetMinimumAmountAtomNil sets the value for MinimumAmountAtom to be an explicit nil
func (o *PromoRestrictions) SetMinimumAmountAtomNil() {
	o.MinimumAmountAtom.Set(nil)
}

// UnsetMinimumAmountAtom ensures that no value is present for MinimumAmountAtom, not even an explicit nil
func (o *PromoRestrictions) UnsetMinimumAmountAtom() {
	o.MinimumAmountAtom.Unset()
}

// GetMinimumAmountCurrency returns the MinimumAmountCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PromoRestrictions) GetMinimumAmountCurrency() CurrencyEnum {
	if o == nil || IsNil(o.MinimumAmountCurrency.Get()) {
		var ret CurrencyEnum
		return ret
	}
	return *o.MinimumAmountCurrency.Get()
}

// GetMinimumAmountCurrencyOk returns a tuple with the MinimumAmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PromoRestrictions) GetMinimumAmountCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumAmountCurrency.Get(), o.MinimumAmountCurrency.IsSet()
}

// HasMinimumAmountCurrency returns a boolean if a field has been set.
func (o *PromoRestrictions) HasMinimumAmountCurrency() bool {
	if o != nil && o.MinimumAmountCurrency.IsSet() {
		return true
	}

	return false
}

// SetMinimumAmountCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the MinimumAmountCurrency field.
func (o *PromoRestrictions) SetMinimumAmountCurrency(v CurrencyEnum) {
	o.MinimumAmountCurrency.Set(&v)
}
// SetMinimumAmountCurrencyNil sets the value for MinimumAmountCurrency to be an explicit nil
func (o *PromoRestrictions) SetMinimumAmountCurrencyNil() {
	o.MinimumAmountCurrency.Set(nil)
}

// UnsetMinimumAmountCurrency ensures that no value is present for MinimumAmountCurrency, not even an explicit nil
func (o *PromoRestrictions) UnsetMinimumAmountCurrency() {
	o.MinimumAmountCurrency.Unset()
}

func (o PromoRestrictions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromoRestrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstTimeTransaction.IsSet() {
		toSerialize["first_time_transaction"] = o.FirstTimeTransaction.Get()
	}
	if o.MinimumAmountAtom.IsSet() {
		toSerialize["minimum_amount_atom"] = o.MinimumAmountAtom.Get()
	}
	if o.MinimumAmountCurrency.IsSet() {
		toSerialize["minimum_amount_currency"] = o.MinimumAmountCurrency.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PromoRestrictions) UnmarshalJSON(data []byte) (err error) {
	varPromoRestrictions := _PromoRestrictions{}

	err = json.Unmarshal(data, &varPromoRestrictions)

	if err != nil {
		return err
	}

	*o = PromoRestrictions(varPromoRestrictions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "first_time_transaction")
		delete(additionalProperties, "minimum_amount_atom")
		delete(additionalProperties, "minimum_amount_currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePromoRestrictions struct {
	value *PromoRestrictions
	isSet bool
}

func (v NullablePromoRestrictions) Get() *PromoRestrictions {
	return v.value
}

func (v *NullablePromoRestrictions) Set(val *PromoRestrictions) {
	v.value = val
	v.isSet = true
}

func (v NullablePromoRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullablePromoRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromoRestrictions(val *PromoRestrictions) *NullablePromoRestrictions {
	return &NullablePromoRestrictions{value: val, isSet: true}
}

func (v NullablePromoRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromoRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


