/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// ProrationEnum the model 'ProrationEnum'
type ProrationEnum string

// List of ProrationEnum
const (
	PRORATIONENUM_CREATE_PRORATIONS ProrationEnum = "create_prorations"
	PRORATIONENUM_NONE ProrationEnum = "none"
	PRORATIONENUM_ALWAYS_INVOICE ProrationEnum = "always_invoice"
)

// All allowed values of ProrationEnum enum
var AllowedProrationEnumEnumValues = []ProrationEnum{
	"create_prorations",
	"none",
	"always_invoice",
}

func (v *ProrationEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProrationEnum(value)
	for _, existing := range AllowedProrationEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProrationEnum", value)
}

// NewProrationEnumFromValue returns a pointer to a valid ProrationEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProrationEnumFromValue(v string) (*ProrationEnum, error) {
	ev := ProrationEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProrationEnum: valid values are %v", v, AllowedProrationEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProrationEnum) IsValid() bool {
	for _, existing := range AllowedProrationEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProrationEnum value
func (v ProrationEnum) Ptr() *ProrationEnum {
	return &v
}

type NullableProrationEnum struct {
	value *ProrationEnum
	isSet bool
}

func (v NullableProrationEnum) Get() *ProrationEnum {
	return v.value
}

func (v *NullableProrationEnum) Set(val *ProrationEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProrationEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProrationEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProrationEnum(val *ProrationEnum) *NullableProrationEnum {
	return &NullableProrationEnum{value: val, isSet: true}
}

func (v NullableProrationEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProrationEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

