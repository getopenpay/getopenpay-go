/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// RefundReasonEnum the model 'RefundReasonEnum'
type RefundReasonEnum string

// List of RefundReasonEnum
const (
	REFUNDREASONENUM_MANUAL RefundReasonEnum = "manual"
	REFUNDREASONENUM_DUPLICATE RefundReasonEnum = "duplicate"
	REFUNDREASONENUM_FRAUDULENT RefundReasonEnum = "fraudulent"
	REFUNDREASONENUM_REQUESTED_BY_CUSTOMER RefundReasonEnum = "requested_by_customer"
	REFUNDREASONENUM_EXPIRED_UNCAPTURED_CHARGE RefundReasonEnum = "expired_uncaptured_charge"
	REFUNDREASONENUM_MANUAL_OUT_OF_BAND RefundReasonEnum = "manual_out_of_band"
)

// All allowed values of RefundReasonEnum enum
var AllowedRefundReasonEnumEnumValues = []RefundReasonEnum{
	"manual",
	"duplicate",
	"fraudulent",
	"requested_by_customer",
	"expired_uncaptured_charge",
	"manual_out_of_band",
}

func (v *RefundReasonEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundReasonEnum(value)
	for _, existing := range AllowedRefundReasonEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundReasonEnum", value)
}

// NewRefundReasonEnumFromValue returns a pointer to a valid RefundReasonEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundReasonEnumFromValue(v string) (*RefundReasonEnum, error) {
	ev := RefundReasonEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundReasonEnum: valid values are %v", v, AllowedRefundReasonEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundReasonEnum) IsValid() bool {
	for _, existing := range AllowedRefundReasonEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundReasonEnum value
func (v RefundReasonEnum) Ptr() *RefundReasonEnum {
	return &v
}

type NullableRefundReasonEnum struct {
	value *RefundReasonEnum
	isSet bool
}

func (v NullableRefundReasonEnum) Get() *RefundReasonEnum {
	return v.value
}

func (v *NullableRefundReasonEnum) Set(val *RefundReasonEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundReasonEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundReasonEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundReasonEnum(val *RefundReasonEnum) *NullableRefundReasonEnum {
	return &NullableRefundReasonEnum{value: val, isSet: true}
}

func (v NullableRefundReasonEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundReasonEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

