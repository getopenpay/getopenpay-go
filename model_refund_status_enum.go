/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// RefundStatusEnum the model 'RefundStatusEnum'
type RefundStatusEnum string

// List of RefundStatusEnum
const (
	REFUNDSTATUSENUM_SUCCEEDED RefundStatusEnum = "succeeded"
	REFUNDSTATUSENUM_FAILED RefundStatusEnum = "failed"
	REFUNDSTATUSENUM_PENDING RefundStatusEnum = "pending"
	REFUNDSTATUSENUM_REQUIRES_ACTION RefundStatusEnum = "requires_action"
	REFUNDSTATUSENUM_CANCELED RefundStatusEnum = "canceled"
)

// All allowed values of RefundStatusEnum enum
var AllowedRefundStatusEnumEnumValues = []RefundStatusEnum{
	"succeeded",
	"failed",
	"pending",
	"requires_action",
	"canceled",
}

func (v *RefundStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundStatusEnum(value)
	for _, existing := range AllowedRefundStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundStatusEnum", value)
}

// NewRefundStatusEnumFromValue returns a pointer to a valid RefundStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundStatusEnumFromValue(v string) (*RefundStatusEnum, error) {
	ev := RefundStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundStatusEnum: valid values are %v", v, AllowedRefundStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundStatusEnum) IsValid() bool {
	for _, existing := range AllowedRefundStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundStatusEnum value
func (v RefundStatusEnum) Ptr() *RefundStatusEnum {
	return &v
}

type NullableRefundStatusEnum struct {
	value *RefundStatusEnum
	isSet bool
}

func (v NullableRefundStatusEnum) Get() *RefundStatusEnum {
	return v.value
}

func (v *NullableRefundStatusEnum) Set(val *RefundStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundStatusEnum(val *RefundStatusEnum) *NullableRefundStatusEnum {
	return &NullableRefundStatusEnum{value: val, isSet: true}
}

func (v NullableRefundStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

