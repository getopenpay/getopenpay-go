/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResumeSubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResumeSubscriptionResponse{}

// ResumeSubscriptionResponse struct for ResumeSubscriptionResponse
type ResumeSubscriptionResponse struct {
	Invoice NullableInvoiceExternal `json:"invoice,omitempty"`
	// The subscription being resumed.
	Subscription SubscriptionExternal `json:"subscription"`
}

type _ResumeSubscriptionResponse ResumeSubscriptionResponse

// NewResumeSubscriptionResponse instantiates a new ResumeSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResumeSubscriptionResponse(subscription SubscriptionExternal) *ResumeSubscriptionResponse {
	this := ResumeSubscriptionResponse{}
	this.Subscription = subscription
	return &this
}

// NewResumeSubscriptionResponseWithDefaults instantiates a new ResumeSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResumeSubscriptionResponseWithDefaults() *ResumeSubscriptionResponse {
	this := ResumeSubscriptionResponse{}
	return &this
}

// GetInvoice returns the Invoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResumeSubscriptionResponse) GetInvoice() InvoiceExternal {
	if o == nil || IsNil(o.Invoice.Get()) {
		var ret InvoiceExternal
		return ret
	}
	return *o.Invoice.Get()
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResumeSubscriptionResponse) GetInvoiceOk() (*InvoiceExternal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invoice.Get(), o.Invoice.IsSet()
}

// HasInvoice returns a boolean if a field has been set.
func (o *ResumeSubscriptionResponse) HasInvoice() bool {
	if o != nil && o.Invoice.IsSet() {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given NullableInvoiceExternal and assigns it to the Invoice field.
func (o *ResumeSubscriptionResponse) SetInvoice(v InvoiceExternal) {
	o.Invoice.Set(&v)
}
// SetInvoiceNil sets the value for Invoice to be an explicit nil
func (o *ResumeSubscriptionResponse) SetInvoiceNil() {
	o.Invoice.Set(nil)
}

// UnsetInvoice ensures that no value is present for Invoice, not even an explicit nil
func (o *ResumeSubscriptionResponse) UnsetInvoice() {
	o.Invoice.Unset()
}

// GetSubscription returns the Subscription field value
func (o *ResumeSubscriptionResponse) GetSubscription() SubscriptionExternal {
	if o == nil {
		var ret SubscriptionExternal
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
func (o *ResumeSubscriptionResponse) GetSubscriptionOk() (*SubscriptionExternal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *ResumeSubscriptionResponse) SetSubscription(v SubscriptionExternal) {
	o.Subscription = v
}

func (o ResumeSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResumeSubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Invoice.IsSet() {
		toSerialize["invoice"] = o.Invoice.Get()
	}
	toSerialize["subscription"] = o.Subscription
	return toSerialize, nil
}

func (o *ResumeSubscriptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResumeSubscriptionResponse := _ResumeSubscriptionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResumeSubscriptionResponse)

	if err != nil {
		return err
	}

	*o = ResumeSubscriptionResponse(varResumeSubscriptionResponse)

	return err
}

type NullableResumeSubscriptionResponse struct {
	value *ResumeSubscriptionResponse
	isSet bool
}

func (v NullableResumeSubscriptionResponse) Get() *ResumeSubscriptionResponse {
	return v.value
}

func (v *NullableResumeSubscriptionResponse) Set(val *ResumeSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResumeSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResumeSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResumeSubscriptionResponse(val *ResumeSubscriptionResponse) *NullableResumeSubscriptionResponse {
	return &NullableResumeSubscriptionResponse{value: val, isSet: true}
}

func (v NullableResumeSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResumeSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


