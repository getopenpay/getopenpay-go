/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the SearchFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchFilter{}

// SearchFilter Represents a string filter with various comparison options.  Attributes (Only one of these should be populated or else....): - ilike (Optional[str]): Field values should be ilike to this value.
type SearchFilter struct {
	Eq NullableString `json:"eq,omitempty"`
	Ilike NullableString `json:"ilike,omitempty"`
}

// NewSearchFilter instantiates a new SearchFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFilter() *SearchFilter {
	this := SearchFilter{}
	return &this
}

// NewSearchFilterWithDefaults instantiates a new SearchFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFilterWithDefaults() *SearchFilter {
	this := SearchFilter{}
	return &this
}

// GetEq returns the Eq field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchFilter) GetEq() string {
	if o == nil || IsNil(o.Eq.Get()) {
		var ret string
		return ret
	}
	return *o.Eq.Get()
}

// GetEqOk returns a tuple with the Eq field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchFilter) GetEqOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Eq.Get(), o.Eq.IsSet()
}

// HasEq returns a boolean if a field has been set.
func (o *SearchFilter) HasEq() bool {
	if o != nil && o.Eq.IsSet() {
		return true
	}

	return false
}

// SetEq gets a reference to the given NullableString and assigns it to the Eq field.
func (o *SearchFilter) SetEq(v string) {
	o.Eq.Set(&v)
}
// SetEqNil sets the value for Eq to be an explicit nil
func (o *SearchFilter) SetEqNil() {
	o.Eq.Set(nil)
}

// UnsetEq ensures that no value is present for Eq, not even an explicit nil
func (o *SearchFilter) UnsetEq() {
	o.Eq.Unset()
}

// GetIlike returns the Ilike field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchFilter) GetIlike() string {
	if o == nil || IsNil(o.Ilike.Get()) {
		var ret string
		return ret
	}
	return *o.Ilike.Get()
}

// GetIlikeOk returns a tuple with the Ilike field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchFilter) GetIlikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ilike.Get(), o.Ilike.IsSet()
}

// HasIlike returns a boolean if a field has been set.
func (o *SearchFilter) HasIlike() bool {
	if o != nil && o.Ilike.IsSet() {
		return true
	}

	return false
}

// SetIlike gets a reference to the given NullableString and assigns it to the Ilike field.
func (o *SearchFilter) SetIlike(v string) {
	o.Ilike.Set(&v)
}
// SetIlikeNil sets the value for Ilike to be an explicit nil
func (o *SearchFilter) SetIlikeNil() {
	o.Ilike.Set(nil)
}

// UnsetIlike ensures that no value is present for Ilike, not even an explicit nil
func (o *SearchFilter) UnsetIlike() {
	o.Ilike.Unset()
}

func (o SearchFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Eq.IsSet() {
		toSerialize["eq"] = o.Eq.Get()
	}
	if o.Ilike.IsSet() {
		toSerialize["ilike"] = o.Ilike.Get()
	}
	return toSerialize, nil
}

type NullableSearchFilter struct {
	value *SearchFilter
	isSet bool
}

func (v NullableSearchFilter) Get() *SearchFilter {
	return v.value
}

func (v *NullableSearchFilter) Set(val *SearchFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFilter(val *SearchFilter) *NullableSearchFilter {
	return &NullableSearchFilter{value: val, isSet: true}
}

func (v NullableSearchFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


