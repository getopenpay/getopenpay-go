/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the SelectedPriceQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectedPriceQuantity{}

// SelectedPriceQuantity struct for SelectedPriceQuantity
type SelectedPriceQuantity struct {
	// Unique Identifier of the price.
	PriceId string `json:"price_id"`
	// Quantity of the product selected for the subscription.This field is ignored for metered prices
	Quantity int32 `json:"quantity"`
	AdditionalProperties map[string]interface{}
}

type _SelectedPriceQuantity SelectedPriceQuantity

// NewSelectedPriceQuantity instantiates a new SelectedPriceQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectedPriceQuantity(priceId string, quantity int32) *SelectedPriceQuantity {
	this := SelectedPriceQuantity{}
	this.PriceId = priceId
	this.Quantity = quantity
	return &this
}

// NewSelectedPriceQuantityWithDefaults instantiates a new SelectedPriceQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectedPriceQuantityWithDefaults() *SelectedPriceQuantity {
	this := SelectedPriceQuantity{}
	return &this
}

// GetPriceId returns the PriceId field value
func (o *SelectedPriceQuantity) GetPriceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceId
}

// GetPriceIdOk returns a tuple with the PriceId field value
// and a boolean to check if the value has been set.
func (o *SelectedPriceQuantity) GetPriceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceId, true
}

// SetPriceId sets field value
func (o *SelectedPriceQuantity) SetPriceId(v string) {
	o.PriceId = v
}

// GetQuantity returns the Quantity field value
func (o *SelectedPriceQuantity) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SelectedPriceQuantity) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SelectedPriceQuantity) SetQuantity(v int32) {
	o.Quantity = v
}

func (o SelectedPriceQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectedPriceQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price_id"] = o.PriceId
	toSerialize["quantity"] = o.Quantity

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SelectedPriceQuantity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price_id",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSelectedPriceQuantity := _SelectedPriceQuantity{}

	err = json.Unmarshal(data, &varSelectedPriceQuantity)

	if err != nil {
		return err
	}

	*o = SelectedPriceQuantity(varSelectedPriceQuantity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "price_id")
		delete(additionalProperties, "quantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSelectedPriceQuantity struct {
	value *SelectedPriceQuantity
	isSet bool
}

func (v NullableSelectedPriceQuantity) Get() *SelectedPriceQuantity {
	return v.value
}

func (v *NullableSelectedPriceQuantity) Set(val *SelectedPriceQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedPriceQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedPriceQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedPriceQuantity(val *SelectedPriceQuantity) *NullableSelectedPriceQuantity {
	return &NullableSelectedPriceQuantity{value: val, isSet: true}
}

func (v NullableSelectedPriceQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedPriceQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


