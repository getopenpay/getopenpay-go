/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// SubscriptionCancelFeedbackEnum the model 'SubscriptionCancelFeedbackEnum'
type SubscriptionCancelFeedbackEnum string

// List of SubscriptionCancelFeedbackEnum
const (
	SUBSCRIPTIONCANCELFEEDBACKENUM_TOO_EXPENSIVE SubscriptionCancelFeedbackEnum = "too_expensive"
	SUBSCRIPTIONCANCELFEEDBACKENUM_MISSING_FEATURES SubscriptionCancelFeedbackEnum = "missing_features"
	SUBSCRIPTIONCANCELFEEDBACKENUM_SWITCHED_SERVICE SubscriptionCancelFeedbackEnum = "switched_service"
	SUBSCRIPTIONCANCELFEEDBACKENUM_UNUSED SubscriptionCancelFeedbackEnum = "unused"
	SUBSCRIPTIONCANCELFEEDBACKENUM_CUSTOMER_SERVICE SubscriptionCancelFeedbackEnum = "customer_service"
	SUBSCRIPTIONCANCELFEEDBACKENUM_TOO_COMPLEX SubscriptionCancelFeedbackEnum = "too_complex"
	SUBSCRIPTIONCANCELFEEDBACKENUM_LOW_QUALITY SubscriptionCancelFeedbackEnum = "low_quality"
	SUBSCRIPTIONCANCELFEEDBACKENUM_OTHER SubscriptionCancelFeedbackEnum = "other"
)

// All allowed values of SubscriptionCancelFeedbackEnum enum
var AllowedSubscriptionCancelFeedbackEnumEnumValues = []SubscriptionCancelFeedbackEnum{
	"too_expensive",
	"missing_features",
	"switched_service",
	"unused",
	"customer_service",
	"too_complex",
	"low_quality",
	"other",
}

func (v *SubscriptionCancelFeedbackEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionCancelFeedbackEnum(value)
	for _, existing := range AllowedSubscriptionCancelFeedbackEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionCancelFeedbackEnum", value)
}

// NewSubscriptionCancelFeedbackEnumFromValue returns a pointer to a valid SubscriptionCancelFeedbackEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionCancelFeedbackEnumFromValue(v string) (*SubscriptionCancelFeedbackEnum, error) {
	ev := SubscriptionCancelFeedbackEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionCancelFeedbackEnum: valid values are %v", v, AllowedSubscriptionCancelFeedbackEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionCancelFeedbackEnum) IsValid() bool {
	for _, existing := range AllowedSubscriptionCancelFeedbackEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionCancelFeedbackEnum value
func (v SubscriptionCancelFeedbackEnum) Ptr() *SubscriptionCancelFeedbackEnum {
	return &v
}

type NullableSubscriptionCancelFeedbackEnum struct {
	value *SubscriptionCancelFeedbackEnum
	isSet bool
}

func (v NullableSubscriptionCancelFeedbackEnum) Get() *SubscriptionCancelFeedbackEnum {
	return v.value
}

func (v *NullableSubscriptionCancelFeedbackEnum) Set(val *SubscriptionCancelFeedbackEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCancelFeedbackEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCancelFeedbackEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCancelFeedbackEnum(val *SubscriptionCancelFeedbackEnum) *NullableSubscriptionCancelFeedbackEnum {
	return &NullableSubscriptionCancelFeedbackEnum{value: val, isSet: true}
}

func (v NullableSubscriptionCancelFeedbackEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCancelFeedbackEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

