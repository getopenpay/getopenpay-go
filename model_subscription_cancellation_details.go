/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the SubscriptionCancellationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCancellationDetails{}

// SubscriptionCancellationDetails struct for SubscriptionCancellationDetails
type SubscriptionCancellationDetails struct {
	Comment NullableString `json:"comment,omitempty"`
	Feedback NullableSubscriptionCancelFeedbackEnum `json:"feedback,omitempty"`
	Reason NullableString `json:"reason,omitempty"`
}

// NewSubscriptionCancellationDetails instantiates a new SubscriptionCancellationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCancellationDetails() *SubscriptionCancellationDetails {
	this := SubscriptionCancellationDetails{}
	return &this
}

// NewSubscriptionCancellationDetailsWithDefaults instantiates a new SubscriptionCancellationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCancellationDetailsWithDefaults() *SubscriptionCancellationDetails {
	this := SubscriptionCancellationDetails{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionCancellationDetails) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCancellationDetails) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *SubscriptionCancellationDetails) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *SubscriptionCancellationDetails) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *SubscriptionCancellationDetails) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *SubscriptionCancellationDetails) UnsetComment() {
	o.Comment.Unset()
}

// GetFeedback returns the Feedback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionCancellationDetails) GetFeedback() SubscriptionCancelFeedbackEnum {
	if o == nil || IsNil(o.Feedback.Get()) {
		var ret SubscriptionCancelFeedbackEnum
		return ret
	}
	return *o.Feedback.Get()
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCancellationDetails) GetFeedbackOk() (*SubscriptionCancelFeedbackEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Feedback.Get(), o.Feedback.IsSet()
}

// HasFeedback returns a boolean if a field has been set.
func (o *SubscriptionCancellationDetails) HasFeedback() bool {
	if o != nil && o.Feedback.IsSet() {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given NullableSubscriptionCancelFeedbackEnum and assigns it to the Feedback field.
func (o *SubscriptionCancellationDetails) SetFeedback(v SubscriptionCancelFeedbackEnum) {
	o.Feedback.Set(&v)
}
// SetFeedbackNil sets the value for Feedback to be an explicit nil
func (o *SubscriptionCancellationDetails) SetFeedbackNil() {
	o.Feedback.Set(nil)
}

// UnsetFeedback ensures that no value is present for Feedback, not even an explicit nil
func (o *SubscriptionCancellationDetails) UnsetFeedback() {
	o.Feedback.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionCancellationDetails) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionCancellationDetails) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *SubscriptionCancellationDetails) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *SubscriptionCancellationDetails) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *SubscriptionCancellationDetails) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *SubscriptionCancellationDetails) UnsetReason() {
	o.Reason.Unset()
}

func (o SubscriptionCancellationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCancellationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Feedback.IsSet() {
		toSerialize["feedback"] = o.Feedback.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	return toSerialize, nil
}

type NullableSubscriptionCancellationDetails struct {
	value *SubscriptionCancellationDetails
	isSet bool
}

func (v NullableSubscriptionCancellationDetails) Get() *SubscriptionCancellationDetails {
	return v.value
}

func (v *NullableSubscriptionCancellationDetails) Set(val *SubscriptionCancellationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCancellationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCancellationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCancellationDetails(val *SubscriptionCancellationDetails) *NullableSubscriptionCancellationDetails {
	return &NullableSubscriptionCancellationDetails{value: val, isSet: true}
}

func (v NullableSubscriptionCancellationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCancellationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


