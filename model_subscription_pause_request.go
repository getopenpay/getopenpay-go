/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionPauseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPauseRequest{}

// SubscriptionPauseRequest struct for SubscriptionPauseRequest
type SubscriptionPauseRequest struct {
	// Whether the request is in preview mode (Subscription won't actually pause)
	IsPreview *bool `json:"is_preview,omitempty"`
	NumberOfBillingCyclesToSkip NullableInt32 `json:"number_of_billing_cycles_to_skip,omitempty"`
	ResumptionDate NullableTime `json:"resumption_date,omitempty"`
}

// NewSubscriptionPauseRequest instantiates a new SubscriptionPauseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPauseRequest() *SubscriptionPauseRequest {
	this := SubscriptionPauseRequest{}
	var isPreview bool = false
	this.IsPreview = &isPreview
	return &this
}

// NewSubscriptionPauseRequestWithDefaults instantiates a new SubscriptionPauseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPauseRequestWithDefaults() *SubscriptionPauseRequest {
	this := SubscriptionPauseRequest{}
	var isPreview bool = false
	this.IsPreview = &isPreview
	return &this
}

// GetIsPreview returns the IsPreview field value if set, zero value otherwise.
func (o *SubscriptionPauseRequest) GetIsPreview() bool {
	if o == nil || IsNil(o.IsPreview) {
		var ret bool
		return ret
	}
	return *o.IsPreview
}

// GetIsPreviewOk returns a tuple with the IsPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPauseRequest) GetIsPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreview) {
		return nil, false
	}
	return o.IsPreview, true
}

// HasIsPreview returns a boolean if a field has been set.
func (o *SubscriptionPauseRequest) HasIsPreview() bool {
	if o != nil && !IsNil(o.IsPreview) {
		return true
	}

	return false
}

// SetIsPreview gets a reference to the given bool and assigns it to the IsPreview field.
func (o *SubscriptionPauseRequest) SetIsPreview(v bool) {
	o.IsPreview = &v
}

// GetNumberOfBillingCyclesToSkip returns the NumberOfBillingCyclesToSkip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionPauseRequest) GetNumberOfBillingCyclesToSkip() int32 {
	if o == nil || IsNil(o.NumberOfBillingCyclesToSkip.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfBillingCyclesToSkip.Get()
}

// GetNumberOfBillingCyclesToSkipOk returns a tuple with the NumberOfBillingCyclesToSkip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionPauseRequest) GetNumberOfBillingCyclesToSkipOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfBillingCyclesToSkip.Get(), o.NumberOfBillingCyclesToSkip.IsSet()
}

// HasNumberOfBillingCyclesToSkip returns a boolean if a field has been set.
func (o *SubscriptionPauseRequest) HasNumberOfBillingCyclesToSkip() bool {
	if o != nil && o.NumberOfBillingCyclesToSkip.IsSet() {
		return true
	}

	return false
}

// SetNumberOfBillingCyclesToSkip gets a reference to the given NullableInt32 and assigns it to the NumberOfBillingCyclesToSkip field.
func (o *SubscriptionPauseRequest) SetNumberOfBillingCyclesToSkip(v int32) {
	o.NumberOfBillingCyclesToSkip.Set(&v)
}
// SetNumberOfBillingCyclesToSkipNil sets the value for NumberOfBillingCyclesToSkip to be an explicit nil
func (o *SubscriptionPauseRequest) SetNumberOfBillingCyclesToSkipNil() {
	o.NumberOfBillingCyclesToSkip.Set(nil)
}

// UnsetNumberOfBillingCyclesToSkip ensures that no value is present for NumberOfBillingCyclesToSkip, not even an explicit nil
func (o *SubscriptionPauseRequest) UnsetNumberOfBillingCyclesToSkip() {
	o.NumberOfBillingCyclesToSkip.Unset()
}

// GetResumptionDate returns the ResumptionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionPauseRequest) GetResumptionDate() time.Time {
	if o == nil || IsNil(o.ResumptionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ResumptionDate.Get()
}

// GetResumptionDateOk returns a tuple with the ResumptionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionPauseRequest) GetResumptionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResumptionDate.Get(), o.ResumptionDate.IsSet()
}

// HasResumptionDate returns a boolean if a field has been set.
func (o *SubscriptionPauseRequest) HasResumptionDate() bool {
	if o != nil && o.ResumptionDate.IsSet() {
		return true
	}

	return false
}

// SetResumptionDate gets a reference to the given NullableTime and assigns it to the ResumptionDate field.
func (o *SubscriptionPauseRequest) SetResumptionDate(v time.Time) {
	o.ResumptionDate.Set(&v)
}
// SetResumptionDateNil sets the value for ResumptionDate to be an explicit nil
func (o *SubscriptionPauseRequest) SetResumptionDateNil() {
	o.ResumptionDate.Set(nil)
}

// UnsetResumptionDate ensures that no value is present for ResumptionDate, not even an explicit nil
func (o *SubscriptionPauseRequest) UnsetResumptionDate() {
	o.ResumptionDate.Unset()
}

func (o SubscriptionPauseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPauseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsPreview) {
		toSerialize["is_preview"] = o.IsPreview
	}
	if o.NumberOfBillingCyclesToSkip.IsSet() {
		toSerialize["number_of_billing_cycles_to_skip"] = o.NumberOfBillingCyclesToSkip.Get()
	}
	if o.ResumptionDate.IsSet() {
		toSerialize["resumption_date"] = o.ResumptionDate.Get()
	}
	return toSerialize, nil
}

type NullableSubscriptionPauseRequest struct {
	value *SubscriptionPauseRequest
	isSet bool
}

func (v NullableSubscriptionPauseRequest) Get() *SubscriptionPauseRequest {
	return v.value
}

func (v *NullableSubscriptionPauseRequest) Set(val *SubscriptionPauseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPauseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPauseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPauseRequest(val *SubscriptionPauseRequest) *NullableSubscriptionPauseRequest {
	return &NullableSubscriptionPauseRequest{value: val, isSet: true}
}

func (v NullableSubscriptionPauseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPauseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


