/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionPauseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPauseRequest{}

// SubscriptionPauseRequest struct for SubscriptionPauseRequest
type SubscriptionPauseRequest struct {
	// Number of billing cycles this subscription will be paused.
	NumberOfBillingCyclesToSkip int32 `json:"number_of_billing_cycles_to_skip"`
}

type _SubscriptionPauseRequest SubscriptionPauseRequest

// NewSubscriptionPauseRequest instantiates a new SubscriptionPauseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPauseRequest(numberOfBillingCyclesToSkip int32) *SubscriptionPauseRequest {
	this := SubscriptionPauseRequest{}
	this.NumberOfBillingCyclesToSkip = numberOfBillingCyclesToSkip
	return &this
}

// NewSubscriptionPauseRequestWithDefaults instantiates a new SubscriptionPauseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPauseRequestWithDefaults() *SubscriptionPauseRequest {
	this := SubscriptionPauseRequest{}
	return &this
}

// GetNumberOfBillingCyclesToSkip returns the NumberOfBillingCyclesToSkip field value
func (o *SubscriptionPauseRequest) GetNumberOfBillingCyclesToSkip() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfBillingCyclesToSkip
}

// GetNumberOfBillingCyclesToSkipOk returns a tuple with the NumberOfBillingCyclesToSkip field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPauseRequest) GetNumberOfBillingCyclesToSkipOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfBillingCyclesToSkip, true
}

// SetNumberOfBillingCyclesToSkip sets field value
func (o *SubscriptionPauseRequest) SetNumberOfBillingCyclesToSkip(v int32) {
	o.NumberOfBillingCyclesToSkip = v
}

func (o SubscriptionPauseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPauseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number_of_billing_cycles_to_skip"] = o.NumberOfBillingCyclesToSkip
	return toSerialize, nil
}

func (o *SubscriptionPauseRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number_of_billing_cycles_to_skip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPauseRequest := _SubscriptionPauseRequest{}

	err = json.Unmarshal(bytes, &varSubscriptionPauseRequest)

	if err != nil {
		return err
	}

	*o = SubscriptionPauseRequest(varSubscriptionPauseRequest)

	return err
}

type NullableSubscriptionPauseRequest struct {
	value *SubscriptionPauseRequest
	isSet bool
}

func (v NullableSubscriptionPauseRequest) Get() *SubscriptionPauseRequest {
	return v.value
}

func (v *NullableSubscriptionPauseRequest) Set(val *SubscriptionPauseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPauseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPauseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPauseRequest(val *SubscriptionPauseRequest) *NullableSubscriptionPauseRequest {
	return &NullableSubscriptionPauseRequest{value: val, isSet: true}
}

func (v NullableSubscriptionPauseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPauseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


