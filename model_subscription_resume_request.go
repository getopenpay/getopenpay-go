/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the SubscriptionResumeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionResumeRequest{}

// SubscriptionResumeRequest struct for SubscriptionResumeRequest
type SubscriptionResumeRequest struct {
	// Whether the request is in preview mode (subscriptions won't actually be resumed)
	IsPreview *bool `json:"is_preview,omitempty"`
	// Determines how to handle prorations when the subscription is resumed.
	ProrationBehavior *ProrationEnum `json:"proration_behavior,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionResumeRequest SubscriptionResumeRequest

// NewSubscriptionResumeRequest instantiates a new SubscriptionResumeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionResumeRequest() *SubscriptionResumeRequest {
	this := SubscriptionResumeRequest{}
	var isPreview bool = false
	this.IsPreview = &isPreview
	return &this
}

// NewSubscriptionResumeRequestWithDefaults instantiates a new SubscriptionResumeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionResumeRequestWithDefaults() *SubscriptionResumeRequest {
	this := SubscriptionResumeRequest{}
	var isPreview bool = false
	this.IsPreview = &isPreview
	return &this
}

// GetIsPreview returns the IsPreview field value if set, zero value otherwise.
func (o *SubscriptionResumeRequest) GetIsPreview() bool {
	if o == nil || IsNil(o.IsPreview) {
		var ret bool
		return ret
	}
	return *o.IsPreview
}

// GetIsPreviewOk returns a tuple with the IsPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResumeRequest) GetIsPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreview) {
		return nil, false
	}
	return o.IsPreview, true
}

// HasIsPreview returns a boolean if a field has been set.
func (o *SubscriptionResumeRequest) HasIsPreview() bool {
	if o != nil && !IsNil(o.IsPreview) {
		return true
	}

	return false
}

// SetIsPreview gets a reference to the given bool and assigns it to the IsPreview field.
func (o *SubscriptionResumeRequest) SetIsPreview(v bool) {
	o.IsPreview = &v
}

// GetProrationBehavior returns the ProrationBehavior field value if set, zero value otherwise.
func (o *SubscriptionResumeRequest) GetProrationBehavior() ProrationEnum {
	if o == nil || IsNil(o.ProrationBehavior) {
		var ret ProrationEnum
		return ret
	}
	return *o.ProrationBehavior
}

// GetProrationBehaviorOk returns a tuple with the ProrationBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionResumeRequest) GetProrationBehaviorOk() (*ProrationEnum, bool) {
	if o == nil || IsNil(o.ProrationBehavior) {
		return nil, false
	}
	return o.ProrationBehavior, true
}

// HasProrationBehavior returns a boolean if a field has been set.
func (o *SubscriptionResumeRequest) HasProrationBehavior() bool {
	if o != nil && !IsNil(o.ProrationBehavior) {
		return true
	}

	return false
}

// SetProrationBehavior gets a reference to the given ProrationEnum and assigns it to the ProrationBehavior field.
func (o *SubscriptionResumeRequest) SetProrationBehavior(v ProrationEnum) {
	o.ProrationBehavior = &v
}

func (o SubscriptionResumeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionResumeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsPreview) {
		toSerialize["is_preview"] = o.IsPreview
	}
	if !IsNil(o.ProrationBehavior) {
		toSerialize["proration_behavior"] = o.ProrationBehavior
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionResumeRequest) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionResumeRequest := _SubscriptionResumeRequest{}

	err = json.Unmarshal(data, &varSubscriptionResumeRequest)

	if err != nil {
		return err
	}

	*o = SubscriptionResumeRequest(varSubscriptionResumeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "is_preview")
		delete(additionalProperties, "proration_behavior")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionResumeRequest struct {
	value *SubscriptionResumeRequest
	isSet bool
}

func (v NullableSubscriptionResumeRequest) Get() *SubscriptionResumeRequest {
	return v.value
}

func (v *NullableSubscriptionResumeRequest) Set(val *SubscriptionResumeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionResumeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionResumeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionResumeRequest(val *SubscriptionResumeRequest) *NullableSubscriptionResumeRequest {
	return &NullableSubscriptionResumeRequest{value: val, isSet: true}
}

func (v NullableSubscriptionResumeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionResumeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


