/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// SubscriptionStatusEnum the model 'SubscriptionStatusEnum'
type SubscriptionStatusEnum string

// List of SubscriptionStatusEnum
const (
	SUBSCRIPTIONSTATUSENUM_INCOMPLETE SubscriptionStatusEnum = "incomplete"
	SUBSCRIPTIONSTATUSENUM_TRIALING SubscriptionStatusEnum = "trialing"
	SUBSCRIPTIONSTATUSENUM_ACTIVE SubscriptionStatusEnum = "active"
	SUBSCRIPTIONSTATUSENUM_PAUSED SubscriptionStatusEnum = "paused"
	SUBSCRIPTIONSTATUSENUM_PAST_DUE SubscriptionStatusEnum = "past_due"
	SUBSCRIPTIONSTATUSENUM_CANCELED SubscriptionStatusEnum = "canceled"
)

// All allowed values of SubscriptionStatusEnum enum
var AllowedSubscriptionStatusEnumEnumValues = []SubscriptionStatusEnum{
	"incomplete",
	"trialing",
	"active",
	"paused",
	"past_due",
	"canceled",
}

func (v *SubscriptionStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionStatusEnum(value)
	for _, existing := range AllowedSubscriptionStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionStatusEnum", value)
}

// NewSubscriptionStatusEnumFromValue returns a pointer to a valid SubscriptionStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionStatusEnumFromValue(v string) (*SubscriptionStatusEnum, error) {
	ev := SubscriptionStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionStatusEnum: valid values are %v", v, AllowedSubscriptionStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionStatusEnum) IsValid() bool {
	for _, existing := range AllowedSubscriptionStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionStatusEnum value
func (v SubscriptionStatusEnum) Ptr() *SubscriptionStatusEnum {
	return &v
}

type NullableSubscriptionStatusEnum struct {
	value *SubscriptionStatusEnum
	isSet bool
}

func (v NullableSubscriptionStatusEnum) Get() *SubscriptionStatusEnum {
	return v.value
}

func (v *NullableSubscriptionStatusEnum) Set(val *SubscriptionStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionStatusEnum(val *SubscriptionStatusEnum) *NullableSubscriptionStatusEnum {
	return &NullableSubscriptionStatusEnum{value: val, isSet: true}
}

func (v NullableSubscriptionStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

