/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxIdSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxIdSetting{}

// TaxIdSetting struct for TaxIdSetting
type TaxIdSetting struct {
	// The tax ID value
	TaxId string `json:"tax_id"`
	// The type code for this tax ID
	TaxIdType string `json:"tax_id_type"`
	AdditionalProperties map[string]interface{}
}

type _TaxIdSetting TaxIdSetting

// NewTaxIdSetting instantiates a new TaxIdSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxIdSetting(taxId string, taxIdType string) *TaxIdSetting {
	this := TaxIdSetting{}
	this.TaxId = taxId
	this.TaxIdType = taxIdType
	return &this
}

// NewTaxIdSettingWithDefaults instantiates a new TaxIdSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxIdSettingWithDefaults() *TaxIdSetting {
	this := TaxIdSetting{}
	return &this
}

// GetTaxId returns the TaxId field value
func (o *TaxIdSetting) GetTaxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value
// and a boolean to check if the value has been set.
func (o *TaxIdSetting) GetTaxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxId, true
}

// SetTaxId sets field value
func (o *TaxIdSetting) SetTaxId(v string) {
	o.TaxId = v
}

// GetTaxIdType returns the TaxIdType field value
func (o *TaxIdSetting) GetTaxIdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaxIdType
}

// GetTaxIdTypeOk returns a tuple with the TaxIdType field value
// and a boolean to check if the value has been set.
func (o *TaxIdSetting) GetTaxIdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxIdType, true
}

// SetTaxIdType sets field value
func (o *TaxIdSetting) SetTaxIdType(v string) {
	o.TaxIdType = v
}

func (o TaxIdSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxIdSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tax_id"] = o.TaxId
	toSerialize["tax_id_type"] = o.TaxIdType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaxIdSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tax_id",
		"tax_id_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxIdSetting := _TaxIdSetting{}

	err = json.Unmarshal(data, &varTaxIdSetting)

	if err != nil {
		return err
	}

	*o = TaxIdSetting(varTaxIdSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tax_id")
		delete(additionalProperties, "tax_id_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaxIdSetting struct {
	value *TaxIdSetting
	isSet bool
}

func (v NullableTaxIdSetting) Get() *TaxIdSetting {
	return v.value
}

func (v *NullableTaxIdSetting) Set(val *TaxIdSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxIdSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxIdSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxIdSetting(val *TaxIdSetting) *NullableTaxIdSetting {
	return &NullableTaxIdSetting{value: val, isSet: true}
}

func (v NullableTaxIdSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxIdSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


