/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaxIdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxIdType{}

// TaxIdType struct for TaxIdType
type TaxIdType struct {
	// Human readable description of this tax ID type
	Description string `json:"description"`
	// Example of a valid tax ID of this type
	Example string `json:"example"`
	// The type code for this tax ID
	TaxIdType TaxIdTypeEnum `json:"tax_id_type"`
}

type _TaxIdType TaxIdType

// NewTaxIdType instantiates a new TaxIdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxIdType(description string, example string, taxIdType TaxIdTypeEnum) *TaxIdType {
	this := TaxIdType{}
	this.Description = description
	this.Example = example
	this.TaxIdType = taxIdType
	return &this
}

// NewTaxIdTypeWithDefaults instantiates a new TaxIdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxIdTypeWithDefaults() *TaxIdType {
	this := TaxIdType{}
	return &this
}

// GetDescription returns the Description field value
func (o *TaxIdType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TaxIdType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TaxIdType) SetDescription(v string) {
	o.Description = v
}

// GetExample returns the Example field value
func (o *TaxIdType) GetExample() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Example
}

// GetExampleOk returns a tuple with the Example field value
// and a boolean to check if the value has been set.
func (o *TaxIdType) GetExampleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Example, true
}

// SetExample sets field value
func (o *TaxIdType) SetExample(v string) {
	o.Example = v
}

// GetTaxIdType returns the TaxIdType field value
func (o *TaxIdType) GetTaxIdType() TaxIdTypeEnum {
	if o == nil {
		var ret TaxIdTypeEnum
		return ret
	}

	return o.TaxIdType
}

// GetTaxIdTypeOk returns a tuple with the TaxIdType field value
// and a boolean to check if the value has been set.
func (o *TaxIdType) GetTaxIdTypeOk() (*TaxIdTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxIdType, true
}

// SetTaxIdType sets field value
func (o *TaxIdType) SetTaxIdType(v TaxIdTypeEnum) {
	o.TaxIdType = v
}

func (o TaxIdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxIdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["example"] = o.Example
	toSerialize["tax_id_type"] = o.TaxIdType
	return toSerialize, nil
}

func (o *TaxIdType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"example",
		"tax_id_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxIdType := _TaxIdType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxIdType)

	if err != nil {
		return err
	}

	*o = TaxIdType(varTaxIdType)

	return err
}

type NullableTaxIdType struct {
	value *TaxIdType
	isSet bool
}

func (v NullableTaxIdType) Get() *TaxIdType {
	return v.value
}

func (v *NullableTaxIdType) Set(val *TaxIdType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxIdType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxIdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxIdType(val *TaxIdType) *NullableTaxIdType {
	return &NullableTaxIdType{value: val, isSet: true}
}

func (v NullableTaxIdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxIdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


