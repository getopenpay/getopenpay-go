/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// TaxIdTypeEnum Enum for all supported tax ID types.
type TaxIdTypeEnum string

// List of TaxIdTypeEnum
const (
	TAXIDTYPEENUM_AL_TIN TaxIdTypeEnum = "al_tin"
	TAXIDTYPEENUM_AD_NRT TaxIdTypeEnum = "ad_nrt"
	TAXIDTYPEENUM_AO_TIN TaxIdTypeEnum = "ao_tin"
	TAXIDTYPEENUM_AR_CUIT TaxIdTypeEnum = "ar_cuit"
	TAXIDTYPEENUM_AM_TIN TaxIdTypeEnum = "am_tin"
	TAXIDTYPEENUM_AU_ABN TaxIdTypeEnum = "au_abn"
	TAXIDTYPEENUM_AU_ARN TaxIdTypeEnum = "au_arn"
	TAXIDTYPEENUM_EU_VAT TaxIdTypeEnum = "eu_vat"
	TAXIDTYPEENUM_BS_TIN TaxIdTypeEnum = "bs_tin"
	TAXIDTYPEENUM_BH_VAT TaxIdTypeEnum = "bh_vat"
	TAXIDTYPEENUM_BB_TIN TaxIdTypeEnum = "bb_tin"
	TAXIDTYPEENUM_BY_TIN TaxIdTypeEnum = "by_tin"
	TAXIDTYPEENUM_BO_TIN TaxIdTypeEnum = "bo_tin"
	TAXIDTYPEENUM_BA_TIN TaxIdTypeEnum = "ba_tin"
	TAXIDTYPEENUM_BR_CNPJ TaxIdTypeEnum = "br_cnpj"
	TAXIDTYPEENUM_BR_CPF TaxIdTypeEnum = "br_cpf"
	TAXIDTYPEENUM_BG_UIC TaxIdTypeEnum = "bg_uic"
	TAXIDTYPEENUM_KH_TIN TaxIdTypeEnum = "kh_tin"
	TAXIDTYPEENUM_CA_BN TaxIdTypeEnum = "ca_bn"
	TAXIDTYPEENUM_CA_GST_HST TaxIdTypeEnum = "ca_gst_hst"
	TAXIDTYPEENUM_CA_PST_BC TaxIdTypeEnum = "ca_pst_bc"
	TAXIDTYPEENUM_CA_PST_MB TaxIdTypeEnum = "ca_pst_mb"
	TAXIDTYPEENUM_CA_PST_SK TaxIdTypeEnum = "ca_pst_sk"
	TAXIDTYPEENUM_CA_QST TaxIdTypeEnum = "ca_qst"
	TAXIDTYPEENUM_CL_TIN TaxIdTypeEnum = "cl_tin"
	TAXIDTYPEENUM_CN_TIN TaxIdTypeEnum = "cn_tin"
	TAXIDTYPEENUM_CO_NIT TaxIdTypeEnum = "co_nit"
	TAXIDTYPEENUM_CD_NIF TaxIdTypeEnum = "cd_nif"
	TAXIDTYPEENUM_CR_TIN TaxIdTypeEnum = "cr_tin"
	TAXIDTYPEENUM_HR_OIB TaxIdTypeEnum = "hr_oib"
	TAXIDTYPEENUM_DO_RCN TaxIdTypeEnum = "do_rcn"
	TAXIDTYPEENUM_EC_RUC TaxIdTypeEnum = "ec_ruc"
	TAXIDTYPEENUM_EG_TIN TaxIdTypeEnum = "eg_tin"
	TAXIDTYPEENUM_SV_NIT TaxIdTypeEnum = "sv_nit"
	TAXIDTYPEENUM_EU_OSS_VAT TaxIdTypeEnum = "eu_oss_vat"
	TAXIDTYPEENUM_DE_STN TaxIdTypeEnum = "de_stn"
	TAXIDTYPEENUM_GE_VAT TaxIdTypeEnum = "ge_vat"
	TAXIDTYPEENUM_GN_NIF TaxIdTypeEnum = "gn_nif"
	TAXIDTYPEENUM_HK_BR TaxIdTypeEnum = "hk_br"
	TAXIDTYPEENUM_HU_TIN TaxIdTypeEnum = "hu_tin"
	TAXIDTYPEENUM_IS_VAT TaxIdTypeEnum = "is_vat"
	TAXIDTYPEENUM_IN_GST TaxIdTypeEnum = "in_gst"
	TAXIDTYPEENUM_ID_NPWP TaxIdTypeEnum = "id_npwp"
	TAXIDTYPEENUM_IL_VAT TaxIdTypeEnum = "il_vat"
	TAXIDTYPEENUM_JP_CN TaxIdTypeEnum = "jp_cn"
	TAXIDTYPEENUM_JP_RN TaxIdTypeEnum = "jp_rn"
	TAXIDTYPEENUM_JP_TRN TaxIdTypeEnum = "jp_trn"
	TAXIDTYPEENUM_KZ_BIN TaxIdTypeEnum = "kz_bin"
	TAXIDTYPEENUM_KE_PIN TaxIdTypeEnum = "ke_pin"
	TAXIDTYPEENUM_LI_UID TaxIdTypeEnum = "li_uid"
	TAXIDTYPEENUM_LI_VAT TaxIdTypeEnum = "li_vat"
	TAXIDTYPEENUM_MY_FRP TaxIdTypeEnum = "my_frp"
	TAXIDTYPEENUM_MY_ITN TaxIdTypeEnum = "my_itn"
	TAXIDTYPEENUM_MY_SST TaxIdTypeEnum = "my_sst"
	TAXIDTYPEENUM_MR_NIF TaxIdTypeEnum = "mr_nif"
	TAXIDTYPEENUM_MX_RFC TaxIdTypeEnum = "mx_rfc"
	TAXIDTYPEENUM_MD_VAT TaxIdTypeEnum = "md_vat"
	TAXIDTYPEENUM_ME_PIB TaxIdTypeEnum = "me_pib"
	TAXIDTYPEENUM_MA_VAT TaxIdTypeEnum = "ma_vat"
	TAXIDTYPEENUM_NP_PAN TaxIdTypeEnum = "np_pan"
	TAXIDTYPEENUM_NZ_GST TaxIdTypeEnum = "nz_gst"
	TAXIDTYPEENUM_NG_TIN TaxIdTypeEnum = "ng_tin"
	TAXIDTYPEENUM_MK_VAT TaxIdTypeEnum = "mk_vat"
	TAXIDTYPEENUM_NO_VAT TaxIdTypeEnum = "no_vat"
	TAXIDTYPEENUM_NO_VOEC TaxIdTypeEnum = "no_voec"
	TAXIDTYPEENUM_OM_VAT TaxIdTypeEnum = "om_vat"
	TAXIDTYPEENUM_PE_RUC TaxIdTypeEnum = "pe_ruc"
	TAXIDTYPEENUM_PH_TIN TaxIdTypeEnum = "ph_tin"
	TAXIDTYPEENUM_RO_TIN TaxIdTypeEnum = "ro_tin"
	TAXIDTYPEENUM_RU_INN TaxIdTypeEnum = "ru_inn"
	TAXIDTYPEENUM_RU_KPP TaxIdTypeEnum = "ru_kpp"
	TAXIDTYPEENUM_SA_VAT TaxIdTypeEnum = "sa_vat"
	TAXIDTYPEENUM_SN_NINEA TaxIdTypeEnum = "sn_ninea"
	TAXIDTYPEENUM_RS_PIB TaxIdTypeEnum = "rs_pib"
	TAXIDTYPEENUM_SG_GST TaxIdTypeEnum = "sg_gst"
	TAXIDTYPEENUM_SG_UEN TaxIdTypeEnum = "sg_uen"
	TAXIDTYPEENUM_SI_TIN TaxIdTypeEnum = "si_tin"
	TAXIDTYPEENUM_ZA_VAT TaxIdTypeEnum = "za_vat"
	TAXIDTYPEENUM_KR_BRN TaxIdTypeEnum = "kr_brn"
	TAXIDTYPEENUM_ES_CIF TaxIdTypeEnum = "es_cif"
	TAXIDTYPEENUM_SR_FIN TaxIdTypeEnum = "sr_fin"
	TAXIDTYPEENUM_CH_UID TaxIdTypeEnum = "ch_uid"
	TAXIDTYPEENUM_CH_VAT TaxIdTypeEnum = "ch_vat"
	TAXIDTYPEENUM_TW_VAT TaxIdTypeEnum = "tw_vat"
	TAXIDTYPEENUM_TJ_TIN TaxIdTypeEnum = "tj_tin"
	TAXIDTYPEENUM_TZ_VAT TaxIdTypeEnum = "tz_vat"
	TAXIDTYPEENUM_TH_VAT TaxIdTypeEnum = "th_vat"
	TAXIDTYPEENUM_TR_TIN TaxIdTypeEnum = "tr_tin"
	TAXIDTYPEENUM_UG_TIN TaxIdTypeEnum = "ug_tin"
	TAXIDTYPEENUM_UA_VAT TaxIdTypeEnum = "ua_vat"
	TAXIDTYPEENUM_AE_TRN TaxIdTypeEnum = "ae_trn"
	TAXIDTYPEENUM_GB_VAT TaxIdTypeEnum = "gb_vat"
	TAXIDTYPEENUM_US_EIN TaxIdTypeEnum = "us_ein"
	TAXIDTYPEENUM_UY_RUC TaxIdTypeEnum = "uy_ruc"
	TAXIDTYPEENUM_UZ_TIN TaxIdTypeEnum = "uz_tin"
	TAXIDTYPEENUM_UZ_VAT TaxIdTypeEnum = "uz_vat"
	TAXIDTYPEENUM_VE_RIF TaxIdTypeEnum = "ve_rif"
	TAXIDTYPEENUM_VN_TIN TaxIdTypeEnum = "vn_tin"
	TAXIDTYPEENUM_ZM_TIN TaxIdTypeEnum = "zm_tin"
	TAXIDTYPEENUM_ZW_TIN TaxIdTypeEnum = "zw_tin"
)

// All allowed values of TaxIdTypeEnum enum
var AllowedTaxIdTypeEnumEnumValues = []TaxIdTypeEnum{
	"al_tin",
	"ad_nrt",
	"ao_tin",
	"ar_cuit",
	"am_tin",
	"au_abn",
	"au_arn",
	"eu_vat",
	"bs_tin",
	"bh_vat",
	"bb_tin",
	"by_tin",
	"bo_tin",
	"ba_tin",
	"br_cnpj",
	"br_cpf",
	"bg_uic",
	"kh_tin",
	"ca_bn",
	"ca_gst_hst",
	"ca_pst_bc",
	"ca_pst_mb",
	"ca_pst_sk",
	"ca_qst",
	"cl_tin",
	"cn_tin",
	"co_nit",
	"cd_nif",
	"cr_tin",
	"hr_oib",
	"do_rcn",
	"ec_ruc",
	"eg_tin",
	"sv_nit",
	"eu_oss_vat",
	"de_stn",
	"ge_vat",
	"gn_nif",
	"hk_br",
	"hu_tin",
	"is_vat",
	"in_gst",
	"id_npwp",
	"il_vat",
	"jp_cn",
	"jp_rn",
	"jp_trn",
	"kz_bin",
	"ke_pin",
	"li_uid",
	"li_vat",
	"my_frp",
	"my_itn",
	"my_sst",
	"mr_nif",
	"mx_rfc",
	"md_vat",
	"me_pib",
	"ma_vat",
	"np_pan",
	"nz_gst",
	"ng_tin",
	"mk_vat",
	"no_vat",
	"no_voec",
	"om_vat",
	"pe_ruc",
	"ph_tin",
	"ro_tin",
	"ru_inn",
	"ru_kpp",
	"sa_vat",
	"sn_ninea",
	"rs_pib",
	"sg_gst",
	"sg_uen",
	"si_tin",
	"za_vat",
	"kr_brn",
	"es_cif",
	"sr_fin",
	"ch_uid",
	"ch_vat",
	"tw_vat",
	"tj_tin",
	"tz_vat",
	"th_vat",
	"tr_tin",
	"ug_tin",
	"ua_vat",
	"ae_trn",
	"gb_vat",
	"us_ein",
	"uy_ruc",
	"uz_tin",
	"uz_vat",
	"ve_rif",
	"vn_tin",
	"zm_tin",
	"zw_tin",
}

func (v *TaxIdTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxIdTypeEnum(value)
	for _, existing := range AllowedTaxIdTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxIdTypeEnum", value)
}

// NewTaxIdTypeEnumFromValue returns a pointer to a valid TaxIdTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxIdTypeEnumFromValue(v string) (*TaxIdTypeEnum, error) {
	ev := TaxIdTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxIdTypeEnum: valid values are %v", v, AllowedTaxIdTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxIdTypeEnum) IsValid() bool {
	for _, existing := range AllowedTaxIdTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaxIdTypeEnum value
func (v TaxIdTypeEnum) Ptr() *TaxIdTypeEnum {
	return &v
}

type NullableTaxIdTypeEnum struct {
	value *TaxIdTypeEnum
	isSet bool
}

func (v NullableTaxIdTypeEnum) Get() *TaxIdTypeEnum {
	return v.value
}

func (v *NullableTaxIdTypeEnum) Set(val *TaxIdTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxIdTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxIdTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxIdTypeEnum(val *TaxIdTypeEnum) *NullableTaxIdTypeEnum {
	return &NullableTaxIdTypeEnum{value: val, isSet: true}
}

func (v NullableTaxIdTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxIdTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

