/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// TaxIntegrationApiName the model 'TaxIntegrationApiName'
type TaxIntegrationApiName string

// List of TaxIntegrationApiName
const (
	TAXINTEGRATIONAPINAME_ANROK_V1 TaxIntegrationApiName = "anrok_v1"
)

// All allowed values of TaxIntegrationApiName enum
var AllowedTaxIntegrationApiNameEnumValues = []TaxIntegrationApiName{
	"anrok_v1",
}

func (v *TaxIntegrationApiName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxIntegrationApiName(value)
	for _, existing := range AllowedTaxIntegrationApiNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxIntegrationApiName", value)
}

// NewTaxIntegrationApiNameFromValue returns a pointer to a valid TaxIntegrationApiName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxIntegrationApiNameFromValue(v string) (*TaxIntegrationApiName, error) {
	ev := TaxIntegrationApiName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxIntegrationApiName: valid values are %v", v, AllowedTaxIntegrationApiNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxIntegrationApiName) IsValid() bool {
	for _, existing := range AllowedTaxIntegrationApiNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaxIntegrationApiName value
func (v TaxIntegrationApiName) Ptr() *TaxIntegrationApiName {
	return &v
}

type NullableTaxIntegrationApiName struct {
	value *TaxIntegrationApiName
	isSet bool
}

func (v NullableTaxIntegrationApiName) Get() *TaxIntegrationApiName {
	return v.value
}

func (v *NullableTaxIntegrationApiName) Set(val *TaxIntegrationApiName) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxIntegrationApiName) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxIntegrationApiName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxIntegrationApiName(val *TaxIntegrationApiName) *NullableTaxIntegrationApiName {
	return &NullableTaxIntegrationApiName{value: val, isSet: true}
}

func (v NullableTaxIntegrationApiName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxIntegrationApiName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

