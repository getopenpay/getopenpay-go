/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
)

// checks if the UpdatePriceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePriceRequest{}

// UpdatePriceRequest struct for UpdatePriceRequest
type UpdatePriceRequest struct {
	AggregateUsage NullableUsageAggMethodEnum `json:"aggregate_usage,omitempty"`
	BillingInterval NullableCalendarIntervalEnum `json:"billing_interval,omitempty"`
	BillingIntervalCount NullableInt32 `json:"billing_interval_count,omitempty"`
	// This price can only be purchased in a subscription if subscriptioncontains at least one of these prices.
	CanOnlyBePurchasedWith []string `json:"can_only_be_purchased_with,omitempty"`
	ContractAutoRenew NullableBool `json:"contract_auto_renew,omitempty"`
	ContractTermMultiple NullableInt32 `json:"contract_term_multiple,omitempty"`
	Currency NullableCurrencyEnum `json:"currency,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	DefaultNetD NullableInt32 `json:"default_net_d,omitempty"`
	InternalDescription NullableString `json:"internal_description,omitempty"`
	IsActive NullableBool `json:"is_active,omitempty"`
	IsExclusive NullableBool `json:"is_exclusive,omitempty"`
	// When listed_exclusively_for_customers is passed only customers under listed_exclusively_for_customers can list the given price. Anyone who has a payment_link containing the price can view and subscribe the prices regardless of it.Please do not pass a value if a price is not exclusive.
	ListedExclusivelyForCustomers []string `json:"listed_exclusively_for_customers,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	MeterId NullableString `json:"meter_id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	// List of price_tiers.
	PriceTiers []PriceTierParams `json:"price_tiers,omitempty"`
	PriceType NullablePriceTypeEnum `json:"price_type,omitempty"`
	PricingModel NullablePricingModel `json:"pricing_model,omitempty"`
	TransformQuantityDivideBy NullableFloat32 `json:"transform_quantity_divide_by,omitempty"`
	TrialPeriodDays NullableInt32 `json:"trial_period_days,omitempty"`
	UnitAmountAtom NullableInt32 `json:"unit_amount_atom,omitempty"`
	UsageType NullableUsageTypeEnum `json:"usage_type,omitempty"`
}

// NewUpdatePriceRequest instantiates a new UpdatePriceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePriceRequest() *UpdatePriceRequest {
	this := UpdatePriceRequest{}
	return &this
}

// NewUpdatePriceRequestWithDefaults instantiates a new UpdatePriceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePriceRequestWithDefaults() *UpdatePriceRequest {
	this := UpdatePriceRequest{}
	return &this
}

// GetAggregateUsage returns the AggregateUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetAggregateUsage() UsageAggMethodEnum {
	if o == nil || IsNil(o.AggregateUsage.Get()) {
		var ret UsageAggMethodEnum
		return ret
	}
	return *o.AggregateUsage.Get()
}

// GetAggregateUsageOk returns a tuple with the AggregateUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetAggregateUsageOk() (*UsageAggMethodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregateUsage.Get(), o.AggregateUsage.IsSet()
}

// HasAggregateUsage returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasAggregateUsage() bool {
	if o != nil && o.AggregateUsage.IsSet() {
		return true
	}

	return false
}

// SetAggregateUsage gets a reference to the given NullableUsageAggMethodEnum and assigns it to the AggregateUsage field.
func (o *UpdatePriceRequest) SetAggregateUsage(v UsageAggMethodEnum) {
	o.AggregateUsage.Set(&v)
}
// SetAggregateUsageNil sets the value for AggregateUsage to be an explicit nil
func (o *UpdatePriceRequest) SetAggregateUsageNil() {
	o.AggregateUsage.Set(nil)
}

// UnsetAggregateUsage ensures that no value is present for AggregateUsage, not even an explicit nil
func (o *UpdatePriceRequest) UnsetAggregateUsage() {
	o.AggregateUsage.Unset()
}

// GetBillingInterval returns the BillingInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetBillingInterval() CalendarIntervalEnum {
	if o == nil || IsNil(o.BillingInterval.Get()) {
		var ret CalendarIntervalEnum
		return ret
	}
	return *o.BillingInterval.Get()
}

// GetBillingIntervalOk returns a tuple with the BillingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetBillingIntervalOk() (*CalendarIntervalEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingInterval.Get(), o.BillingInterval.IsSet()
}

// HasBillingInterval returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasBillingInterval() bool {
	if o != nil && o.BillingInterval.IsSet() {
		return true
	}

	return false
}

// SetBillingInterval gets a reference to the given NullableCalendarIntervalEnum and assigns it to the BillingInterval field.
func (o *UpdatePriceRequest) SetBillingInterval(v CalendarIntervalEnum) {
	o.BillingInterval.Set(&v)
}
// SetBillingIntervalNil sets the value for BillingInterval to be an explicit nil
func (o *UpdatePriceRequest) SetBillingIntervalNil() {
	o.BillingInterval.Set(nil)
}

// UnsetBillingInterval ensures that no value is present for BillingInterval, not even an explicit nil
func (o *UpdatePriceRequest) UnsetBillingInterval() {
	o.BillingInterval.Unset()
}

// GetBillingIntervalCount returns the BillingIntervalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetBillingIntervalCount() int32 {
	if o == nil || IsNil(o.BillingIntervalCount.Get()) {
		var ret int32
		return ret
	}
	return *o.BillingIntervalCount.Get()
}

// GetBillingIntervalCountOk returns a tuple with the BillingIntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetBillingIntervalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingIntervalCount.Get(), o.BillingIntervalCount.IsSet()
}

// HasBillingIntervalCount returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasBillingIntervalCount() bool {
	if o != nil && o.BillingIntervalCount.IsSet() {
		return true
	}

	return false
}

// SetBillingIntervalCount gets a reference to the given NullableInt32 and assigns it to the BillingIntervalCount field.
func (o *UpdatePriceRequest) SetBillingIntervalCount(v int32) {
	o.BillingIntervalCount.Set(&v)
}
// SetBillingIntervalCountNil sets the value for BillingIntervalCount to be an explicit nil
func (o *UpdatePriceRequest) SetBillingIntervalCountNil() {
	o.BillingIntervalCount.Set(nil)
}

// UnsetBillingIntervalCount ensures that no value is present for BillingIntervalCount, not even an explicit nil
func (o *UpdatePriceRequest) UnsetBillingIntervalCount() {
	o.BillingIntervalCount.Unset()
}

// GetCanOnlyBePurchasedWith returns the CanOnlyBePurchasedWith field value if set, zero value otherwise.
func (o *UpdatePriceRequest) GetCanOnlyBePurchasedWith() []string {
	if o == nil || IsNil(o.CanOnlyBePurchasedWith) {
		var ret []string
		return ret
	}
	return o.CanOnlyBePurchasedWith
}

// GetCanOnlyBePurchasedWithOk returns a tuple with the CanOnlyBePurchasedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceRequest) GetCanOnlyBePurchasedWithOk() ([]string, bool) {
	if o == nil || IsNil(o.CanOnlyBePurchasedWith) {
		return nil, false
	}
	return o.CanOnlyBePurchasedWith, true
}

// HasCanOnlyBePurchasedWith returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasCanOnlyBePurchasedWith() bool {
	if o != nil && !IsNil(o.CanOnlyBePurchasedWith) {
		return true
	}

	return false
}

// SetCanOnlyBePurchasedWith gets a reference to the given []string and assigns it to the CanOnlyBePurchasedWith field.
func (o *UpdatePriceRequest) SetCanOnlyBePurchasedWith(v []string) {
	o.CanOnlyBePurchasedWith = v
}

// GetContractAutoRenew returns the ContractAutoRenew field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetContractAutoRenew() bool {
	if o == nil || IsNil(o.ContractAutoRenew.Get()) {
		var ret bool
		return ret
	}
	return *o.ContractAutoRenew.Get()
}

// GetContractAutoRenewOk returns a tuple with the ContractAutoRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetContractAutoRenewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractAutoRenew.Get(), o.ContractAutoRenew.IsSet()
}

// HasContractAutoRenew returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasContractAutoRenew() bool {
	if o != nil && o.ContractAutoRenew.IsSet() {
		return true
	}

	return false
}

// SetContractAutoRenew gets a reference to the given NullableBool and assigns it to the ContractAutoRenew field.
func (o *UpdatePriceRequest) SetContractAutoRenew(v bool) {
	o.ContractAutoRenew.Set(&v)
}
// SetContractAutoRenewNil sets the value for ContractAutoRenew to be an explicit nil
func (o *UpdatePriceRequest) SetContractAutoRenewNil() {
	o.ContractAutoRenew.Set(nil)
}

// UnsetContractAutoRenew ensures that no value is present for ContractAutoRenew, not even an explicit nil
func (o *UpdatePriceRequest) UnsetContractAutoRenew() {
	o.ContractAutoRenew.Unset()
}

// GetContractTermMultiple returns the ContractTermMultiple field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetContractTermMultiple() int32 {
	if o == nil || IsNil(o.ContractTermMultiple.Get()) {
		var ret int32
		return ret
	}
	return *o.ContractTermMultiple.Get()
}

// GetContractTermMultipleOk returns a tuple with the ContractTermMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetContractTermMultipleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractTermMultiple.Get(), o.ContractTermMultiple.IsSet()
}

// HasContractTermMultiple returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasContractTermMultiple() bool {
	if o != nil && o.ContractTermMultiple.IsSet() {
		return true
	}

	return false
}

// SetContractTermMultiple gets a reference to the given NullableInt32 and assigns it to the ContractTermMultiple field.
func (o *UpdatePriceRequest) SetContractTermMultiple(v int32) {
	o.ContractTermMultiple.Set(&v)
}
// SetContractTermMultipleNil sets the value for ContractTermMultiple to be an explicit nil
func (o *UpdatePriceRequest) SetContractTermMultipleNil() {
	o.ContractTermMultiple.Set(nil)
}

// UnsetContractTermMultiple ensures that no value is present for ContractTermMultiple, not even an explicit nil
func (o *UpdatePriceRequest) UnsetContractTermMultiple() {
	o.ContractTermMultiple.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetCurrency() CurrencyEnum {
	if o == nil || IsNil(o.Currency.Get()) {
		var ret CurrencyEnum
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetCurrencyOk() (*CurrencyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableCurrencyEnum and assigns it to the Currency field.
func (o *UpdatePriceRequest) SetCurrency(v CurrencyEnum) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *UpdatePriceRequest) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *UpdatePriceRequest) UnsetCurrency() {
	o.Currency.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetCustomFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *UpdatePriceRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetDefaultNetD returns the DefaultNetD field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetDefaultNetD() int32 {
	if o == nil || IsNil(o.DefaultNetD.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultNetD.Get()
}

// GetDefaultNetDOk returns a tuple with the DefaultNetD field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetDefaultNetDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultNetD.Get(), o.DefaultNetD.IsSet()
}

// HasDefaultNetD returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasDefaultNetD() bool {
	if o != nil && o.DefaultNetD.IsSet() {
		return true
	}

	return false
}

// SetDefaultNetD gets a reference to the given NullableInt32 and assigns it to the DefaultNetD field.
func (o *UpdatePriceRequest) SetDefaultNetD(v int32) {
	o.DefaultNetD.Set(&v)
}
// SetDefaultNetDNil sets the value for DefaultNetD to be an explicit nil
func (o *UpdatePriceRequest) SetDefaultNetDNil() {
	o.DefaultNetD.Set(nil)
}

// UnsetDefaultNetD ensures that no value is present for DefaultNetD, not even an explicit nil
func (o *UpdatePriceRequest) UnsetDefaultNetD() {
	o.DefaultNetD.Unset()
}

// GetInternalDescription returns the InternalDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetInternalDescription() string {
	if o == nil || IsNil(o.InternalDescription.Get()) {
		var ret string
		return ret
	}
	return *o.InternalDescription.Get()
}

// GetInternalDescriptionOk returns a tuple with the InternalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetInternalDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalDescription.Get(), o.InternalDescription.IsSet()
}

// HasInternalDescription returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasInternalDescription() bool {
	if o != nil && o.InternalDescription.IsSet() {
		return true
	}

	return false
}

// SetInternalDescription gets a reference to the given NullableString and assigns it to the InternalDescription field.
func (o *UpdatePriceRequest) SetInternalDescription(v string) {
	o.InternalDescription.Set(&v)
}
// SetInternalDescriptionNil sets the value for InternalDescription to be an explicit nil
func (o *UpdatePriceRequest) SetInternalDescriptionNil() {
	o.InternalDescription.Set(nil)
}

// UnsetInternalDescription ensures that no value is present for InternalDescription, not even an explicit nil
func (o *UpdatePriceRequest) UnsetInternalDescription() {
	o.InternalDescription.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *UpdatePriceRequest) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *UpdatePriceRequest) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *UpdatePriceRequest) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetIsExclusive returns the IsExclusive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetIsExclusive() bool {
	if o == nil || IsNil(o.IsExclusive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsExclusive.Get()
}

// GetIsExclusiveOk returns a tuple with the IsExclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetIsExclusiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsExclusive.Get(), o.IsExclusive.IsSet()
}

// HasIsExclusive returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasIsExclusive() bool {
	if o != nil && o.IsExclusive.IsSet() {
		return true
	}

	return false
}

// SetIsExclusive gets a reference to the given NullableBool and assigns it to the IsExclusive field.
func (o *UpdatePriceRequest) SetIsExclusive(v bool) {
	o.IsExclusive.Set(&v)
}
// SetIsExclusiveNil sets the value for IsExclusive to be an explicit nil
func (o *UpdatePriceRequest) SetIsExclusiveNil() {
	o.IsExclusive.Set(nil)
}

// UnsetIsExclusive ensures that no value is present for IsExclusive, not even an explicit nil
func (o *UpdatePriceRequest) UnsetIsExclusive() {
	o.IsExclusive.Unset()
}

// GetListedExclusivelyForCustomers returns the ListedExclusivelyForCustomers field value if set, zero value otherwise.
func (o *UpdatePriceRequest) GetListedExclusivelyForCustomers() []string {
	if o == nil || IsNil(o.ListedExclusivelyForCustomers) {
		var ret []string
		return ret
	}
	return o.ListedExclusivelyForCustomers
}

// GetListedExclusivelyForCustomersOk returns a tuple with the ListedExclusivelyForCustomers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceRequest) GetListedExclusivelyForCustomersOk() ([]string, bool) {
	if o == nil || IsNil(o.ListedExclusivelyForCustomers) {
		return nil, false
	}
	return o.ListedExclusivelyForCustomers, true
}

// HasListedExclusivelyForCustomers returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasListedExclusivelyForCustomers() bool {
	if o != nil && !IsNil(o.ListedExclusivelyForCustomers) {
		return true
	}

	return false
}

// SetListedExclusivelyForCustomers gets a reference to the given []string and assigns it to the ListedExclusivelyForCustomers field.
func (o *UpdatePriceRequest) SetListedExclusivelyForCustomers(v []string) {
	o.ListedExclusivelyForCustomers = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *UpdatePriceRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetMeterId returns the MeterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetMeterId() string {
	if o == nil || IsNil(o.MeterId.Get()) {
		var ret string
		return ret
	}
	return *o.MeterId.Get()
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetMeterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MeterId.Get(), o.MeterId.IsSet()
}

// HasMeterId returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasMeterId() bool {
	if o != nil && o.MeterId.IsSet() {
		return true
	}

	return false
}

// SetMeterId gets a reference to the given NullableString and assigns it to the MeterId field.
func (o *UpdatePriceRequest) SetMeterId(v string) {
	o.MeterId.Set(&v)
}
// SetMeterIdNil sets the value for MeterId to be an explicit nil
func (o *UpdatePriceRequest) SetMeterIdNil() {
	o.MeterId.Set(nil)
}

// UnsetMeterId ensures that no value is present for MeterId, not even an explicit nil
func (o *UpdatePriceRequest) UnsetMeterId() {
	o.MeterId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdatePriceRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdatePriceRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdatePriceRequest) UnsetName() {
	o.Name.Unset()
}

// GetPriceTiers returns the PriceTiers field value if set, zero value otherwise.
func (o *UpdatePriceRequest) GetPriceTiers() []PriceTierParams {
	if o == nil || IsNil(o.PriceTiers) {
		var ret []PriceTierParams
		return ret
	}
	return o.PriceTiers
}

// GetPriceTiersOk returns a tuple with the PriceTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceRequest) GetPriceTiersOk() ([]PriceTierParams, bool) {
	if o == nil || IsNil(o.PriceTiers) {
		return nil, false
	}
	return o.PriceTiers, true
}

// HasPriceTiers returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasPriceTiers() bool {
	if o != nil && !IsNil(o.PriceTiers) {
		return true
	}

	return false
}

// SetPriceTiers gets a reference to the given []PriceTierParams and assigns it to the PriceTiers field.
func (o *UpdatePriceRequest) SetPriceTiers(v []PriceTierParams) {
	o.PriceTiers = v
}

// GetPriceType returns the PriceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetPriceType() PriceTypeEnum {
	if o == nil || IsNil(o.PriceType.Get()) {
		var ret PriceTypeEnum
		return ret
	}
	return *o.PriceType.Get()
}

// GetPriceTypeOk returns a tuple with the PriceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetPriceTypeOk() (*PriceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceType.Get(), o.PriceType.IsSet()
}

// HasPriceType returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasPriceType() bool {
	if o != nil && o.PriceType.IsSet() {
		return true
	}

	return false
}

// SetPriceType gets a reference to the given NullablePriceTypeEnum and assigns it to the PriceType field.
func (o *UpdatePriceRequest) SetPriceType(v PriceTypeEnum) {
	o.PriceType.Set(&v)
}
// SetPriceTypeNil sets the value for PriceType to be an explicit nil
func (o *UpdatePriceRequest) SetPriceTypeNil() {
	o.PriceType.Set(nil)
}

// UnsetPriceType ensures that no value is present for PriceType, not even an explicit nil
func (o *UpdatePriceRequest) UnsetPriceType() {
	o.PriceType.Unset()
}

// GetPricingModel returns the PricingModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetPricingModel() PricingModel {
	if o == nil || IsNil(o.PricingModel.Get()) {
		var ret PricingModel
		return ret
	}
	return *o.PricingModel.Get()
}

// GetPricingModelOk returns a tuple with the PricingModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetPricingModelOk() (*PricingModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.PricingModel.Get(), o.PricingModel.IsSet()
}

// HasPricingModel returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasPricingModel() bool {
	if o != nil && o.PricingModel.IsSet() {
		return true
	}

	return false
}

// SetPricingModel gets a reference to the given NullablePricingModel and assigns it to the PricingModel field.
func (o *UpdatePriceRequest) SetPricingModel(v PricingModel) {
	o.PricingModel.Set(&v)
}
// SetPricingModelNil sets the value for PricingModel to be an explicit nil
func (o *UpdatePriceRequest) SetPricingModelNil() {
	o.PricingModel.Set(nil)
}

// UnsetPricingModel ensures that no value is present for PricingModel, not even an explicit nil
func (o *UpdatePriceRequest) UnsetPricingModel() {
	o.PricingModel.Unset()
}

// GetTransformQuantityDivideBy returns the TransformQuantityDivideBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetTransformQuantityDivideBy() float32 {
	if o == nil || IsNil(o.TransformQuantityDivideBy.Get()) {
		var ret float32
		return ret
	}
	return *o.TransformQuantityDivideBy.Get()
}

// GetTransformQuantityDivideByOk returns a tuple with the TransformQuantityDivideBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetTransformQuantityDivideByOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformQuantityDivideBy.Get(), o.TransformQuantityDivideBy.IsSet()
}

// HasTransformQuantityDivideBy returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasTransformQuantityDivideBy() bool {
	if o != nil && o.TransformQuantityDivideBy.IsSet() {
		return true
	}

	return false
}

// SetTransformQuantityDivideBy gets a reference to the given NullableFloat32 and assigns it to the TransformQuantityDivideBy field.
func (o *UpdatePriceRequest) SetTransformQuantityDivideBy(v float32) {
	o.TransformQuantityDivideBy.Set(&v)
}
// SetTransformQuantityDivideByNil sets the value for TransformQuantityDivideBy to be an explicit nil
func (o *UpdatePriceRequest) SetTransformQuantityDivideByNil() {
	o.TransformQuantityDivideBy.Set(nil)
}

// UnsetTransformQuantityDivideBy ensures that no value is present for TransformQuantityDivideBy, not even an explicit nil
func (o *UpdatePriceRequest) UnsetTransformQuantityDivideBy() {
	o.TransformQuantityDivideBy.Unset()
}

// GetTrialPeriodDays returns the TrialPeriodDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetTrialPeriodDays() int32 {
	if o == nil || IsNil(o.TrialPeriodDays.Get()) {
		var ret int32
		return ret
	}
	return *o.TrialPeriodDays.Get()
}

// GetTrialPeriodDaysOk returns a tuple with the TrialPeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetTrialPeriodDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialPeriodDays.Get(), o.TrialPeriodDays.IsSet()
}

// HasTrialPeriodDays returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasTrialPeriodDays() bool {
	if o != nil && o.TrialPeriodDays.IsSet() {
		return true
	}

	return false
}

// SetTrialPeriodDays gets a reference to the given NullableInt32 and assigns it to the TrialPeriodDays field.
func (o *UpdatePriceRequest) SetTrialPeriodDays(v int32) {
	o.TrialPeriodDays.Set(&v)
}
// SetTrialPeriodDaysNil sets the value for TrialPeriodDays to be an explicit nil
func (o *UpdatePriceRequest) SetTrialPeriodDaysNil() {
	o.TrialPeriodDays.Set(nil)
}

// UnsetTrialPeriodDays ensures that no value is present for TrialPeriodDays, not even an explicit nil
func (o *UpdatePriceRequest) UnsetTrialPeriodDays() {
	o.TrialPeriodDays.Unset()
}

// GetUnitAmountAtom returns the UnitAmountAtom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetUnitAmountAtom() int32 {
	if o == nil || IsNil(o.UnitAmountAtom.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitAmountAtom.Get()
}

// GetUnitAmountAtomOk returns a tuple with the UnitAmountAtom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetUnitAmountAtomOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitAmountAtom.Get(), o.UnitAmountAtom.IsSet()
}

// HasUnitAmountAtom returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasUnitAmountAtom() bool {
	if o != nil && o.UnitAmountAtom.IsSet() {
		return true
	}

	return false
}

// SetUnitAmountAtom gets a reference to the given NullableInt32 and assigns it to the UnitAmountAtom field.
func (o *UpdatePriceRequest) SetUnitAmountAtom(v int32) {
	o.UnitAmountAtom.Set(&v)
}
// SetUnitAmountAtomNil sets the value for UnitAmountAtom to be an explicit nil
func (o *UpdatePriceRequest) SetUnitAmountAtomNil() {
	o.UnitAmountAtom.Set(nil)
}

// UnsetUnitAmountAtom ensures that no value is present for UnitAmountAtom, not even an explicit nil
func (o *UpdatePriceRequest) UnsetUnitAmountAtom() {
	o.UnitAmountAtom.Unset()
}

// GetUsageType returns the UsageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePriceRequest) GetUsageType() UsageTypeEnum {
	if o == nil || IsNil(o.UsageType.Get()) {
		var ret UsageTypeEnum
		return ret
	}
	return *o.UsageType.Get()
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePriceRequest) GetUsageTypeOk() (*UsageTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageType.Get(), o.UsageType.IsSet()
}

// HasUsageType returns a boolean if a field has been set.
func (o *UpdatePriceRequest) HasUsageType() bool {
	if o != nil && o.UsageType.IsSet() {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given NullableUsageTypeEnum and assigns it to the UsageType field.
func (o *UpdatePriceRequest) SetUsageType(v UsageTypeEnum) {
	o.UsageType.Set(&v)
}
// SetUsageTypeNil sets the value for UsageType to be an explicit nil
func (o *UpdatePriceRequest) SetUsageTypeNil() {
	o.UsageType.Set(nil)
}

// UnsetUsageType ensures that no value is present for UsageType, not even an explicit nil
func (o *UpdatePriceRequest) UnsetUsageType() {
	o.UsageType.Unset()
}

func (o UpdatePriceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePriceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregateUsage.IsSet() {
		toSerialize["aggregate_usage"] = o.AggregateUsage.Get()
	}
	if o.BillingInterval.IsSet() {
		toSerialize["billing_interval"] = o.BillingInterval.Get()
	}
	if o.BillingIntervalCount.IsSet() {
		toSerialize["billing_interval_count"] = o.BillingIntervalCount.Get()
	}
	if !IsNil(o.CanOnlyBePurchasedWith) {
		toSerialize["can_only_be_purchased_with"] = o.CanOnlyBePurchasedWith
	}
	if o.ContractAutoRenew.IsSet() {
		toSerialize["contract_auto_renew"] = o.ContractAutoRenew.Get()
	}
	if o.ContractTermMultiple.IsSet() {
		toSerialize["contract_term_multiple"] = o.ContractTermMultiple.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if o.DefaultNetD.IsSet() {
		toSerialize["default_net_d"] = o.DefaultNetD.Get()
	}
	if o.InternalDescription.IsSet() {
		toSerialize["internal_description"] = o.InternalDescription.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["is_active"] = o.IsActive.Get()
	}
	if o.IsExclusive.IsSet() {
		toSerialize["is_exclusive"] = o.IsExclusive.Get()
	}
	if !IsNil(o.ListedExclusivelyForCustomers) {
		toSerialize["listed_exclusively_for_customers"] = o.ListedExclusivelyForCustomers
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.MeterId.IsSet() {
		toSerialize["meter_id"] = o.MeterId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.PriceTiers) {
		toSerialize["price_tiers"] = o.PriceTiers
	}
	if o.PriceType.IsSet() {
		toSerialize["price_type"] = o.PriceType.Get()
	}
	if o.PricingModel.IsSet() {
		toSerialize["pricing_model"] = o.PricingModel.Get()
	}
	if o.TransformQuantityDivideBy.IsSet() {
		toSerialize["transform_quantity_divide_by"] = o.TransformQuantityDivideBy.Get()
	}
	if o.TrialPeriodDays.IsSet() {
		toSerialize["trial_period_days"] = o.TrialPeriodDays.Get()
	}
	if o.UnitAmountAtom.IsSet() {
		toSerialize["unit_amount_atom"] = o.UnitAmountAtom.Get()
	}
	if o.UsageType.IsSet() {
		toSerialize["usage_type"] = o.UsageType.Get()
	}
	return toSerialize, nil
}

type NullableUpdatePriceRequest struct {
	value *UpdatePriceRequest
	isSet bool
}

func (v NullableUpdatePriceRequest) Get() *UpdatePriceRequest {
	return v.value
}

func (v *NullableUpdatePriceRequest) Set(val *UpdatePriceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePriceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePriceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePriceRequest(val *UpdatePriceRequest) *NullableUpdatePriceRequest {
	return &NullableUpdatePriceRequest{value: val, isSet: true}
}

func (v NullableUpdatePriceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePriceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


