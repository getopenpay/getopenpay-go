/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdatePromoCodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePromoCodeRequest{}

// UpdatePromoCodeRequest struct for UpdatePromoCodeRequest
type UpdatePromoCodeRequest struct {
	// Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.
	IsActive bool `json:"is_active"`
}

type _UpdatePromoCodeRequest UpdatePromoCodeRequest

// NewUpdatePromoCodeRequest instantiates a new UpdatePromoCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePromoCodeRequest(isActive bool) *UpdatePromoCodeRequest {
	this := UpdatePromoCodeRequest{}
	this.IsActive = isActive
	return &this
}

// NewUpdatePromoCodeRequestWithDefaults instantiates a new UpdatePromoCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePromoCodeRequestWithDefaults() *UpdatePromoCodeRequest {
	this := UpdatePromoCodeRequest{}
	return &this
}

// GetIsActive returns the IsActive field value
func (o *UpdatePromoCodeRequest) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *UpdatePromoCodeRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *UpdatePromoCodeRequest) SetIsActive(v bool) {
	o.IsActive = v
}

func (o UpdatePromoCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePromoCodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_active"] = o.IsActive
	return toSerialize, nil
}

func (o *UpdatePromoCodeRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePromoCodeRequest := _UpdatePromoCodeRequest{}

	err = json.Unmarshal(bytes, &varUpdatePromoCodeRequest)

	if err != nil {
		return err
	}

	*o = UpdatePromoCodeRequest(varUpdatePromoCodeRequest)

	return err
}

type NullableUpdatePromoCodeRequest struct {
	value *UpdatePromoCodeRequest
	isSet bool
}

func (v NullableUpdatePromoCodeRequest) Get() *UpdatePromoCodeRequest {
	return v.value
}

func (v *NullableUpdatePromoCodeRequest) Set(val *UpdatePromoCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePromoCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePromoCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePromoCodeRequest(val *UpdatePromoCodeRequest) *NullableUpdatePromoCodeRequest {
	return &NullableUpdatePromoCodeRequest{value: val, isSet: true}
}

func (v NullableUpdatePromoCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePromoCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


