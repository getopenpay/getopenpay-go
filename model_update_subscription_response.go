/*
OpenPay API

super charge your subscription management.

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateSubscriptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptionResponse{}

// UpdateSubscriptionResponse struct for UpdateSubscriptionResponse
type UpdateSubscriptionResponse struct {
	// List of invoices created
	Invoices []InvoiceExternal `json:"invoices"`
	// List of renewal invoices created
	RenewalInvoices []InvoiceExternal `json:"renewal_invoices,omitempty"`
	// List of subscriptions updated.
	Subscriptions []SubscriptionExternal `json:"subscriptions"`
}

type _UpdateSubscriptionResponse UpdateSubscriptionResponse

// NewUpdateSubscriptionResponse instantiates a new UpdateSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriptionResponse(invoices []InvoiceExternal, subscriptions []SubscriptionExternal) *UpdateSubscriptionResponse {
	this := UpdateSubscriptionResponse{}
	this.Invoices = invoices
	this.Subscriptions = subscriptions
	return &this
}

// NewUpdateSubscriptionResponseWithDefaults instantiates a new UpdateSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptionResponseWithDefaults() *UpdateSubscriptionResponse {
	this := UpdateSubscriptionResponse{}
	return &this
}

// GetInvoices returns the Invoices field value
func (o *UpdateSubscriptionResponse) GetInvoices() []InvoiceExternal {
	if o == nil {
		var ret []InvoiceExternal
		return ret
	}

	return o.Invoices
}

// GetInvoicesOk returns a tuple with the Invoices field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionResponse) GetInvoicesOk() ([]InvoiceExternal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invoices, true
}

// SetInvoices sets field value
func (o *UpdateSubscriptionResponse) SetInvoices(v []InvoiceExternal) {
	o.Invoices = v
}

// GetRenewalInvoices returns the RenewalInvoices field value if set, zero value otherwise.
func (o *UpdateSubscriptionResponse) GetRenewalInvoices() []InvoiceExternal {
	if o == nil || IsNil(o.RenewalInvoices) {
		var ret []InvoiceExternal
		return ret
	}
	return o.RenewalInvoices
}

// GetRenewalInvoicesOk returns a tuple with the RenewalInvoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionResponse) GetRenewalInvoicesOk() ([]InvoiceExternal, bool) {
	if o == nil || IsNil(o.RenewalInvoices) {
		return nil, false
	}
	return o.RenewalInvoices, true
}

// HasRenewalInvoices returns a boolean if a field has been set.
func (o *UpdateSubscriptionResponse) HasRenewalInvoices() bool {
	if o != nil && !IsNil(o.RenewalInvoices) {
		return true
	}

	return false
}

// SetRenewalInvoices gets a reference to the given []InvoiceExternal and assigns it to the RenewalInvoices field.
func (o *UpdateSubscriptionResponse) SetRenewalInvoices(v []InvoiceExternal) {
	o.RenewalInvoices = v
}

// GetSubscriptions returns the Subscriptions field value
func (o *UpdateSubscriptionResponse) GetSubscriptions() []SubscriptionExternal {
	if o == nil {
		var ret []SubscriptionExternal
		return ret
	}

	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionResponse) GetSubscriptionsOk() ([]SubscriptionExternal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscriptions, true
}

// SetSubscriptions sets field value
func (o *UpdateSubscriptionResponse) SetSubscriptions(v []SubscriptionExternal) {
	o.Subscriptions = v
}

func (o UpdateSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoices"] = o.Invoices
	if !IsNil(o.RenewalInvoices) {
		toSerialize["renewal_invoices"] = o.RenewalInvoices
	}
	toSerialize["subscriptions"] = o.Subscriptions
	return toSerialize, nil
}

func (o *UpdateSubscriptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoices",
		"subscriptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubscriptionResponse := _UpdateSubscriptionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSubscriptionResponse)

	if err != nil {
		return err
	}

	*o = UpdateSubscriptionResponse(varUpdateSubscriptionResponse)

	return err
}

type NullableUpdateSubscriptionResponse struct {
	value *UpdateSubscriptionResponse
	isSet bool
}

func (v NullableUpdateSubscriptionResponse) Get() *UpdateSubscriptionResponse {
	return v.value
}

func (v *NullableUpdateSubscriptionResponse) Set(val *UpdateSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptionResponse(val *UpdateSubscriptionResponse) *NullableUpdateSubscriptionResponse {
	return &NullableUpdateSubscriptionResponse{value: val, isSet: true}
}

func (v NullableUpdateSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


