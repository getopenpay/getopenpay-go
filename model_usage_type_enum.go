/*
OpenPay API

super charge your subscription management.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getopenpay

import (
	"encoding/json"
	"fmt"
)

// UsageTypeEnum the model 'UsageTypeEnum'
type UsageTypeEnum string

// List of UsageTypeEnum
const (
	USAGETYPEENUM_METERED UsageTypeEnum = "metered"
	USAGETYPEENUM_LICENSED UsageTypeEnum = "licensed"
)

// All allowed values of UsageTypeEnum enum
var AllowedUsageTypeEnumEnumValues = []UsageTypeEnum{
	"metered",
	"licensed",
}

func (v *UsageTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageTypeEnum(value)
	for _, existing := range AllowedUsageTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageTypeEnum", value)
}

// NewUsageTypeEnumFromValue returns a pointer to a valid UsageTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageTypeEnumFromValue(v string) (*UsageTypeEnum, error) {
	ev := UsageTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageTypeEnum: valid values are %v", v, AllowedUsageTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageTypeEnum) IsValid() bool {
	for _, existing := range AllowedUsageTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageTypeEnum value
func (v UsageTypeEnum) Ptr() *UsageTypeEnum {
	return &v
}

type NullableUsageTypeEnum struct {
	value *UsageTypeEnum
	isSet bool
}

func (v NullableUsageTypeEnum) Get() *UsageTypeEnum {
	return v.value
}

func (v *NullableUsageTypeEnum) Set(val *UsageTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageTypeEnum(val *UsageTypeEnum) *NullableUsageTypeEnum {
	return &NullableUsageTypeEnum{value: val, isSet: true}
}

func (v NullableUsageTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

