/*
OpenPay API

Testing InvoicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package getopenpay

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_getopenpay_InvoicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InvoicesAPIService AddComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.AddComment(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService CreateInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.CreateInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService FinalizeInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.FinalizeInvoice(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService GetInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.GetInvoice(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService GetInvoicePublic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var publicPermanentToken string

		resp, httpRes, err := apiClient.InvoicesAPI.GetInvoicePublic(context.Background(), publicPermanentToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ListInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ListInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService MarkInvoiceAsUncollectible", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.MarkInvoiceAsUncollectible(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService MarkInvoiceAsVoid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.MarkInvoiceAsVoid(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService PayInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceExternalId string

		resp, httpRes, err := apiClient.InvoicesAPI.PayInvoice(context.Background(), invoiceExternalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService SearchInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.SearchInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService UpdateInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.UpdateInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
