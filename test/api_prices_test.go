/*
OpenPay API

Testing PricesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package getopenpay

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/getopenpay/getopenpay-go"
)

func Test_getopenpay_PricesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PricesAPIService CreatePriceForProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PricesAPI.CreatePriceForProduct(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService DeletePriceForProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string

		resp, httpRes, err := apiClient.PricesAPI.DeletePriceForProduct(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService FindPriceByAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var amount string

		resp, httpRes, err := apiClient.PricesAPI.FindPriceByAmount(context.Background(), amount).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService GetPriceAddOns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string

		resp, httpRes, err := apiClient.PricesAPI.GetPriceAddOns(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService GetPriceForProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string

		resp, httpRes, err := apiClient.PricesAPI.GetPriceForProduct(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService ListPrices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PricesAPI.ListPrices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesAPIService UpdatePriceForProduct", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string

		resp, httpRes, err := apiClient.PricesAPI.UpdatePriceForProduct(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
